{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Inicio","text":""},{"location":"index.html#estadistica-y-probabilidad-con-python-para-stem","title":"Estad\u00edstica y Probabilidad con Python para STEM","text":"<p>Bienvenido al repositorio de Estad\u00edstica y Probabilidad con Python para STEM, un recurso pr\u00e1ctico dise\u00f1ado para estudiantes y profesionales que desean aplicar herramientas estad\u00edsticas en los campos de ciencia, tecnolog\u00eda, ingenier\u00eda y matem\u00e1ticas.</p> <p>Este proyecto proporciona scripts en Python y notebooks de Jupyter que combinan teor\u00eda concisa con ejemplos aplicados, permiti\u00e9ndote aprender de manera interactiva. A lo largo del material, encontrar\u00e1s gu\u00edas sobre el uso de bibliotecas clave como NumPy, Pandas, SciPy y Matplotlib.</p> <p>Si est\u00e1s buscando una manera estructurada y pr\u00e1ctica de aprender estad\u00edstica aplicada con Python, este repositorio es para ti. \ud83d\ude80</p>"},{"location":"index.html#dependencias-y-gestion-del-proyecto","title":"Dependencias y gesti\u00f3n del proyecto","text":"<p>Para asegurar una instalaci\u00f3n sencilla y reproducible, este proyecto utiliza Poetry para la gesti\u00f3n de dependencias. Poetry facilita la instalaci\u00f3n y el mantenimiento del entorno de desarrollo, garantizando compatibilidad entre paquetes.</p>"},{"location":"index.html#instalacion","title":"Instalaci\u00f3n","text":"<p>Si a\u00fan no tienes Poetry instalado, puedes hacerlo con:</p> <pre><code>pip install poetry\n</code></pre> <p>Luego, para instalar todas las dependencias del proyecto, simplemente ejecuta:</p> <pre><code>poetry install\n</code></pre> <p>Este comando crear\u00e1 un entorno virtual con todas las librer\u00edas necesarias, incluyendo herramientas de linting y documentaci\u00f3n.</p>"},{"location":"Contenido/01_Numeros%20aleatorios.html","title":"01_N\u00daMEROS, VECTORES Y MATRICES (PSEUDO)ALEATORIOS CON PYTHON.","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos el m\u00f3dulo\nimport random\n</pre> # Importamos el m\u00f3dulo import random In\u00a0[\u00a0]: Copied! <pre># Generamos 5 n\u00fameros aleatorios diferentes\nfor _ in range(5):\n    print(random.random())\n</pre> # Generamos 5 n\u00fameros aleatorios diferentes for _ in range(5):     print(random.random()) In\u00a0[\u00a0]: Copied! <pre># Generamos una lista de aleatorios repetida tres veces con la misma semilla\nfor _ in range(3):\n    lista = []\n    semilla = 8\n    random.seed(semilla)\n    for _ in range(3):\n        lista.append(random.random())\n    print(lista)\n</pre> # Generamos una lista de aleatorios repetida tres veces con la misma semilla for _ in range(3):     lista = []     semilla = 8     random.seed(semilla)     for _ in range(3):         lista.append(random.random())     print(lista) In\u00a0[\u00a0]: Copied! <pre>import random\n\naleatorio = random.uniform(3, 10)\nprint(aleatorio)\n</pre> import random  aleatorio = random.uniform(3, 10) print(aleatorio) In\u00a0[\u00a0]: Copied! <pre># Si fijamos la semilla\nfor _ in range(3):\n    lista = []\n    semilla = 8\n    random.seed(semilla)\n    for _ in range(3):\n        lista.append(random.random())\n    print(lista)\n</pre> # Si fijamos la semilla for _ in range(3):     lista = []     semilla = 8     random.seed(semilla)     for _ in range(3):         lista.append(random.random())     print(lista) In\u00a0[\u00a0]: Copied! <pre>import random\nimport matplotlib.pyplot as plt\n\n# Definimos extremos de intervalo y n\u00famero de puntos\na = -100\nb = 100\npuntos = 500\n# Creamos las listas con los valores aleatorios\nx = [random.uniform(a, b) for _ in range(500)]\ny = [random.uniform(a, b) for _ in range(500)]\n# Dibujamos la nube de puntos\nplt.scatter(x, y)\n</pre> import random import matplotlib.pyplot as plt  # Definimos extremos de intervalo y n\u00famero de puntos a = -100 b = 100 puntos = 500 # Creamos las listas con los valores aleatorios x = [random.uniform(a, b) for _ in range(500)] y = [random.uniform(a, b) for _ in range(500)] # Dibujamos la nube de puntos plt.scatter(x, y) In\u00a0[\u00a0]: Copied! <pre># Generamos un n\u00famero aleatorio con randint(a,b), ambos inclusive.\nimport random\n\nx = random.randint(1, 6)\nprint(x)\n</pre> # Generamos un n\u00famero aleatorio con randint(a,b), ambos inclusive. import random  x = random.randint(1, 6) print(x) In\u00a0[\u00a0]: Copied! <pre>import random\n\nresultados = []\nfor _ in range(10):\n    resultados.append(random.randint(1, 6))\nprint(resultados)\n</pre> import random  resultados = [] for _ in range(10):     resultados.append(random.randint(1, 6)) print(resultados) In\u00a0[\u00a0]: Copied! <pre>import random\n\nprint(random.randrange(2, 10, 3))\n</pre> import random  print(random.randrange(2, 10, 3)) <p>Hemos visto c\u00f3mo generar n\u00fameros aleatorios con el m\u00f3dulo <code>random</code>. Ahora veremos que es posible extraer de forma aleatoria elementos de una lista.</p> In\u00a0[\u00a0]: Copied! <pre>import random\n\nnombres = [\"Juan\", \"Pedro\", \"Luisa\", \"Mar\u00eda\", \"Noelia\"]\nfor _ in range(3):\n    print(random.choice(nombres))\n</pre> import random  nombres = [\"Juan\", \"Pedro\", \"Luisa\", \"Mar\u00eda\", \"Noelia\"] for _ in range(3):     print(random.choice(nombres)) In\u00a0[\u00a0]: Copied! <pre># Si es una tupla\nimport random\n\ntupla = (5, 3, 4, 6, 1)\nprint(random.choice(tupla))\n</pre> # Si es una tupla import random  tupla = (5, 3, 4, 6, 1) print(random.choice(tupla)) In\u00a0[\u00a0]: Copied! <pre># En el caso de una cadena (string)\nimport random\n\npalabra = \"HOLA\"\nprint(random.choice(palabra))\n</pre> # En el caso de una cadena (string) import random  palabra = \"HOLA\" print(random.choice(palabra)) In\u00a0[\u00a0]: Copied! <pre>import random\n\nbaraja = [1, 2, 3, 4, 5, 6]\nfor _ in range(3):\n    random.shuffle(baraja)\n    print(baraja)\n</pre> import random  baraja = [1, 2, 3, 4, 5, 6] for _ in range(3):     random.shuffle(baraja)     print(baraja) In\u00a0[\u00a0]: Copied! <pre>import random\n\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n# Devuelve cuatro elementos de forma aleatoria\nrandom.sample(numeros, 4)\n</pre> import random  numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] # Devuelve cuatro elementos de forma aleatoria random.sample(numeros, 4) In\u00a0[\u00a0]: Copied! <pre>import numpy as np\n\n# Genera un vector de 5 componentes\narray = np.random.rand(5)\narray\n</pre> import numpy as np  # Genera un vector de 5 componentes array = np.random.rand(5) array In\u00a0[\u00a0]: Copied! <pre># Genera una matriz 3x2 con valores uniformemente distribuidos\nmatriz = np.random.rand(3, 2)\nmatriz\n</pre> # Genera una matriz 3x2 con valores uniformemente distribuidos matriz = np.random.rand(3, 2) matriz In\u00a0[\u00a0]: Copied! <pre>array = np.random.uniform(1, 5, size=5)\narray\n</pre> array = np.random.uniform(1, 5, size=5) array In\u00a0[\u00a0]: Copied! <pre># Para una matriz el tama\u00f1o se pasa con una tupla\nmatriz = np.random.uniform(1, 5, size=(2, 3))\nmatriz\n</pre> # Para una matriz el tama\u00f1o se pasa con una tupla matriz = np.random.uniform(1, 5, size=(2, 3)) matriz In\u00a0[\u00a0]: Copied! <pre># Genera una muestra de tama\u00f1o 10 de una Normal(0,1)\nnormales = np.random.randn(10)\nnormales\n</pre> # Genera una muestra de tama\u00f1o 10 de una Normal(0,1) normales = np.random.randn(10) normales In\u00a0[\u00a0]: Copied! <pre># Si queremos valores Normal(5,2), entonces\nmu = 5\nsigma = 2\nnormales52 = mu + sigma * normales\nnormales52\n</pre> # Si queremos valores Normal(5,2), entonces mu = 5 sigma = 2 normales52 = mu + sigma * normales normales52 In\u00a0[\u00a0]: Copied! <pre># Creamos el array con los valores\nvalores = np.random.randn(10_000)\n# Importamos matplotlib y dibujamos el histograma\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.hist(valores)\n</pre> # Creamos el array con los valores valores = np.random.randn(10_000) # Importamos matplotlib y dibujamos el histograma import matplotlib.pyplot as plt  fig, ax = plt.subplots() ax.hist(valores) In\u00a0[\u00a0]: Copied! <pre># Genera 10 n\u00fameros aleatorios enteros entre 1 y 200\nnumeros = np.random.randint(1, 200, size=10)\nnumeros\n</pre> # Genera 10 n\u00fameros aleatorios enteros entre 1 y 200 numeros = np.random.randint(1, 200, size=10) numeros In\u00a0[\u00a0]: Copied! <pre># Si queremos una matriz\nmatriz_enteros = np.random.randint(1, 200, size=(2, 4))\nmatriz_enteros\n</pre> # Si queremos una matriz matriz_enteros = np.random.randint(1, 200, size=(2, 4)) matriz_enteros In\u00a0[\u00a0]: Copied! <pre># Creamos la lista y obtenemos una muestra distinta cada vez que ejecutemos la celda\nlista = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nmuestra = np.random.choice(lista, size=4)\nmuestra\n</pre> # Creamos la lista y obtenemos una muestra distinta cada vez que ejecutemos la celda lista = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) muestra = np.random.choice(lista, size=4) muestra In\u00a0[\u00a0]: Copied! <pre># Si no queremos repetici\u00f3n\nmuestra2 = np.random.choice(lista, replace=False, size=4)\nmuestra2\n</pre> # Si no queremos repetici\u00f3n muestra2 = np.random.choice(lista, replace=False, size=4) muestra2 In\u00a0[\u00a0]: Copied! <pre># 0 es cara y 1 es cruz\nresultados = np.array([0, 1])\nlanzamientos = np.random.choice(resultados, size=10, p=[0.8, 0.2])\n</pre> # 0 es cara y 1 es cruz resultados = np.array([0, 1]) lanzamientos = np.random.choice(resultados, size=10, p=[0.8, 0.2]) In\u00a0[\u00a0]: Copied! <pre>lanzamientos\n</pre> lanzamientos In\u00a0[\u00a0]: Copied! <pre># Creamos el array\narr = np.arange(10)\narr\n</pre> # Creamos el array arr = np.arange(10) arr In\u00a0[\u00a0]: Copied! <pre># Con permutation\narr_per = np.random.permutation(arr)\nprint(arr)\nprint(arr_per)\n# Se mantiene el array original\n</pre> # Con permutation arr_per = np.random.permutation(arr) print(arr) print(arr_per) # Se mantiene el array original In\u00a0[\u00a0]: Copied! <pre># Con shuffle\narr = np.arange(10)\narr_shu = np.random.shuffle(arr)\nprint(arr)\nprint(arr_shu)\n# Se pierde el array original\n</pre> # Con shuffle arr = np.arange(10) arr_shu = np.random.shuffle(arr) print(arr) print(arr_shu) # Se pierde el array original"},{"location":"Contenido/01_Numeros%20aleatorios.html#01_numeros-vectores-y-matrices-pseudoaleatorios-con-python","title":"01_N\u00daMEROS, VECTORES Y MATRICES (PSEUDO)ALEATORIOS CON PYTHON.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#generacion-de-un-numero-aleatorio-float-comprendido-en-el-intervalo-0010-con-la-funcion-random","title":"Generaci\u00f3n de un n\u00famero aleatorio (float) comprendido en el intervalo $[0.0,1.0)$ con la funci\u00f3n <code>random</code>.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#generacion-de-un-numero-aleatorio-float-comprendido-entre-dos-numeros-ambos-incluidos-con-la-funcion-uniformab","title":"Generaci\u00f3n de un n\u00famero aleatorio (float) comprendido entre dos n\u00fameros (ambos inclu\u00eddos) con la funci\u00f3n <code>uniform(a,b)</code>\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#aplicacion-generar-una-nube-de-puntos-aleatoria-en-el-dominio-100100-times-100100-y-representarla-graficamente","title":"Aplicaci\u00f3n: Generar una nube de puntos aleatoria en el dominio $[-100,100] \\times [-100,100]$ y representarla gr\u00e1ficamente.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#generar-un-numero-aleatorio-entero-int-con-la-funcion-randintab","title":"Generar un n\u00famero aleatorio entero (int) con la funci\u00f3n <code>randint(a,b)</code>.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#aplicacion-generar-una-secuencia-de-10-lanzamientos-de-un-dado-normal","title":"***Aplicaci\u00f3n*: Generar una secuencia de 10 lanzamientos de un dado normal.**\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#genera-aleatorios-enteros-en-un-rango-de-valores-separados-entre-si-con-un-salto-con-la-funcion-randrangeabsalto","title":"Genera aleatorios enteros en un rango de valores separados entre s\u00ed con un salto con la funci\u00f3n <code>randrange(a,b,salto)</code>\u00b6","text":"<p>Por ejemplo, <code>randrange(2,10,3)</code> devolver\u00e1 un valor de entre los siguientes posibles {2,5,8}.</p>"},{"location":"Contenido/01_Numeros%20aleatorios.html#extrae-un-elemento-aleatorio-de-una-lista-o-secuencia-con-la-funcion-choice","title":"Extrae un elemento aleatorio de una lista o secuencia con la funci\u00f3n <code>choice</code>.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#baraja-los-elementos-de-una-lista-o-secuencia-con-shuffle","title":"\"Baraja\" los elementos de una lista o secuencia con <code>shuffle()</code>.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#devuelve-un-numero-determinado-de-elementos-aleatorios-de-una-secuencia-con-sample","title":"Devuelve un n\u00famero determinado de elementos aleatorios de una secuencia con <code>sample()</code>.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#generacion-de-aleatoriedad-con-numpy","title":"Generaci\u00f3n de aleatoriedad con Numpy.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#generar-un-array-del-tamano-indicado-conteniendo-numeros-aleatorios-extraidos-del-intervalo-01-a-partir-de-una-distribucion-uniforme","title":"Generar un array del tama\u00f1o indicado conteniendo n\u00fameros aleatorios extra\u00eddos del intervalo $[0,1]$ a partir de una distribuci\u00f3n uniforme.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#generar-un-array-del-tamano-indicado-conteniendo-numeros-aleatorios-segun-una-distribucion-normal-de-media-0-y-desviacion-tipica-1","title":"Generar un array del tama\u00f1o indicado conteniendo n\u00fameros aleatorios seg\u00fan una distribuci\u00f3n normal de media 0 y desviaci\u00f3n t\u00edpica 1.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#aplicacion-generar-10_000-valores-normales-y-dibujar-el-histograma","title":"***Aplicaci\u00f3n*: Generar 10_000 valores normales y dibujar el histograma**\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#generar-un-array-del-tamano-indicado-conteniendo-numeros-aleatorios-enteros","title":"Generar un array del tama\u00f1o indicado conteniendo n\u00fameros aleatorios enteros.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#seleccion-aleatoria-de-elementos-de-un-array","title":"Selecci\u00f3n aleatoria de elementos de un array.\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#aplicacion-simulacion-de-10-lanzamientos-de-una-moneda-trucada-donde-la-probabilidad-de-obtener-cara-es-08","title":"***Aplicaci\u00f3n*: Simulaci\u00f3n de 10 lanzamientos de una moneda trucada donde la probabilidad de obtener cara es 0.8.**\u00b6","text":""},{"location":"Contenido/01_Numeros%20aleatorios.html#permutar-los-elementos-de-un-array","title":"Permutar los elementos de un array\u00b6","text":""},{"location":"Contenido/02_Combinatoria.html","title":"2_COMBINATORIA CON PYTHON","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos la librer\u00eda\nimport math\n</pre> # Importamos la librer\u00eda import math In\u00a0[\u00a0]: Copied! <pre># Permutaciones sin repetici\u00f3n de 5 elementos\nmath.perm(5)\n</pre> # Permutaciones sin repetici\u00f3n de 5 elementos math.perm(5) In\u00a0[\u00a0]: Copied! <pre># Variaciones sin repetici\u00f3n de 5 elementos tomados 3 a 3 (5.4.3 = 60)\nmath.perm(5, 3)\n</pre> # Variaciones sin repetici\u00f3n de 5 elementos tomados 3 a 3 (5.4.3 = 60) math.perm(5, 3) In\u00a0[\u00a0]: Copied! <pre># Combinaciones sin repetici\u00f3n de 5 elementos tomados 3 a 3\nmath.comb(5, 3)\n</pre> # Combinaciones sin repetici\u00f3n de 5 elementos tomados 3 a 3 math.comb(5, 3) In\u00a0[\u00a0]: Copied! <pre># Variaciones con repetici\u00f3n (No hay funci\u00f3n en math)\n5**3\n</pre> # Variaciones con repetici\u00f3n (No hay funci\u00f3n en math) 5**3 In\u00a0[\u00a0]: Copied! <pre>\"\"\"Permutaciones con repetici\u00f3n de 5 elementos donde hay uno que se repite\ndos veces y otro tres (on hay un m\u00e9todo (funci\u00f3n) definido.)\"\"\"\n\nmath.factorial(5) / (math.factorial(2) * math.factorial(3))\n</pre> \"\"\"Permutaciones con repetici\u00f3n de 5 elementos donde hay uno que se repite dos veces y otro tres (on hay un m\u00e9todo (funci\u00f3n) definido.)\"\"\"  math.factorial(5) / (math.factorial(2) * math.factorial(3)) In\u00a0[\u00a0]: Copied! <pre># Importamos la librer\u00eda\nimport itertools\n</pre> # Importamos la librer\u00eda import itertools In\u00a0[\u00a0]: Copied! <pre>\"\"\"VARIACIONES SIN REPETICI\u00d3N (i.e. de 5 elementos tomados de 3 en 3)\nDefinimos el conjunto de elementos que vamos a variar\"\"\"\n\nelementos = [1, 2, 3, 4]\n# Construimos un objeto que contenga todas las variaciones\nvariaciones_sin_ordenaciones = itertools.permutations(elementos, 3)\n</pre> \"\"\"VARIACIONES SIN REPETICI\u00d3N (i.e. de 5 elementos tomados de 3 en 3) Definimos el conjunto de elementos que vamos a variar\"\"\"  elementos = [1, 2, 3, 4] # Construimos un objeto que contenga todas las variaciones variaciones_sin_ordenaciones = itertools.permutations(elementos, 3) In\u00a0[\u00a0]: Copied! <pre># Es un objeto iterable\nvariaciones_sin_ordenaciones\n</pre> # Es un objeto iterable variaciones_sin_ordenaciones In\u00a0[\u00a0]: Copied! <pre>\"\"\"Al ser iterable, podemos calcular cu\u00e1ntos elementos tiene y\nvisualizar las  ordenaciones.\"\"\"\n\nj = 0\nlista = []\nfor i in variaciones_sin_ordenaciones:\n    lista.append(i)\n    j += 1\nprint(lista)\nprint()\nprint(f\"Hay un total de {j} variaciones.\")\n</pre> \"\"\"Al ser iterable, podemos calcular cu\u00e1ntos elementos tiene y visualizar las  ordenaciones.\"\"\"  j = 0 lista = [] for i in variaciones_sin_ordenaciones:     lista.append(i)     j += 1 print(lista) print() print(f\"Hay un total de {j} variaciones.\") In\u00a0[\u00a0]: Copied! <pre># Defimos el conjunto que queremos \"variar\"\nconjunto = \"ABC\"  # Puede ser una lista o un `string`\n</pre> # Defimos el conjunto que queremos \"variar\" conjunto = \"ABC\"  # Puede ser una lista o un `string` In\u00a0[\u00a0]: Copied! <pre># Variaciones con repetici\u00f3n de tres elementos tomados de dos en dos\nvariaciones_con_ordenaciones = itertools.product(conjunto, repeat=2)\n# Es un producto cartesiano de \"conjunto\" x \"conjunto\"\n</pre> # Variaciones con repetici\u00f3n de tres elementos tomados de dos en dos variaciones_con_ordenaciones = itertools.product(conjunto, repeat=2) # Es un producto cartesiano de \"conjunto\" x \"conjunto\" In\u00a0[\u00a0]: Copied! <pre># Bucle para leer las variaciones y contarlas.\nnumero_variaciones_repet = 0  # Inicializamos el contador\n# Bucle para imprimir y contar las variaciones.\nfor i in variaciones_con_ordenaciones:\n    print(i)\n    numero_variaciones_repet += 1\nprint(f\"{numero_variaciones_repet} variaciones con repetici\u00f3n.\")\n</pre> # Bucle para leer las variaciones y contarlas. numero_variaciones_repet = 0  # Inicializamos el contador # Bucle para imprimir y contar las variaciones. for i in variaciones_con_ordenaciones:     print(i)     numero_variaciones_repet += 1 print(f\"{numero_variaciones_repet} variaciones con repetici\u00f3n.\") In\u00a0[\u00a0]: Copied! <pre># Importamos el m\u00f3dulo itertools por si no lo hab\u00edamos hecho antes\nimport itertools\n\n# Definimos el conjunto que queremos permutar\nconjunto = [1, 2, 3]\n\n# Creamos el objeto que contiene las permutaciones\npermutaciones_sin = itertools.permutations(conjunto)\n\n\"\"\"Ciclo \"for\" para visualizarlas, pero ahora vamos a crear una lista con las\npermutaciones para visualizarlas m\u00e1s c\u00f3modamente.\"\"\"\nlista_permutaciones = []  # Lista vac\u00eda donde acumulamos las permutaciones\nnumero_permutaciones = 0  # Inicializamos el contador de permutaciones\n\nfor i in permutaciones_sin:\n    lista_permutaciones.append(i)\n    numero_permutaciones += 1\n\nprint(f\"Hay {numero_permutaciones} permutaciones sin repetici\u00f3n.\")\nprint(lista_permutaciones)\n</pre> # Importamos el m\u00f3dulo itertools por si no lo hab\u00edamos hecho antes import itertools  # Definimos el conjunto que queremos permutar conjunto = [1, 2, 3]  # Creamos el objeto que contiene las permutaciones permutaciones_sin = itertools.permutations(conjunto)  \"\"\"Ciclo \"for\" para visualizarlas, pero ahora vamos a crear una lista con las permutaciones para visualizarlas m\u00e1s c\u00f3modamente.\"\"\" lista_permutaciones = []  # Lista vac\u00eda donde acumulamos las permutaciones numero_permutaciones = 0  # Inicializamos el contador de permutaciones  for i in permutaciones_sin:     lista_permutaciones.append(i)     numero_permutaciones += 1  print(f\"Hay {numero_permutaciones} permutaciones sin repetici\u00f3n.\") print(lista_permutaciones) In\u00a0[\u00a0]: Copied! <pre>\"\"\"No disponemos de una funci\u00f3n espec\u00edfica\npor lo que habr\u00e1 que calcularlo \"a mano\"\"\"\n\nimport math\n\nconjunto = \"AABBB\"\nnum_permuta_con = math.factorial(5) / (math.factorial(2) * math.factorial(3))\nprint(f\"Hay {int(num_permuta_con)} permutaciones con repetici\u00f3n.\")\n</pre> \"\"\"No disponemos de una funci\u00f3n espec\u00edfica por lo que habr\u00e1 que calcularlo \"a mano\"\"\"  import math  conjunto = \"AABBB\" num_permuta_con = math.factorial(5) / (math.factorial(2) * math.factorial(3)) print(f\"Hay {int(num_permuta_con)} permutaciones con repetici\u00f3n.\") In\u00a0[\u00a0]: Copied! <pre>\"\"\"Si queremos calcular el n\u00famero de permutaciones y visualizarlas,\npodemos utilizar el siguiente programa\"\"\"\n\nconjunto = \"AABBB\"  # Cadena/lista que se quiera permutar\n\n\"\"\"Inicializamos un diccionario donde se acumulen los elementos (keys) \ny las veces que se repite cada uno (values)\"\"\"\nletras_dic = dict()  # Diccionario vac\u00edo\nelementos_repetidos = 0  # Elementos que se repiten\n\nfor letra in conjunto:  # Por cada letra\n    if letra in letras_dic:  # Si ya estaba en el dic() significa que se repite\n        if letras_dic[letra] == 1:\n            elementos_repetidos += 1  # Se agrega al contador\n        letras_dic[letra] += 1  # Continua el conteo\n    else:\n        letras_dic[letra] = 1  # Si la letra no esta en el diccionario, la a\u00f1ade\n\n\"\"\"Obtenermos el diccionario con el n\u00famero de veces (values) que se repite\ncada elemento (keys)\"\"\"\nprint(letras_dic)\nprint(f\"Hay {elementos_repetidos} elementos que se repiten.\")\n</pre> \"\"\"Si queremos calcular el n\u00famero de permutaciones y visualizarlas, podemos utilizar el siguiente programa\"\"\"  conjunto = \"AABBB\"  # Cadena/lista que se quiera permutar  \"\"\"Inicializamos un diccionario donde se acumulen los elementos (keys)  y las veces que se repite cada uno (values)\"\"\" letras_dic = dict()  # Diccionario vac\u00edo elementos_repetidos = 0  # Elementos que se repiten  for letra in conjunto:  # Por cada letra     if letra in letras_dic:  # Si ya estaba en el dic() significa que se repite         if letras_dic[letra] == 1:             elementos_repetidos += 1  # Se agrega al contador         letras_dic[letra] += 1  # Continua el conteo     else:         letras_dic[letra] = 1  # Si la letra no esta en el diccionario, la a\u00f1ade  \"\"\"Obtenermos el diccionario con el n\u00famero de veces (values) que se repite cada elemento (keys)\"\"\" print(letras_dic) print(f\"Hay {elementos_repetidos} elementos que se repiten.\") In\u00a0[\u00a0]: Copied! <pre>\"\"\"Iniciamos el n\u00famero de permutaciones con repetici\u00f3n\ncon el valor del n\u00famero de repeticiones sin repetici\u00f3n.\"\"\"\n\nnumero_permutaciones_con = math.factorial(len(conjunto))\n\n\"\"\"Calculamos el n\u00famero de permutaciones con repetici\u00f3n y la mostramos en pantalla\ndividiendo en cada iteraci\u00f3n por el n\u00famero de permutaciones de cada letra.\"\"\"\nfor i in letras_dic.values():\n    numero_permutaciones_con = numero_permutaciones_con * 1 / math.factorial(i)\n\nprint(f\"Hay {int(numero_permutaciones_con)} permutaciones con repetici\u00f3n.\")\n</pre> \"\"\"Iniciamos el n\u00famero de permutaciones con repetici\u00f3n con el valor del n\u00famero de repeticiones sin repetici\u00f3n.\"\"\"  numero_permutaciones_con = math.factorial(len(conjunto))  \"\"\"Calculamos el n\u00famero de permutaciones con repetici\u00f3n y la mostramos en pantalla dividiendo en cada iteraci\u00f3n por el n\u00famero de permutaciones de cada letra.\"\"\" for i in letras_dic.values():     numero_permutaciones_con = numero_permutaciones_con * 1 / math.factorial(i)  print(f\"Hay {int(numero_permutaciones_con)} permutaciones con repetici\u00f3n.\") In\u00a0[\u00a0]: Copied! <pre>\"\"\"Para visualizar las permutaciones, seguimos este proceso:\n#1. Generamos todas las permutaciones\"\"\"\n\nconjunto = \"AABBB\"\n# Habr\u00eda 10 permutaciones con repetici\u00f3n pero Python nos devuelve 120\n\nconjunto_perm_con = itertools.permutations(conjunto)\ntodas_permutaciones = []\nj = 0\nfor i in conjunto_perm_con:\n    todas_permutaciones.append(i)\n    j += 1\n# Mostramos solo las 15 primeras\nfor i in range(16):\n    print(todas_permutaciones[i])\nprint(\"....\")\nprint(f\"Hay {j} permutaciones.\")\n</pre> \"\"\"Para visualizar las permutaciones, seguimos este proceso: #1. Generamos todas las permutaciones\"\"\"  conjunto = \"AABBB\" # Habr\u00eda 10 permutaciones con repetici\u00f3n pero Python nos devuelve 120  conjunto_perm_con = itertools.permutations(conjunto) todas_permutaciones = [] j = 0 for i in conjunto_perm_con:     todas_permutaciones.append(i)     j += 1 # Mostramos solo las 15 primeras for i in range(16):     print(todas_permutaciones[i]) print(\"....\") print(f\"Hay {j} permutaciones.\") In\u00a0[\u00a0]: Copied! <pre>\"\"\"Podemos observar que desde la primera hasta la sexta son la misma ordenaci\u00f3n,\npero no las distingue (para Python son \"diferentes letras\")\"\"\"\n\n\"\"\" 2. Creamos una lista con las permutaciones con repetici\u00f3n iterando el objeto \ncreado por itertools y si el elemento NO est\u00e1 en la lista de permutaciones con repetici\u00f3n\nse a\u00f1ade. \"\"\"\n\nimport itertools  # Volvemos a importar la librer\u00eda por si hemos desconectado\n\n# Creamos nuevamente el objeto con las permutaciones\nconjunto_perm_con = itertools.permutations(conjunto)\n\n\"\"\" Creamos una lista para a\u00f1adir las permutaciones con repetici\u00f3n limpiado el objeto\nde elementos repetidos. \"\"\"\nlista_permutaciones_con = []\n\nfor i in conjunto_perm_con:\n    if i not in lista_permutaciones_con:\n        lista_permutaciones_con.append(i)\n\nprint(lista_permutaciones)\nprint()\nprint(f\"Hay un total de {len(lista_permutaciones_con)} permutaciones con repetici\u00f3n.\")\n</pre> \"\"\"Podemos observar que desde la primera hasta la sexta son la misma ordenaci\u00f3n, pero no las distingue (para Python son \"diferentes letras\")\"\"\"  \"\"\" 2. Creamos una lista con las permutaciones con repetici\u00f3n iterando el objeto  creado por itertools y si el elemento NO est\u00e1 en la lista de permutaciones con repetici\u00f3n se a\u00f1ade. \"\"\"  import itertools  # Volvemos a importar la librer\u00eda por si hemos desconectado  # Creamos nuevamente el objeto con las permutaciones conjunto_perm_con = itertools.permutations(conjunto)  \"\"\" Creamos una lista para a\u00f1adir las permutaciones con repetici\u00f3n limpiado el objeto de elementos repetidos. \"\"\" lista_permutaciones_con = []  for i in conjunto_perm_con:     if i not in lista_permutaciones_con:         lista_permutaciones_con.append(i)  print(lista_permutaciones) print() print(f\"Hay un total de {len(lista_permutaciones_con)} permutaciones con repetici\u00f3n.\") In\u00a0[\u00a0]: Copied! <pre># Definimos el conjunto que queremos combinar.\nconjunto = [\"Juan\", \"Pedro\", \"Luc\u00eda\", \"Mar\u00eda\"]\n\nimport itertools  # Por si se ha desconectado\n\n# Vamos a formar parejas\nparejas = itertools.combinations(conjunto, 2)\n\n# Para ver las parejas, un loop\ntotal = 0\nfor pareja in parejas:\n    total += 1\n    print(pareja)\n\nprint(f\"Hay un total de {total} parejas posibles.\")\n</pre> # Definimos el conjunto que queremos combinar. conjunto = [\"Juan\", \"Pedro\", \"Luc\u00eda\", \"Mar\u00eda\"]  import itertools  # Por si se ha desconectado  # Vamos a formar parejas parejas = itertools.combinations(conjunto, 2)  # Para ver las parejas, un loop total = 0 for pareja in parejas:     total += 1     print(pareja)  print(f\"Hay un total de {total} parejas posibles.\") In\u00a0[\u00a0]: Copied! <pre># Definimos el conjunto\ncadena = \"aeiou\"\n\n\"\"\" Hay un m\u00e9todo que calcula las combinaciones con repetici\u00f3n, pasando\ncomo argumentos el cojunto y de cuanto en cuanto queremos agrupar. \"\"\"\n\ncombinaciones_repet = itertools.combinations_with_replacement(\n    cadena, 2\n)  # Argumentos: cadena y\n\n# Para contarlas y visualizarlas\nnumero = 0\nfor combinacion in combinaciones_repet:\n    print(combinacion)\n    numero += 1\nprint()\nprint(f\"Se pueden formar {numero} combinaciones con repetici\u00f3n\")\n</pre> # Definimos el conjunto cadena = \"aeiou\"  \"\"\" Hay un m\u00e9todo que calcula las combinaciones con repetici\u00f3n, pasando como argumentos el cojunto y de cuanto en cuanto queremos agrupar. \"\"\"  combinaciones_repet = itertools.combinations_with_replacement(     cadena, 2 )  # Argumentos: cadena y  # Para contarlas y visualizarlas numero = 0 for combinacion in combinaciones_repet:     print(combinacion)     numero += 1 print() print(f\"Se pueden formar {numero} combinaciones con repetici\u00f3n\") <p>De un grupo de 10 personas, se quieren seleccionar 4 para ocupar los puestos de presidente, vicepresidente, tesorero y secretario en una organizaci\u00f3n estudiantil. \u00bfDe cu\u00e1ntas formas distintas se pueden asignar estos cargos? (Variaciones sin repetici\u00f3n de diez elementos tomados de cuatro en cuatro.)</p> In\u00a0[\u00a0]: Copied! <pre># Con la librer\u00eda math\nimport math\n\nmath.perm(10, 4)\n</pre> # Con la librer\u00eda math import math  math.perm(10, 4) In\u00a0[\u00a0]: Copied! <pre># Con la librer\u00eda itertools\nimport itertools\n\npersonas = list(range(10))\nvariaciones_sin = itertools.permutations(personas, 4)\nj = 0\nfor _ in variaciones_sin:\n    j += 1\nprint(f\"Se pueden formar {j} grupos distintos.\")\n</pre> # Con la librer\u00eda itertools import itertools  personas = list(range(10)) variaciones_sin = itertools.permutations(personas, 4) j = 0 for _ in variaciones_sin:     j += 1 print(f\"Se pueden formar {j} grupos distintos.\") <p>Una tienda vende 5 modelos diferentes de tel\u00e9fonos. Si un cliente quiere comprar 4 tel\u00e9fonos (puede elegir m\u00e1s de uno del mismo modelo), \u00bfde cu\u00e1ntas maneras puede realizar su compra? (Variaciones con repetici\u00f3n de cinco elementos tomados de cuatro en cuatro.)</p> In\u00a0[\u00a0]: Copied! <pre>import itertools\n\nmodelos = list(range(5))\ncompras = itertools.product(modelos, repeat=4)\nj = 0\nfor _ in compras:\n    j += 1\nprint(f\"Se pueden hacer {j} compras distintas.\")\n</pre> import itertools  modelos = list(range(5)) compras = itertools.product(modelos, repeat=4) j = 0 for _ in compras:     j += 1 print(f\"Se pueden hacer {j} compras distintas.\") <p>Un grupo de 5 amigos va a tomarse una foto en la que deben posar en una fila. \u00bfDe cu\u00e1ntas maneras diferentes pueden organizarse para la foto? (Permutaciones sin repetici\u00f3n de cinco elementos)</p> In\u00a0[\u00a0]: Copied! <pre># Con math\nimport math\n\nprint(f\"Pueden hacerse {math.perm(5)} fotograf\u00edas distintas.\")\n</pre> # Con math import math  print(f\"Pueden hacerse {math.perm(5)} fotograf\u00edas distintas.\") In\u00a0[\u00a0]: Copied! <pre># Con itertools\nimport math\n\namigos = list(range(5))\nposes = itertools.permutations(amigos)\nj = 0\nfor _ in poses:\n    j += 1\nprint(f\"Se pueden hacer {j} fotograf\u00edas distintas.\")\n</pre> # Con itertools import math  amigos = list(range(5)) poses = itertools.permutations(amigos) j = 0 for _ in poses:     j += 1 print(f\"Se pueden hacer {j} fotograf\u00edas distintas.\") <p>En una caja hay 3 bolas rojas y 2 bolas azules. Si todas las bolas son id\u00e9nticas seg\u00fan su color, \u00bfde cu\u00e1ntas maneras se pueden ordenar las 5 bolas en una fila? (Permutaciones con repetici\u00f3n de 5 elementos donde hay uno que se repite tres veces y otro dos.)</p> In\u00a0[\u00a0]: Copied! <pre>bolas = \"RRRAA\"\nbolas_todas_perm = itertools.permutations(bolas)\nlista_permutaciones_con = []\n\nfor i in bolas_todas_perm:\n    if i not in lista_permutaciones_con:\n        lista_permutaciones_con.append(i)\n\nprint(lista_permutaciones_con)\nprint()\nprint(f\"Hay un total de {len(lista_permutaciones_con)} permutaciones con repetici\u00f3n.\")\n</pre> bolas = \"RRRAA\" bolas_todas_perm = itertools.permutations(bolas) lista_permutaciones_con = []  for i in bolas_todas_perm:     if i not in lista_permutaciones_con:         lista_permutaciones_con.append(i)  print(lista_permutaciones_con) print() print(f\"Hay un total de {len(lista_permutaciones_con)} permutaciones con repetici\u00f3n.\") <p>Un club tiene 15 miembros y desea elegir a 5 para que asistan a una conferencia. \u00bfDe cu\u00e1ntas maneras se pueden seleccionar los 5 miembros? (Combinaciones sin repetici\u00f3n de quince elementos tomados de cinco en cinco)</p> In\u00a0[\u00a0]: Copied! <pre># Con la librer\u00eda math\nprint(f\"Se pueden seleccionar de {math.comb(15,5)} formas distintas.\")\n</pre> # Con la librer\u00eda math print(f\"Se pueden seleccionar de {math.comb(15,5)} formas distintas.\") In\u00a0[\u00a0]: Copied! <pre># Con la librer\u00eda itertools\n# Definimos el conjunto que queremos combinar.\nconjunto = list(range(15))\n\nimport itertools  # Por si se ha desconectado\n\n# Vamos a formar parejas\ngrupos = itertools.combinations(conjunto, 5)\n\ntotal = 0\nfor grupo in grupos:\n    total += 1\n\nprint(f\"Se pueden seleccionar de {total} formas distintas.\")\n</pre> # Con la librer\u00eda itertools # Definimos el conjunto que queremos combinar. conjunto = list(range(15))  import itertools  # Por si se ha desconectado  # Vamos a formar parejas grupos = itertools.combinations(conjunto, 5)  total = 0 for grupo in grupos:     total += 1  print(f\"Se pueden seleccionar de {total} formas distintas.\") <p>Un grupo de amigos quiere pedir 2 pizzas de 6 sabores disponibles. \u00bfCu\u00e1ntas combinaciones diferentes de pizzas pueden elegir si pueden pedir varias del mismo sabor? (Combinaciones con repetici\u00f3n de seis elementos tomados de dos en dos)</p> In\u00a0[\u00a0]: Copied! <pre>pizzas = [\"Margarita\", \"Cuatro Quesos\", \"Carbonara\", \"At\u00fan\", \"Carne\", \"Barbacoa\"]\ncombinaciones_repet = itertools.combinations_with_replacement(pizzas, 2)\nnumero = 0\nfor combinacion in combinaciones_repet:\n    print(combinacion)\n    numero += 1\nprint()\nprint(f\"Se pueden hacer {numero} pedidos distintos.\")\n</pre> pizzas = [\"Margarita\", \"Cuatro Quesos\", \"Carbonara\", \"At\u00fan\", \"Carne\", \"Barbacoa\"] combinaciones_repet = itertools.combinations_with_replacement(pizzas, 2) numero = 0 for combinacion in combinaciones_repet:     print(combinacion)     numero += 1 print() print(f\"Se pueden hacer {numero} pedidos distintos.\")"},{"location":"Contenido/02_Combinatoria.html#2_combinatoria-con-python","title":"2_COMBINATORIA CON PYTHON\u00b6","text":""},{"location":"Contenido/02_Combinatoria.html#libreria-math","title":"Librer\u00eda math\u00b6","text":""},{"location":"Contenido/02_Combinatoria.html#libreria-itertools","title":"LIBRER\u00cdA <code>itertools</code>\u00b6","text":""},{"location":"Contenido/02_Combinatoria.html#variaciones-sin-repeticion","title":"Variaciones sin repetici\u00f3n.\u00b6","text":"<p>$$ V_{n,k} = \\frac{n!}{(n-k)!} $$</p>"},{"location":"Contenido/02_Combinatoria.html#variaciones-con-repeticion","title":"Variaciones con repetici\u00f3n.\u00b6","text":"<p>$$ VR_{n,k} = n^k $$</p>"},{"location":"Contenido/02_Combinatoria.html#permutaciones-sin-repeticion","title":"Permutaciones sin repetici\u00f3n.\u00b6","text":"<p>$$ P_n = n! $$</p>"},{"location":"Contenido/02_Combinatoria.html#permutaciones-con-repeticion","title":"Permutaciones con repetici\u00f3n.\u00b6","text":"<p>$$ PR_{n} = \\dfrac{n!}{n_1! \\cdot n_2! \\cdot \\dots \\cdot n_r!} $$</p>"},{"location":"Contenido/02_Combinatoria.html#combinaciones-sin-repeticion","title":"Combinaciones sin repetici\u00f3n.\u00b6","text":"<p>$$ C_{n,k} = \\binom{n}{k} = \\dfrac{n!}{k!(n-k)!} $$</p>"},{"location":"Contenido/02_Combinatoria.html#combinaciones-con-repeticion","title":"Combinaciones con repetici\u00f3n.\u00b6","text":"<p>$$ CR_{n,k} = \\binom{n+k-1}{k} = \\dfrac{(n+k-1)!}{k!\\cdot (n-1)!} $$</p>"},{"location":"Contenido/02_Combinatoria.html#soluciones-de-los-ejercicios-de-la-introduccion","title":"SOLUCIONES DE LOS EJERCICIOS DE LA INTRODUCCI\u00d3N\u00b6","text":""},{"location":"Contenido/03_Estad%C3%ADstica%20Descriptiva.html","title":"3_ESTAD\u00cdSTICA DESCRIPTIVA","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"Con el siguiente c\u00f3digo clasificamos el n\u00famero de autom\u00f3viles en los hogares,\nmostrando las frecuencias y generando un diagrama de barras\n\"\"\"\n\n# Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# N\u00famero de autom\u00f3viles en 10 casas\nautos = np.array([1, 4, 1, 0, 2, 2, 3, 1, 0, 1])\n\n# Frecuencias abbsolutas\nfrecuencias, conteo = np.unique(autos, return_counts=True)\n\n# Mostrar los resultados\nfor valor, frecuencia in zip(frecuencias, conteo):\n    print(f\"N\u00famero de autos: {valor}, Frecuencia: {frecuencia}\")\n\nprint()\n\n# Gr\u00e1fica de barras\nplt.bar(frecuencias, conteo, color=\"red\", alpha=0.7)\nplt.xlabel(\"N\u00famero de autos\")\nplt.ylabel(\"Frecuencia\")\nplt.title(\"Distribuci\u00f3n del n\u00famero de autos por hogar\")\nplt.show()\n</pre> \"\"\"Con el siguiente c\u00f3digo clasificamos el n\u00famero de autom\u00f3viles en los hogares, mostrando las frecuencias y generando un diagrama de barras \"\"\"  # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt  # N\u00famero de autom\u00f3viles en 10 casas autos = np.array([1, 4, 1, 0, 2, 2, 3, 1, 0, 1])  # Frecuencias abbsolutas frecuencias, conteo = np.unique(autos, return_counts=True)  # Mostrar los resultados for valor, frecuencia in zip(frecuencias, conteo):     print(f\"N\u00famero de autos: {valor}, Frecuencia: {frecuencia}\")  print()  # Gr\u00e1fica de barras plt.bar(frecuencias, conteo, color=\"red\", alpha=0.7) plt.xlabel(\"N\u00famero de autos\") plt.ylabel(\"Frecuencia\") plt.title(\"Distribuci\u00f3n del n\u00famero de autos por hogar\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Crear un DataFrame con la variable n\u00famero de hermanos\ndata = {\"Hermanos\": [1, 2, 0, 3, 2, 1, 1, 2, 3, 0, 1, 1, 2, 0, 3]}\ndf = pd.DataFrame(data)\n\n# Calcular la distribuci\u00f3n de frecuencia\nfrecuencia = df[\"Hermanos\"].value_counts().sort_index()\n\n# Mostrar la tabla de frecuencias\nprint(frecuencia)\n\n# Gr\u00e1fico de barras con pandas\nfrecuencia.plot(kind=\"bar\", color=\"lightgreen\", edgecolor=\"black\")\nplt.xlabel(\"N\u00famero de hermanos\")\nplt.ylabel(\"Frecuencia absoluta\")\nplt.title(\"Distribuci\u00f3n de n\u00famero de hermanos\")\nplt.show()\n</pre> # Importamos las librer\u00edas import pandas as pd import matplotlib.pyplot as plt  # Crear un DataFrame con la variable n\u00famero de hermanos data = {\"Hermanos\": [1, 2, 0, 3, 2, 1, 1, 2, 3, 0, 1, 1, 2, 0, 3]} df = pd.DataFrame(data)  # Calcular la distribuci\u00f3n de frecuencia frecuencia = df[\"Hermanos\"].value_counts().sort_index()  # Mostrar la tabla de frecuencias print(frecuencia)  # Gr\u00e1fico de barras con pandas frecuencia.plot(kind=\"bar\", color=\"lightgreen\", edgecolor=\"black\") plt.xlabel(\"N\u00famero de hermanos\") plt.ylabel(\"Frecuencia absoluta\") plt.title(\"Distribuci\u00f3n de n\u00famero de hermanos\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Crear un DataFrame con los datos de ejemplo\ndata = {\"Hermanos\": [1, 2, 0, 3, 2, 1, 1, 2, 3, 0, 1, 1, 2, 0]}\ndf = pd.DataFrame(data)\n\n# Calcular la distribuci\u00f3n de frecuencias absolutas\nfrecuencia_absoluta = df[\"Hermanos\"].value_counts().sort_index()\n\n# Calcular la distribuci\u00f3n de frecuencias relativas\nfrecuencia_relativa = frecuencia_absoluta / frecuencia_absoluta.sum()\n\n# Mostrar la tabla de frecuencias relativas\nprint(\"Frecuencias Relativas:\")\nprint(frecuencia_relativa)\nprint()\n\n# Gr\u00e1fico de barras para frecuencias relativas\nfrecuencia_relativa.plot(kind=\"bar\", color=\"orange\", edgecolor=\"black\")\nplt.xlabel(\"N\u00famero de hermanos\")\nplt.ylabel(\"Frecuencia Relativa\")\nplt.title(\"Distribuci\u00f3n de frecuencia relativa del n\u00famero de hermanos\")\nplt.show()\n</pre> # Importamos las librer\u00edas import pandas as pd import matplotlib.pyplot as plt  # Crear un DataFrame con los datos de ejemplo data = {\"Hermanos\": [1, 2, 0, 3, 2, 1, 1, 2, 3, 0, 1, 1, 2, 0]} df = pd.DataFrame(data)  # Calcular la distribuci\u00f3n de frecuencias absolutas frecuencia_absoluta = df[\"Hermanos\"].value_counts().sort_index()  # Calcular la distribuci\u00f3n de frecuencias relativas frecuencia_relativa = frecuencia_absoluta / frecuencia_absoluta.sum()  # Mostrar la tabla de frecuencias relativas print(\"Frecuencias Relativas:\") print(frecuencia_relativa) print()  # Gr\u00e1fico de barras para frecuencias relativas frecuencia_relativa.plot(kind=\"bar\", color=\"orange\", edgecolor=\"black\") plt.xlabel(\"N\u00famero de hermanos\") plt.ylabel(\"Frecuencia Relativa\") plt.title(\"Distribuci\u00f3n de frecuencia relativa del n\u00famero de hermanos\") plt.show() In\u00a0[\u00a0]: Copied! <pre>\"\"\"En este ejemplo se simulan 100 pesos, se presenta la tabla de frecuencias\ny el histograma.\n\"\"\"\n\n# Importamos las librer\u00edas\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generar datos de peso\npesos = np.random.normal(loc=70, scale=10, size=100)\ndf = pd.DataFrame(pesos, columns=[\"Peso\"])\n\n# Crear una tabla de frecuencias agrupadas\nfrecuencia = pd.cut(df[\"Peso\"], bins=10).value_counts().sort_index()\n\n# Mostrar la tabla de frecuencias agrupadas\nprint(frecuencia)\nprint()\n\n# Histograma con pandas\ndf[\"Peso\"].plot(kind=\"hist\", bins=10, edgecolor=\"black\", color=\"lightblue\")\nplt.xlabel(\"Peso (kg)\")\nplt.ylabel(\"Frecuencia Absoluta\")\nplt.title(\"Distribuci\u00f3n de Frecuencia del Peso\")\nplt.show()\n</pre> \"\"\"En este ejemplo se simulan 100 pesos, se presenta la tabla de frecuencias y el histograma. \"\"\"  # Importamos las librer\u00edas import pandas as pd import numpy as np import matplotlib.pyplot as plt  # Generar datos de peso pesos = np.random.normal(loc=70, scale=10, size=100) df = pd.DataFrame(pesos, columns=[\"Peso\"])  # Crear una tabla de frecuencias agrupadas frecuencia = pd.cut(df[\"Peso\"], bins=10).value_counts().sort_index()  # Mostrar la tabla de frecuencias agrupadas print(frecuencia) print()  # Histograma con pandas df[\"Peso\"].plot(kind=\"hist\", bins=10, edgecolor=\"black\", color=\"lightblue\") plt.xlabel(\"Peso (kg)\") plt.ylabel(\"Frecuencia Absoluta\") plt.title(\"Distribuci\u00f3n de Frecuencia del Peso\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Sueldos en una empresa\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generar datos de ejemplo (sueldos en una empresa)\nsueldos = np.random.normal(loc=3000, scale=500, size=1000)\n\n# Crear el diagrama de caja\nplt.boxplot(sueldos)\nplt.ylabel(\"Sueldos\")\nplt.title(\"Boxplots de sueldos\")\nplt.show()\n</pre> # Sueldos en una empresa  import numpy as np import matplotlib.pyplot as plt  # Generar datos de ejemplo (sueldos en una empresa) sueldos = np.random.normal(loc=3000, scale=500, size=1000)  # Crear el diagrama de caja plt.boxplot(sueldos) plt.ylabel(\"Sueldos\") plt.title(\"Boxplots de sueldos\") plt.show() In\u00a0[\u00a0]: Copied! <pre>\"\"\"Colores de ojos de personas. Se muestra la tabla de frecuencias y la reepresentaci\u00f3n\nmediante un diagrama de sectores\n\"\"\"\n\n# Importamos las librer\u00edas\nimport matplotlib.pyplot as plt\n\n# Ejemplo: Colores de ojos de diferentes personas\ncolores_ojos = [\n    \"Azul\",\n    \"Azul\",\n    \"Verde\",\n    \"Marr\u00f3n\",\n    \"Azul\",\n    \"Verde\",\n    \"Marr\u00f3n\",\n    \"Marr\u00f3n\",\n    \"Verde\",\n    \"Azul\",\n]\n\n# Calcular frecuencias absolutas\nfrecuencias_ojos = {color: colores_ojos.count(color) for color in set(colores_ojos)}\n\n# Mostrar resultados\nprint(\"Frecuencia de colores de ojos:\", frecuencias_ojos)\nprint()\n\n# Gr\u00e1fico de sectores (pie chart)\nplt.pie(\n    frecuencias_ojos.values(),\n    labels=frecuencias_ojos.keys(),\n    autopct=\"%1.1f%%\",\n    colors=[\"brown\", \"blue\", \"green\"],\n)\nplt.title(\"Distribuci\u00f3n de Colores de Ojos\")\nplt.show()\n</pre> \"\"\"Colores de ojos de personas. Se muestra la tabla de frecuencias y la reepresentaci\u00f3n mediante un diagrama de sectores \"\"\"  # Importamos las librer\u00edas import matplotlib.pyplot as plt  # Ejemplo: Colores de ojos de diferentes personas colores_ojos = [     \"Azul\",     \"Azul\",     \"Verde\",     \"Marr\u00f3n\",     \"Azul\",     \"Verde\",     \"Marr\u00f3n\",     \"Marr\u00f3n\",     \"Verde\",     \"Azul\", ]  # Calcular frecuencias absolutas frecuencias_ojos = {color: colores_ojos.count(color) for color in set(colores_ojos)}  # Mostrar resultados print(\"Frecuencia de colores de ojos:\", frecuencias_ojos) print()  # Gr\u00e1fico de sectores (pie chart) plt.pie(     frecuencias_ojos.values(),     labels=frecuencias_ojos.keys(),     autopct=\"%1.1f%%\",     colors=[\"brown\", \"blue\", \"green\"], ) plt.title(\"Distribuci\u00f3n de Colores de Ojos\") plt.show() In\u00a0[\u00a0]: Copied! <pre>\"\"\"Niveles de satisfacci\u00f3n en una encuesta a clientes:\n1: Muy insatisfecho,..., 5: Muy satisfecho\n\"\"\"\n\n# Importamos librer\u00edas\nimport matplotlib.pyplot as plt\n\n# Datos de la encuesta\nsatisfaccion = [3, 2, 4, 4, 5, 3, 1, 1, 3, 5, 5, 3, 3, 4, 1, 2]\n\n# Frecuencias absolutas\nfrec_satisfaccion, conteo_satisfaccion = np.unique(satisfaccion, return_counts=True)\n\n# Mostar resultados\nfor nivel, frecuencia in zip(frec_satisfaccion, conteo_satisfaccion):\n    print(f\"Nivel de satisfaccion: {nivel}, Frecuencia: {frecuencia}\")\nprint()\n\n# Gr\u00e1fico de barras\nplt.bar(frec_satisfaccion, conteo_satisfaccion, color=\"lightblue\")\nplt.xlabel(\"Nivel de satisfacci\u00f3n\")\nplt.ylabel(\"Frecuencia\")\nplt.title(\"Distribuci\u00f3n del nivel de satisfacci\u00f3n\")\nplt.xticks(frec_satisfaccion)\nplt.show()\n</pre> \"\"\"Niveles de satisfacci\u00f3n en una encuesta a clientes: 1: Muy insatisfecho,..., 5: Muy satisfecho \"\"\"  # Importamos librer\u00edas import matplotlib.pyplot as plt  # Datos de la encuesta satisfaccion = [3, 2, 4, 4, 5, 3, 1, 1, 3, 5, 5, 3, 3, 4, 1, 2]  # Frecuencias absolutas frec_satisfaccion, conteo_satisfaccion = np.unique(satisfaccion, return_counts=True)  # Mostar resultados for nivel, frecuencia in zip(frec_satisfaccion, conteo_satisfaccion):     print(f\"Nivel de satisfaccion: {nivel}, Frecuencia: {frecuencia}\") print()  # Gr\u00e1fico de barras plt.bar(frec_satisfaccion, conteo_satisfaccion, color=\"lightblue\") plt.xlabel(\"Nivel de satisfacci\u00f3n\") plt.ylabel(\"Frecuencia\") plt.title(\"Distribuci\u00f3n del nivel de satisfacci\u00f3n\") plt.xticks(frec_satisfaccion) plt.show() In\u00a0[\u00a0]: Copied! <pre># Ejemplo: Notas de estudiantes en un examen\nimport pandas as pd\n\n# Crear un DataFrame con las notas\ndata = {\"Notas\": [85, 90, 78, 92, 88, 75, 95, 89, 84, 91]}\ndf = pd.DataFrame(data)\n\n# Calcular la media\nmedia = df[\"Notas\"].mean()\nprint(f\"Media: {media}\")\n\n# Calcular la mediana\nmediana = df[\"Notas\"].median()\nprint(f\"Mediana: {mediana}\")\n\n# Calcular la moda\nmoda = df[\"Notas\"].mode()[0]\nprint(f\"Moda: {moda}\")\n</pre> # Ejemplo: Notas de estudiantes en un examen import pandas as pd  # Crear un DataFrame con las notas data = {\"Notas\": [85, 90, 78, 92, 88, 75, 95, 89, 84, 91]} df = pd.DataFrame(data)  # Calcular la media media = df[\"Notas\"].mean() print(f\"Media: {media}\")  # Calcular la mediana mediana = df[\"Notas\"].median() print(f\"Mediana: {mediana}\")  # Calcular la moda moda = df[\"Notas\"].mode()[0] print(f\"Moda: {moda}\") In\u00a0[\u00a0]: Copied! <pre>import pandas as pd\n\n# Crear un DataFrame con los sueldos\ndata = {\"Sueldos\": [2500, 3000, 4000, 3500, 4500, 5000, 6000, 5500, 4700, 2900]}\ndf = pd.DataFrame(data)\n\n# Calcular el rango\nrango = df[\"Sueldos\"].max() - df[\"Sueldos\"].min()\nprint(f\"Rango: {rango}\")\n\n# Calcular la varianza\nvarianza = df[\"Sueldos\"].var()\nprint(f\"Varianza: {varianza:.2f}\")\n\n# Calcular la desviaci\u00f3n est\u00e1ndar\ndesviacion = df[\"Sueldos\"].std()\nprint(f\"Desviaci\u00f3n Est\u00e1ndar: {desviacion:.2f}\")\n</pre> import pandas as pd  # Crear un DataFrame con los sueldos data = {\"Sueldos\": [2500, 3000, 4000, 3500, 4500, 5000, 6000, 5500, 4700, 2900]} df = pd.DataFrame(data)  # Calcular el rango rango = df[\"Sueldos\"].max() - df[\"Sueldos\"].min() print(f\"Rango: {rango}\")  # Calcular la varianza varianza = df[\"Sueldos\"].var() print(f\"Varianza: {varianza:.2f}\")  # Calcular la desviaci\u00f3n est\u00e1ndar desviacion = df[\"Sueldos\"].std() print(f\"Desviaci\u00f3n Est\u00e1ndar: {desviacion:.2f}\") In\u00a0[\u00a0]: Copied! <pre># Ejemplo de alturas\n\nimport pandas as pd\n\n# Crear un DataFrame con las alturas\ndata = {\"Alturas\": [160, 170, 175, 180, 165, 155, 168, 172, 158, 162]}\ndf = pd.DataFrame(data)\n\n# Calcular los cuartiles y el rango intercuart\u00edlico\npercentil_25 = df[\"Alturas\"].quantile(0.25)\npercentil_50 = df[\"Alturas\"].median()  # O usar .quantile(0.5)\npercentil_75 = df[\"Alturas\"].quantile(0.75)\nric = percentil_75 - percentil_25\n\nprint(f\"Percentil 25: {percentil_25}\")\nprint(f\"Mediana (Percentil 50): {percentil_50}\")\nprint(f\"Percentil 75: {percentil_75}\")\nprint(f\"Rango Intercuart\u00edlico (RIC): {ric}\")\n</pre> # Ejemplo de alturas  import pandas as pd  # Crear un DataFrame con las alturas data = {\"Alturas\": [160, 170, 175, 180, 165, 155, 168, 172, 158, 162]} df = pd.DataFrame(data)  # Calcular los cuartiles y el rango intercuart\u00edlico percentil_25 = df[\"Alturas\"].quantile(0.25) percentil_50 = df[\"Alturas\"].median()  # O usar .quantile(0.5) percentil_75 = df[\"Alturas\"].quantile(0.75) ric = percentil_75 - percentil_25  print(f\"Percentil 25: {percentil_25}\") print(f\"Mediana (Percentil 50): {percentil_50}\") print(f\"Percentil 75: {percentil_75}\") print(f\"Rango Intercuart\u00edlico (RIC): {ric}\") In\u00a0[\u00a0]: Copied! <pre># Encuenta de satisfacci\u00f3n\n\nimport pandas as pd\n\n# Crear un DataFrame con las puntuaciones de satisfacci\u00f3n\ndata = {\"Satisfacci\u00f3n\": [3, 4, 5, 4, 3, 2, 5, 5, 4, 3, 5, 4]}\ndf = pd.DataFrame(data)\n\n# Calcular la asimetr\u00eda\nasimetria = df[\"Satisfacci\u00f3n\"].skew()\nprint(f\"Asimetr\u00eda: {asimetria}\")\n\n# Calcular la curtosis\ncurtosis_valor = df[\"Satisfacci\u00f3n\"].kurt()\nprint(f\"Curtosis: {curtosis_valor}\")\n</pre> # Encuenta de satisfacci\u00f3n  import pandas as pd  # Crear un DataFrame con las puntuaciones de satisfacci\u00f3n data = {\"Satisfacci\u00f3n\": [3, 4, 5, 4, 3, 2, 5, 5, 4, 3, 5, 4]} df = pd.DataFrame(data)  # Calcular la asimetr\u00eda asimetria = df[\"Satisfacci\u00f3n\"].skew() print(f\"Asimetr\u00eda: {asimetria}\")  # Calcular la curtosis curtosis_valor = df[\"Satisfacci\u00f3n\"].kurt() print(f\"Curtosis: {curtosis_valor}\") In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Simulaci\u00f3n de datos\nnp.random.seed(37)\npuntos_muestreo = np.linspace(0, 50, 30)\nconcentracion_oxigeno = np.random.normal(8, 0.5, 30)\nconcentracion_oxigeno[5] = 4.0  # Valor at\u00edpico (zona contaminada)\nconcentracion_oxigeno[18] = 3.5  # Otro valor at\u00edpico\n\n# Crear DataFrame\ndatos_rio = pd.DataFrame(\n    {\n        \"Punto de Muestreo (km)\": puntos_muestreo,\n        \"Ox\u00edgeno Disuelto (mg/L)\": concentracion_oxigeno,\n    }\n)\n\n# Medidas Descriptivas\nmedidas_descriptivas = datos_rio[\"Ox\u00edgeno Disuelto (mg/L)\"].describe()\nprint(\"Medidas Descriptivas:\\n\", medidas_descriptivas)\n\n# Distribuci\u00f3n de frecuencia (Histograma)\nplt.figure(figsize=(10, 6))\nsns.histplot(datos_rio[\"Ox\u00edgeno Disuelto (mg/L)\"], kde=True, color=\"skyblue\")\nplt.title(\"Distribuci\u00f3n de la Concentraci\u00f3n de Ox\u00edgeno en el R\u00edo\")\nplt.xlabel(\"Ox\u00edgeno Disuelto (mg/L)\")\nplt.ylabel(\"Frecuencia\")\nplt.show()\n\n# Detecci\u00f3n de valores at\u00edpicos (Diagrama de Caja)\nplt.figure(figsize=(10, 6))\nsns.boxplot(x=datos_rio[\"Ox\u00edgeno Disuelto (mg/L)\"], color=\"lightgreen\")\nplt.title(\"Diagrama de Caja de la Concentraci\u00f3n de Ox\u00edgeno\")\nplt.xlabel(\"Ox\u00edgeno Disuelto (mg/L)\")\nplt.show()\n\n# Gr\u00e1fico de dispersi\u00f3n de ox\u00edgeno vs. punto de muestreo\nplt.figure(figsize=(10, 6))\nsns.scatterplot(\n    x=datos_rio[\"Punto de Muestreo (km)\"],\n    y=datos_rio[\"Ox\u00edgeno Disuelto (mg/L)\"],\n    color=\"dodgerblue\",\n    s=100,\n)\nplt.title(\"Concentraci\u00f3n de Ox\u00edgeno en Diferentes Puntos del R\u00edo\")\nplt.xlabel(\"Punto de Muestreo (km)\")\nplt.ylabel(\"Ox\u00edgeno Disuelto (mg/L)\")\nplt.show()\n\n# Gr\u00e1fico de l\u00ednea para observar la tendencia\nplt.figure(figsize=(10, 6))\nsns.lineplot(\n    x=datos_rio[\"Punto de Muestreo (km)\"],\n    y=datos_rio[\"Ox\u00edgeno Disuelto (mg/L)\"],\n    marker=\"o\",\n    color=\"tomato\",\n)\nplt.title(\"Tendencia de la Concentraci\u00f3n de Ox\u00edgeno en el R\u00edo\")\nplt.xlabel(\"Punto de Muestreo (km)\")\nplt.ylabel(\"Ox\u00edgeno Disuelto (mg/L)\")\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt  # Simulaci\u00f3n de datos np.random.seed(37) puntos_muestreo = np.linspace(0, 50, 30) concentracion_oxigeno = np.random.normal(8, 0.5, 30) concentracion_oxigeno[5] = 4.0  # Valor at\u00edpico (zona contaminada) concentracion_oxigeno[18] = 3.5  # Otro valor at\u00edpico  # Crear DataFrame datos_rio = pd.DataFrame(     {         \"Punto de Muestreo (km)\": puntos_muestreo,         \"Ox\u00edgeno Disuelto (mg/L)\": concentracion_oxigeno,     } )  # Medidas Descriptivas medidas_descriptivas = datos_rio[\"Ox\u00edgeno Disuelto (mg/L)\"].describe() print(\"Medidas Descriptivas:\\n\", medidas_descriptivas)  # Distribuci\u00f3n de frecuencia (Histograma) plt.figure(figsize=(10, 6)) sns.histplot(datos_rio[\"Ox\u00edgeno Disuelto (mg/L)\"], kde=True, color=\"skyblue\") plt.title(\"Distribuci\u00f3n de la Concentraci\u00f3n de Ox\u00edgeno en el R\u00edo\") plt.xlabel(\"Ox\u00edgeno Disuelto (mg/L)\") plt.ylabel(\"Frecuencia\") plt.show()  # Detecci\u00f3n de valores at\u00edpicos (Diagrama de Caja) plt.figure(figsize=(10, 6)) sns.boxplot(x=datos_rio[\"Ox\u00edgeno Disuelto (mg/L)\"], color=\"lightgreen\") plt.title(\"Diagrama de Caja de la Concentraci\u00f3n de Ox\u00edgeno\") plt.xlabel(\"Ox\u00edgeno Disuelto (mg/L)\") plt.show()  # Gr\u00e1fico de dispersi\u00f3n de ox\u00edgeno vs. punto de muestreo plt.figure(figsize=(10, 6)) sns.scatterplot(     x=datos_rio[\"Punto de Muestreo (km)\"],     y=datos_rio[\"Ox\u00edgeno Disuelto (mg/L)\"],     color=\"dodgerblue\",     s=100, ) plt.title(\"Concentraci\u00f3n de Ox\u00edgeno en Diferentes Puntos del R\u00edo\") plt.xlabel(\"Punto de Muestreo (km)\") plt.ylabel(\"Ox\u00edgeno Disuelto (mg/L)\") plt.show()  # Gr\u00e1fico de l\u00ednea para observar la tendencia plt.figure(figsize=(10, 6)) sns.lineplot(     x=datos_rio[\"Punto de Muestreo (km)\"],     y=datos_rio[\"Ox\u00edgeno Disuelto (mg/L)\"],     marker=\"o\",     color=\"tomato\", ) plt.title(\"Tendencia de la Concentraci\u00f3n de Ox\u00edgeno en el R\u00edo\") plt.xlabel(\"Punto de Muestreo (km)\") plt.ylabel(\"Ox\u00edgeno Disuelto (mg/L)\") plt.show()"},{"location":"Contenido/03_Estad%C3%ADstica%20Descriptiva.html#3_estadistica-descriptiva","title":"3_ESTAD\u00cdSTICA DESCRIPTIVA\u00b6","text":""},{"location":"Contenido/03_Estad%C3%ADstica%20Descriptiva.html#cuantitativas-continuas","title":"Cuantitativas continuas\u00b6","text":""},{"location":"Contenido/03_Estad%C3%ADstica%20Descriptiva.html#cualitativas-nominales","title":"Cualitativas nominales\u00b6","text":""},{"location":"Contenido/03_Estad%C3%ADstica%20Descriptiva.html#cualitativas-ordinales","title":"Cualitativas ordinales\u00b6","text":""},{"location":"Contenido/03_Estad%C3%ADstica%20Descriptiva.html#medidas-de-tendencia-central","title":"Medidas de tendencia central\u00b6","text":""},{"location":"Contenido/03_Estad%C3%ADstica%20Descriptiva.html#medidas-de-dispersion","title":"Medidas de dispersi\u00f3n\u00b6","text":""},{"location":"Contenido/03_Estad%C3%ADstica%20Descriptiva.html#medidas-de-posicion","title":"Medidas de posici\u00f3n\u00b6","text":""},{"location":"Contenido/03_Estad%C3%ADstica%20Descriptiva.html#medidas-de-forma","title":"Medidas de forma\u00b6","text":""},{"location":"Contenido/03_Estad%C3%ADstica%20Descriptiva.html#ejemplo-stem","title":"Ejemplo STEM\u00b6","text":""},{"location":"Contenido/04_Diagramas_Venn_Python.html","title":"4_DIAGRAMAS DE VENN CON PYTHON","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\n# Par\u00e1metro t: 1000 puntos equiespaciados en el intervalo [0,2pi]\nt = np.linspace(0, 2 * np.pi, 1000)\n\n# Circunferencia conjunto A\nA_x = -2 + 3 * np.cos(t)\nA_y = 3 * np.sin(t)\n\n# Circunferencia conjunto B\nB_x = 2 + 3 * np.cos(t)\nB_y = 3 * np.sin(t)\n\n# Graficamos\nplt.figure(figsize=(4.8, 2.8))\nplt.plot(A_x, A_y, \"k-\", linewidth=3)\nplt.plot(B_x, B_y, \"k-\", linewidth=3)\n\n# Quitamos los ejes y dibujamos\nplt.gca().set_axis_off()\nplt.text(-4.5, 2.5, \"A\", size=12)\nplt.text(4.5, 2.5, \"B\", size=12)\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt import random  # Par\u00e1metro t: 1000 puntos equiespaciados en el intervalo [0,2pi] t = np.linspace(0, 2 * np.pi, 1000)  # Circunferencia conjunto A A_x = -2 + 3 * np.cos(t) A_y = 3 * np.sin(t)  # Circunferencia conjunto B B_x = 2 + 3 * np.cos(t) B_y = 3 * np.sin(t)  # Graficamos plt.figure(figsize=(4.8, 2.8)) plt.plot(A_x, A_y, \"k-\", linewidth=3) plt.plot(B_x, B_y, \"k-\", linewidth=3)  # Quitamos los ejes y dibujamos plt.gca().set_axis_off() plt.text(-4.5, 2.5, \"A\", size=12) plt.text(4.5, 2.5, \"B\", size=12) plt.show() In\u00a0[\u00a0]: Copied! <pre># Agrupamos este c\u00f3digo en una funci\u00f3n\ndef plot_set(points_x, points_y, text, sizefig=(4.8, 2.8)):\n    t = np.linspace(0, 2 * np.pi, 1000)\n\n    # Circunferencia conjunto A\n    A_x = -2 + 3 * np.cos(t)\n    A_y = 3 * np.sin(t)\n\n    # Circunferencia conjunto B\n    B_x = 2 + 3 * np.cos(t)\n    B_y = 3 * np.sin(t)\n\n    # Graficamos\n    plt.figure(figsize=sizefig)\n    plt.plot(A_x, A_y, \"k-\", linewidth=3)\n    plt.plot(B_x, B_y, \"k-\", linewidth=3)\n\n    # Quitamos los ejes y dibujamos\n    plt.gca().set_axis_off()\n    plt.text(-4.5, 2.5, \"A\", size=12)\n    plt.text(4.5, 2.5, \"B\", size=12)\n    plt.title(text, size=15)\n    plt.plot(points_x, points_y, \"o\", markersize=0.7)\n\n    return plt.show()\n</pre> # Agrupamos este c\u00f3digo en una funci\u00f3n def plot_set(points_x, points_y, text, sizefig=(4.8, 2.8)):     t = np.linspace(0, 2 * np.pi, 1000)      # Circunferencia conjunto A     A_x = -2 + 3 * np.cos(t)     A_y = 3 * np.sin(t)      # Circunferencia conjunto B     B_x = 2 + 3 * np.cos(t)     B_y = 3 * np.sin(t)      # Graficamos     plt.figure(figsize=sizefig)     plt.plot(A_x, A_y, \"k-\", linewidth=3)     plt.plot(B_x, B_y, \"k-\", linewidth=3)      # Quitamos los ejes y dibujamos     plt.gca().set_axis_off()     plt.text(-4.5, 2.5, \"A\", size=12)     plt.text(4.5, 2.5, \"B\", size=12)     plt.title(text, size=15)     plt.plot(points_x, points_y, \"o\", markersize=0.7)      return plt.show() In\u00a0[\u00a0]: Copied! <pre>\"\"\"Generamos los n\u00fameros aleatorios uniformes y aplicamos la transformaci\u00f3n lineal correspondiente\npara que est\u00e9n en el cuadrante [-5,5]x[-5,5]\"\"\"\n\nx = -5 + 10 * np.random.rand(1000000)\ny = -5 + 10 * np.random.rand(1000000)\n</pre> \"\"\"Generamos los n\u00fameros aleatorios uniformes y aplicamos la transformaci\u00f3n lineal correspondiente para que est\u00e9n en el cuadrante [-5,5]x[-5,5]\"\"\"  x = -5 + 10 * np.random.rand(1000000) y = -5 + 10 * np.random.rand(1000000) In\u00a0[\u00a0]: Copied! <pre># Conjunto A: definici\u00f3n y gr\u00e1fica\nAx = x[(x + 2) ** 2 + y**2 &lt;= 9]\nAy = y[(x + 2) ** 2 + y**2 &lt;= 9]\n\nplot_set(Ax, Ay, \"Set A\")\n</pre> # Conjunto A: definici\u00f3n y gr\u00e1fica Ax = x[(x + 2) ** 2 + y**2 &lt;= 9] Ay = y[(x + 2) ** 2 + y**2 &lt;= 9]  plot_set(Ax, Ay, \"Set A\") In\u00a0[\u00a0]: Copied! <pre># Conjunto B\nBx = x[(x - 2) ** 2 + y**2 &lt;= 9]\nBy = y[(x - 2) ** 2 + y**2 &lt;= 9]\n\nplot_set(Bx, By, \"Set B\")\n</pre> # Conjunto B Bx = x[(x - 2) ** 2 + y**2 &lt;= 9] By = y[(x - 2) ** 2 + y**2 &lt;= 9]  plot_set(Bx, By, \"Set B\") In\u00a0[\u00a0]: Copied! <pre># Uni\u00f3n de A y B\nA_or_B_x = x[((x + 2) ** 2 + y**2 &lt;= 9) | ((x - 2) ** 2 + y**2 &lt;= 9)]\nA_or_B_y = y[((x + 2) ** 2 + y**2 &lt;= 9) | ((x - 2) ** 2 + y**2 &lt;= 9)]\n\nplot_set(A_or_B_x, A_or_B_y, \"$A \\cup B$\")\n</pre> # Uni\u00f3n de A y B A_or_B_x = x[((x + 2) ** 2 + y**2 &lt;= 9) | ((x - 2) ** 2 + y**2 &lt;= 9)] A_or_B_y = y[((x + 2) ** 2 + y**2 &lt;= 9) | ((x - 2) ** 2 + y**2 &lt;= 9)]  plot_set(A_or_B_x, A_or_B_y, \"$A \\cup B$\") In\u00a0[\u00a0]: Copied! <pre># Intersecci\u00f3n de A y B\nA_and_B_x = x[((x + 2) ** 2 + y**2 &lt;= 9) &amp; ((x - 2) ** 2 + y**2 &lt;= 9)]\nA_and_B_y = y[((x + 2) ** 2 + y**2 &lt;= 9) &amp; ((x - 2) ** 2 + y**2 &lt;= 9)]\n\nplot_set(A_and_B_x, A_and_B_y, \"$A\\cap B$\")\n</pre> # Intersecci\u00f3n de A y B A_and_B_x = x[((x + 2) ** 2 + y**2 &lt;= 9) &amp; ((x - 2) ** 2 + y**2 &lt;= 9)] A_and_B_y = y[((x + 2) ** 2 + y**2 &lt;= 9) &amp; ((x - 2) ** 2 + y**2 &lt;= 9)]  plot_set(A_and_B_x, A_and_B_y, \"$A\\cap B$\") In\u00a0[\u00a0]: Copied! <pre># Diferencia A - B\nA_and_not_B_x = x[((x + 2) ** 2 + y**2 &lt;= 9) &amp; ((x - 2) ** 2 + y**2 &gt;= 9)]\nA_and_not_B_y = y[((x + 2) ** 2 + y**2 &lt;= 9) &amp; ((x - 2) ** 2 + y**2 &gt;= 9)]\n\nplot_set(A_and_not_B_x, A_and_not_B_y, \"$A\\cap \\overline{B}$\")\n</pre> # Diferencia A - B A_and_not_B_x = x[((x + 2) ** 2 + y**2 &lt;= 9) &amp; ((x - 2) ** 2 + y**2 &gt;= 9)] A_and_not_B_y = y[((x + 2) ** 2 + y**2 &lt;= 9) &amp; ((x - 2) ** 2 + y**2 &gt;= 9)]  plot_set(A_and_not_B_x, A_and_not_B_y, \"$A\\cap \\overline{B}$\") In\u00a0[\u00a0]: Copied! <pre># Diferencia B - A\nnot_A_and_B_x = x[((x + 2) ** 2 + y**2 &gt;= 9) &amp; ((x - 2) ** 2 + y**2 &lt;= 9)]\nnot_A_and_B_y = y[((x + 2) ** 2 + y**2 &gt;= 9) &amp; ((x - 2) ** 2 + y**2 &lt;= 9)]\n\nplot_set(not_A_and_B_x, not_A_and_B_y, \"$\\overline{A}\\cap B$\")\n</pre> # Diferencia B - A not_A_and_B_x = x[((x + 2) ** 2 + y**2 &gt;= 9) &amp; ((x - 2) ** 2 + y**2 &lt;= 9)] not_A_and_B_y = y[((x + 2) ** 2 + y**2 &gt;= 9) &amp; ((x - 2) ** 2 + y**2 &lt;= 9)]  plot_set(not_A_and_B_x, not_A_and_B_y, \"$\\overline{A}\\cap B$\") In\u00a0[\u00a0]: Copied! <pre># Lo que no es ni de A ni de B\nnot_A_and_not_B_x = x[((x + 2) ** 2 + y**2 &gt;= 9) &amp; ((x - 2) ** 2 + y**2 &gt;= 9)]\nnot_A_and_not_B_y = y[((x + 2) ** 2 + y**2 &gt;= 9) &amp; ((x - 2) ** 2 + y**2 &gt;= 9)]\n\nplot_set(\n    not_A_and_not_B_x, not_A_and_not_B_y, \"$\\overline{A}\\cap \\overline{B}$\", (5, 5)\n)\n</pre> # Lo que no es ni de A ni de B not_A_and_not_B_x = x[((x + 2) ** 2 + y**2 &gt;= 9) &amp; ((x - 2) ** 2 + y**2 &gt;= 9)] not_A_and_not_B_y = y[((x + 2) ** 2 + y**2 &gt;= 9) &amp; ((x - 2) ** 2 + y**2 &gt;= 9)]  plot_set(     not_A_and_not_B_x, not_A_and_not_B_y, \"$\\overline{A}\\cap \\overline{B}$\", (5, 5) )"},{"location":"Contenido/04_Diagramas_Venn_Python.html#4_diagramas-de-venn-con-python","title":"4_DIAGRAMAS DE VENN CON PYTHON\u00b6","text":"<p>$$A={(x,y)\\in \\mathbb{R}^2 / (x+2)^2+y^2 \\leq 9}$$ $$B={(x,y)\\in \\mathbb{R}^2 / (x-2)^2+y^2 \\leq 9}$$</p>"},{"location":"Contenido/05_Probabilidad%20como%20frecuencia.html","title":"5_PROBABILIDAD COMO FRECUENCIA","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport random\nimport matplotlib.pyplot as plt\n</pre> # Importamos las librer\u00edas import random import matplotlib.pyplot as plt In\u00a0[\u00a0]: Copied! <pre>\"\"\"Definimos una funci\u00f3n que simule n lanzamientos\nde la moneda y devuelva la frecuencia relativa de caras\"\"\"\n\n\ndef lanza_moneda(n):\n    caras = 0\n    for _ in range(n):\n        if random.random() &lt; 0.5:  # Simula un lanzamiento\n            caras += 1\n    return caras / n\n\n\n# Simulamos ahora 100 repeticiones de 1000 lanzamientos cada una\nn_simula = 100\nfrecuencias_caras = []\nn_lanzamientos = 1000\nfor _ in range(n_lanzamientos):\n    frecuencias_caras.append(lanza_moneda(n_simula))\n\n# Graficamos\nplt.hist(frecuencias_caras, bins=20)\nplt.xlabel(\"Frecuencia de caras\")\nplt.ylabel(\"N\u00famero de simulaciones\")\nplt.title(f\"Distribuci\u00f3n de la frecuencia de caras en {n_lanzamientos} lanzamientos\")\nplt.show()\n</pre> \"\"\"Definimos una funci\u00f3n que simule n lanzamientos de la moneda y devuelva la frecuencia relativa de caras\"\"\"   def lanza_moneda(n):     caras = 0     for _ in range(n):         if random.random() &lt; 0.5:  # Simula un lanzamiento             caras += 1     return caras / n   # Simulamos ahora 100 repeticiones de 1000 lanzamientos cada una n_simula = 100 frecuencias_caras = [] n_lanzamientos = 1000 for _ in range(n_lanzamientos):     frecuencias_caras.append(lanza_moneda(n_simula))  # Graficamos plt.hist(frecuencias_caras, bins=20) plt.xlabel(\"Frecuencia de caras\") plt.ylabel(\"N\u00famero de simulaciones\") plt.title(f\"Distribuci\u00f3n de la frecuencia de caras en {n_lanzamientos} lanzamientos\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport random\nimport matplotlib.pyplot as plt\n\n\"\"\"Funci\u00f3n que simula n lanzamientos de un dado y devuelve un diccionario\ncon las frecuencias relativas de cada cara\"\"\"\n\n\ndef tira_dado(n):\n    resultados = {}\n    for _ in range(n):\n        resultado = random.randint(1, 6)  # Genera una cara del dado\n        resultados[resultado] = (\n            resultados.get(resultado, 0) + 1\n        )  # A\u00f1ade a la value de la key resultado una unidad\n    for resultado in resultados.keys():\n        resultados[resultado] /= n  # Calcula la frecuencia relativa\n    return resultados  # Devuelve un diccionario donde las keys son las caras y los values las frecuencias\n\n\n# Simulamos 1000000 de lanzamientos\nn_tiradas = 1000000\nfrecuencias = tira_dado(n_tiradas)\nprint(\"El diccionario con las caras y las frecuencias:\")\nprint(frecuencias)\n</pre> # Importamos las librer\u00edas import random import matplotlib.pyplot as plt  \"\"\"Funci\u00f3n que simula n lanzamientos de un dado y devuelve un diccionario con las frecuencias relativas de cada cara\"\"\"   def tira_dado(n):     resultados = {}     for _ in range(n):         resultado = random.randint(1, 6)  # Genera una cara del dado         resultados[resultado] = (             resultados.get(resultado, 0) + 1         )  # A\u00f1ade a la value de la key resultado una unidad     for resultado in resultados.keys():         resultados[resultado] /= n  # Calcula la frecuencia relativa     return resultados  # Devuelve un diccionario donde las keys son las caras y los values las frecuencias   # Simulamos 1000000 de lanzamientos n_tiradas = 1000000 frecuencias = tira_dado(n_tiradas) print(\"El diccionario con las caras y las frecuencias:\") print(frecuencias) In\u00a0[\u00a0]: Copied! <pre># La gr\u00e1fica\nplt.bar(frecuencias.keys(), frecuencias.values())\nplt.xlabel(\"Cara del dado\")\nplt.ylabel(\"Frecuencia relativa\")\nplt.title(f\"Distribuci\u00f3n de resultados en {n_tiradas} de lanzamientos de un dado\")\nplt.show\n</pre> # La gr\u00e1fica plt.bar(frecuencias.keys(), frecuencias.values()) plt.xlabel(\"Cara del dado\") plt.ylabel(\"Frecuencia relativa\") plt.title(f\"Distribuci\u00f3n de resultados en {n_tiradas} de lanzamientos de un dado\") plt.show In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport random\nimport matplotlib.pyplot as plt\n\n\"\"\"En la siguiente funci\u00f3n, se simulan n extracciones con reemplazamiento y \ndevuelve las frecuencias relativas de cada color.\"\"\"\n\n\ndef extrae_bola(n, colores, pesos):\n    resultados = {\n        color: 0 for color in colores\n    }  # Inicializamos el diccionario con los colores como claves\n    for _ in range(n):\n        color_extraido = random.choices(colores, weights=pesos)[0]\n        resultados[color_extraido] += 1\n    for color in resultados.keys():\n        resultados[color] /= n\n    return resultados\n\n\n# Simulamos ahora 500 extracciones de la urna con devoluci\u00f3n\ncolores = [\"roja\", \"blanca\", \"negra\"]\npesos = [5, 3, 2]\nn_extracciones = 500\nfrecuencias = extrae_bola(n_extracciones, colores, pesos)\nprint(frecuencias)\n</pre> # Importamos las librer\u00edas import random import matplotlib.pyplot as plt  \"\"\"En la siguiente funci\u00f3n, se simulan n extracciones con reemplazamiento y  devuelve las frecuencias relativas de cada color.\"\"\"   def extrae_bola(n, colores, pesos):     resultados = {         color: 0 for color in colores     }  # Inicializamos el diccionario con los colores como claves     for _ in range(n):         color_extraido = random.choices(colores, weights=pesos)[0]         resultados[color_extraido] += 1     for color in resultados.keys():         resultados[color] /= n     return resultados   # Simulamos ahora 500 extracciones de la urna con devoluci\u00f3n colores = [\"roja\", \"blanca\", \"negra\"] pesos = [5, 3, 2] n_extracciones = 500 frecuencias = extrae_bola(n_extracciones, colores, pesos) print(frecuencias) In\u00a0[\u00a0]: Copied! <pre># Graficamos\nplt.bar(frecuencias.keys(), frecuencias.values())\nplt.xlabel(\"Color de la bola\")\nplt.ylabel(\"Frecuencia relativa\")\nplt.title(f\"Distribuci\u00f3n de colores en {n_extracciones} extracciones\")\nplt.show()\n</pre> # Graficamos plt.bar(frecuencias.keys(), frecuencias.values()) plt.xlabel(\"Color de la bola\") plt.ylabel(\"Frecuencia relativa\") plt.title(f\"Distribuci\u00f3n de colores en {n_extracciones} extracciones\") plt.show()"},{"location":"Contenido/05_Probabilidad%20como%20frecuencia.html#5_probabilidad-como-frecuencia","title":"5_PROBABILIDAD COMO FRECUENCIA\u00b6","text":""},{"location":"Contenido/05_Probabilidad%20como%20frecuencia.html#lanzamiento-de-una-moneda-equilibrada","title":"Lanzamiento de una moneda equilibrada\u00b6","text":""},{"location":"Contenido/05_Probabilidad%20como%20frecuencia.html#lanzamiento-de-un-dado-normal","title":"Lanzamiento de un dado normal\u00b6","text":""},{"location":"Contenido/05_Probabilidad%20como%20frecuencia.html#extraccion-de-bolas-de-una-urna","title":"Extracci\u00f3n de bolas de una urna\u00b6","text":""},{"location":"Contenido/06_Probabilidad%20Condicionada.html","title":"6_PROBABILIDAD CONDICIONADA E INDEPENDENCIA. TEOREMAS DE LA PROBABILIDAD TOTA Y DE BAYES","text":"In\u00a0[4]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport pandas as pd\n\n# Creamos una tabla de contingencia con los datos a partir de un diccionario\ndata = {\n    \"Tipo\": [\"A\", \"B\", \"C\"],\n    \"Producci\u00f3n\": [0.40, 0.35, 0.25],\n    \"Tasa_Defectos\": [0.02, 0.03, 0.01],\n}\ndf = pd.DataFrame(data)\ndf\n</pre> # Importamos las librer\u00edas import numpy as np import pandas as pd  # Creamos una tabla de contingencia con los datos a partir de un diccionario data = {     \"Tipo\": [\"A\", \"B\", \"C\"],     \"Producci\u00f3n\": [0.40, 0.35, 0.25],     \"Tasa_Defectos\": [0.02, 0.03, 0.01], } df = pd.DataFrame(data) df Out[4]: Tipo Producci\u00f3n Tasa_Defectos 0 A 0.40 0.02 1 B 0.35 0.03 2 C 0.25 0.01 In\u00a0[7]: Copied! <pre># A\u00f1adimos tres columnas m\u00e1s\ndf[\"Defectuosos\"] = df[\"Producci\u00f3n\"] * df[\"Tasa_Defectos\"]\ndf[\"Tasa_No_Defectos\"] = 1 - df[\"Tasa_Defectos\"]\ndf[\"No_Defectuosos\"] = df[\"Producci\u00f3n\"] * (1 - df[\"Tasa_Defectos\"])\n\nprint(\"Tabla de contingencia para el Contexto 1:\")\ndf\n</pre> # A\u00f1adimos tres columnas m\u00e1s df[\"Defectuosos\"] = df[\"Producci\u00f3n\"] * df[\"Tasa_Defectos\"] df[\"Tasa_No_Defectos\"] = 1 - df[\"Tasa_Defectos\"] df[\"No_Defectuosos\"] = df[\"Producci\u00f3n\"] * (1 - df[\"Tasa_Defectos\"])  print(\"Tabla de contingencia para el Contexto 1:\") df <pre>Tabla de contingencia para el Contexto 1:\n</pre> Out[7]: Tipo Producci\u00f3n Tasa_Defectos Defectuosos Tasa_No_Defectos No_Defectuosos 0 A 0.40 0.02 0.0080 0.98 0.3920 1 B 0.35 0.03 0.0105 0.97 0.3395 2 C 0.25 0.01 0.0025 0.99 0.2475 In\u00a0[11]: Copied! <pre>\"\"\"Pregunta 1: Probabilidad de que un componente sea defectuoso es la suma\nde la columna \"Defectuosos\" (Teorema de la Probabilidad Total)\"\"\"\n\nprob_defectuoso = df[\"Defectuosos\"].sum()\nprint(f\"La probabilidad de que un componente sea defectuoso es {prob_defectuoso:.4f}\")\n\n\"\"\" Probabilidad de que un componente defectuoso\nsea del tipo A (Teorema de Bayes) \"\"\"\n\n# Buscamos en el df la intersecci\u00f3n del tipo A con \"Defectuoso\"\nprob_A_dado_defectuoso = (\n    df.loc[df[\"Tipo\"] == \"A\", \"Defectuosos\"].values[0] / prob_defectuoso\n)\nprint(\n    f\"La probabilidad de que un componente defectuoso sea del tipo A es {prob_A_dado_defectuoso:.4f}\"\n)\n</pre> \"\"\"Pregunta 1: Probabilidad de que un componente sea defectuoso es la suma de la columna \"Defectuosos\" (Teorema de la Probabilidad Total)\"\"\"  prob_defectuoso = df[\"Defectuosos\"].sum() print(f\"La probabilidad de que un componente sea defectuoso es {prob_defectuoso:.4f}\")  \"\"\" Probabilidad de que un componente defectuoso sea del tipo A (Teorema de Bayes) \"\"\"  # Buscamos en el df la intersecci\u00f3n del tipo A con \"Defectuoso\" prob_A_dado_defectuoso = (     df.loc[df[\"Tipo\"] == \"A\", \"Defectuosos\"].values[0] / prob_defectuoso ) print(     f\"La probabilidad de que un componente defectuoso sea del tipo A es {prob_A_dado_defectuoso:.4f}\" ) <pre>La probabilidad de que un componente sea defectuoso es 0.0210\nLa probabilidad de que un componente defectuoso sea del tipo A es 0.3810\n</pre> In\u00a0[12]: Copied! <pre># Crear tabla de contingencia con los datos\ndata = {\n    \"Mantenimiento\": [\"Realizado\", \"No Realizado\"],\n    \"Probabilidad\": [1 / 7, 6 / 7],\n    \"Prob_Falla\": [0.02, 0.05],\n}\n\ndf = pd.DataFrame(data)\ndf\n</pre> # Crear tabla de contingencia con los datos data = {     \"Mantenimiento\": [\"Realizado\", \"No Realizado\"],     \"Probabilidad\": [1 / 7, 6 / 7],     \"Prob_Falla\": [0.02, 0.05], }  df = pd.DataFrame(data) df Out[12]: Mantenimiento Probabilidad Prob_Falla 0 Realizado 0.142857 0.02 1 No Realizado 0.857143 0.05 In\u00a0[13]: Copied! <pre># Ampliamos la tabla\ndf[\"Prob_No_Falla\"] = 1 - df[\"Prob_Falla\"]\ndf[\"Falla\"] = df[\"Probabilidad\"] * df[\"Prob_Falla\"]\ndf[\"No_Falla\"] = df[\"Probabilidad\"] * df[\"Prob_No_Falla\"]\n\nprint(\"Tabla de contingencia para el Problema 2\")\ndf\n</pre> # Ampliamos la tabla df[\"Prob_No_Falla\"] = 1 - df[\"Prob_Falla\"] df[\"Falla\"] = df[\"Probabilidad\"] * df[\"Prob_Falla\"] df[\"No_Falla\"] = df[\"Probabilidad\"] * df[\"Prob_No_Falla\"]  print(\"Tabla de contingencia para el Problema 2\") df <pre>Tabla de contingencia para el Problema 2\n</pre> Out[13]: Mantenimiento Probabilidad Prob_Falla Prob_No_Falla Falla No_Falla 0 Realizado 0.142857 0.02 0.98 0.002857 0.140000 1 No Realizado 0.857143 0.05 0.95 0.042857 0.814286 In\u00a0[18]: Copied! <pre># Probabilidad de que al menos una m\u00e1quina falle con mantnimiento\np_falla_con_mantenimiento = df.loc[\n    df[\"Mantenimiento\"] == \"Realizado\", \"Prob_Falla\"\n].values[0]\n\n# Que al menos una falle es lo contrario a que no fallen las tres\np_al_menos_una_falla = 1 - (1 - p_falla_con_mantenimiento) ** 3\nprint(\n    f\"La probabilidad de que al menos una m\u00e1quina falle con mantenimiento es {p_al_menos_una_falla:.4f}\"\n)\n\n# Probabilidad de que no se haya realizado mantenimiento dado que una m\u00e1quina fall\u00f3\np_falla = df[\"Falla\"].sum()\np_no_mantenimiento_dado_falla = (\n    df.loc[df[\"Mantenimiento\"] == \"No Realizado\", \"Falla\"].values[0] / p_falla\n)\nprint(\n    f\"La probabilidad de que no se haya realizado mantenimiento dado que una m\u00e1quina fall\u00f3 es {p_no_mantenimiento_dado_falla:.4f}\"\n)\n</pre> # Probabilidad de que al menos una m\u00e1quina falle con mantnimiento p_falla_con_mantenimiento = df.loc[     df[\"Mantenimiento\"] == \"Realizado\", \"Prob_Falla\" ].values[0]  # Que al menos una falle es lo contrario a que no fallen las tres p_al_menos_una_falla = 1 - (1 - p_falla_con_mantenimiento) ** 3 print(     f\"La probabilidad de que al menos una m\u00e1quina falle con mantenimiento es {p_al_menos_una_falla:.4f}\" )  # Probabilidad de que no se haya realizado mantenimiento dado que una m\u00e1quina fall\u00f3 p_falla = df[\"Falla\"].sum() p_no_mantenimiento_dado_falla = (     df.loc[df[\"Mantenimiento\"] == \"No Realizado\", \"Falla\"].values[0] / p_falla ) print(     f\"La probabilidad de que no se haya realizado mantenimiento dado que una m\u00e1quina fall\u00f3 es {p_no_mantenimiento_dado_falla:.4f}\" ) <pre>La probabilidad de que al menos una m\u00e1quina falle con mantenimiento es 0.0588\nLa probabilidad de que no se haya realizado mantenimiento dado que una m\u00e1quina fall\u00f3 es 0.9375\n</pre> In\u00a0[20]: Copied! <pre># Crear tabla de contingencia\ndata = {\n    \"Riesgo\": [\"Clim\u00e1tico\", \"Laboral\", \"Suministro\"],\n    \"Probabilidad\": [0.2, 0.15, 0.1],\n    \"Prob_Retraso\": [0.6, 0.5, 0.4],\n}\ndf = pd.DataFrame(data)\ndf\n</pre> # Crear tabla de contingencia data = {     \"Riesgo\": [\"Clim\u00e1tico\", \"Laboral\", \"Suministro\"],     \"Probabilidad\": [0.2, 0.15, 0.1],     \"Prob_Retraso\": [0.6, 0.5, 0.4], } df = pd.DataFrame(data) df Out[20]: Riesgo Probabilidad Prob_Retraso 0 Clim\u00e1tico 0.20 0.6 1 Laboral 0.15 0.5 2 Suministro 0.10 0.4 In\u00a0[21]: Copied! <pre># Ampliamos la tabla\ndf[\"Prob_No_Retraso\"] = 1 - df[\"Prob_Retraso\"]\ndf[\"Retraso\"] = df[\"Probabilidad\"] * df[\"Prob_Retraso\"]\ndf[\"No_Retraso\"] = df[\"Probabilidad\"] * df[\"Prob_No_Retraso\"]\n\nprint(\"Tabla de contingencia: \")\nprint()\ndf\n</pre> # Ampliamos la tabla df[\"Prob_No_Retraso\"] = 1 - df[\"Prob_Retraso\"] df[\"Retraso\"] = df[\"Probabilidad\"] * df[\"Prob_Retraso\"] df[\"No_Retraso\"] = df[\"Probabilidad\"] * df[\"Prob_No_Retraso\"]  print(\"Tabla de contingencia: \") print() df <pre>Tabla de contingencia: \n\n</pre> Out[21]: Riesgo Probabilidad Prob_Retraso Prob_No_Retraso Retraso No_Retraso 0 Clim\u00e1tico 0.20 0.6 0.4 0.120 0.080 1 Laboral 0.15 0.5 0.5 0.075 0.075 2 Suministro 0.10 0.4 0.6 0.040 0.060 In\u00a0[23]: Copied! <pre># Probabilidad de que el proyecto se retrase\np_retraso = df[\"Retraso\"].sum()\nprint(f\"La probabilidad de que el proyecto se retrase es {p_retraso:.4f}\")\n\n# Probabilidad de que el retraso se deba a un riesgo clim\u00e1tico\np_climatico_dado_retraso = (\n    df.loc[df[\"Riesgo\"] == \"Clim\u00e1tico\", \"Retraso\"].values[0] / p_retraso\n)\nprint(\n    f\"La probabilidad de que el retraso se deba a un riesgo clim\u00e1tico es {p_climatico_dado_retraso:.4f}\"\n)\n</pre> # Probabilidad de que el proyecto se retrase p_retraso = df[\"Retraso\"].sum() print(f\"La probabilidad de que el proyecto se retrase es {p_retraso:.4f}\")  # Probabilidad de que el retraso se deba a un riesgo clim\u00e1tico p_climatico_dado_retraso = (     df.loc[df[\"Riesgo\"] == \"Clim\u00e1tico\", \"Retraso\"].values[0] / p_retraso ) print(     f\"La probabilidad de que el retraso se deba a un riesgo clim\u00e1tico es {p_climatico_dado_retraso:.4f}\" ) <pre>La probabilidad de que el proyecto se retrase es 0.2350\nLa probabilidad de que el retraso se deba a un riesgo clim\u00e1tico es 0.5106\n</pre>"},{"location":"Contenido/06_Probabilidad%20Condicionada.html#6_probabilidad-condicionada-e-independencia-teoremas-de-la-probabilidad-tota-y-de-bayes","title":"6_PROBABILIDAD CONDICIONADA E INDEPENDENCIA. TEOREMAS DE LA PROBABILIDAD TOTA Y DE BAYES\u00b6","text":""},{"location":"Contenido/06_Probabilidad%20Condicionada.html#control-de-calidad-en-una-fabrica-de-componentes-electronicos","title":"Control de calidad en una f\u00e1brica de componentes electr\u00f3nicos\u00b6","text":""},{"location":"Contenido/06_Probabilidad%20Condicionada.html#mantenimiento-preventivo-en-una-planta-industrial","title":"Mantenimiento preventivo en una planta industrial\u00b6","text":""},{"location":"Contenido/06_Probabilidad%20Condicionada.html#analisis-de-riesgos-en-un-proyecto-de-construccion","title":"An\u00e1lisis de riesgos en un proyecto de construcci\u00f3n\u00b6","text":""},{"location":"Contenido/07_Variable%20aleatoria.html","title":"7_VARIABLE ALEATORIA","text":"In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Datos de correos por hora\nhoras = [f\"{i}:00\" for i in range(8, 18)]  # Horario laboral\ncorreos_hora = [5, 12, 8, 7, 9, 11, 6, 8, 10, 7]\n\n# Tama\u00f1o del gr\u00e1fico\nplt.figure(figsize=(15, 10))\n\n# Subplot 1: Gr\u00e1fico de barras\nplt.subplot(2, 2, 1)\nplt.bar(horas, correos_hora)\nplt.title(\"Correos por Hora\")\nplt.xlabel(\"Hora del d\u00eda\")\nplt.ylabel(\"N\u00famero de correos\")\nplt.xticks(rotation=45)\n\n# Subplot 2: Gr\u00e1fico de l\u00ednea con puntos\nplt.subplot(2, 2, 2)\nplt.plot(horas, correos_hora, \"bo-\")\nplt.title(\"Tendencia de Correos\")\nplt.xlabel(\"Hora del d\u00eda\")\nplt.ylabel(\"N\u00famero de correos\")\nplt.xticks(rotation=45)\nplt.grid(True)\n\n# Subplot 3: Gr\u00e1fico de calor horizontal\nplt.subplot(2, 2, 3)\nplt.imshow([correos_hora], cmap=\"YlOrRd\", aspect=\"auto\")\nplt.colorbar(label=\"N\u00famero de correos\")\nplt.yticks([])\nplt.xticks(range(len(horas)), horas, rotation=45)\nplt.title(\"Mapa de Calor de Actividad\")\n\n# Subplot 4: Gr\u00e1fico de barras con estad\u00edsticas\nplt.subplot(2, 2, 4)\nplt.bar(horas, correos_hora)\nplt.axhline(y=np.mean(correos_hora), color=\"r\", linestyle=\"--\", label=\"Media\")\nplt.axhline(y=np.median(correos_hora), color=\"g\", linestyle=\"--\", label=\"Mediana\")\nplt.title(\"Correos con Estad\u00edsticas\")\nplt.xlabel(\"Hora del d\u00eda\")\nplt.ylabel(\"N\u00famero de correos\")\nplt.xticks(rotation=45)\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n\n# An\u00e1lisis estad\u00edstico\nprint(\"=== An\u00e1lisis de Correos por Hora ===\")\nprint(f\"\\nTotal de correos: {sum(correos_hora)}\")\nprint(f\"Promedio de correos por hora: {np.mean(correos_hora):.1f}\")\nprint(f\"Mediana de correos por hora: {np.median(correos_hora)}\")\nprint(f\"Desviaci\u00f3n est\u00e1ndar: {np.std(correos_hora):.2f}\")\nprint(\n    f\"Hora m\u00e1s ocupada: {horas[np.argmax(correos_hora)]} ({max(correos_hora)} correos)\"\n)\nprint(\n    f\"Hora menos ocupada: {horas[np.argmin(correos_hora)]} ({min(correos_hora)} correos)\"\n)\n\n# An\u00e1lisis de carga de trabajo\nprint(\"\\n=== An\u00e1lisis de Carga de Trabajo ===\")\nhoras_ordenadas = [x for _, x in sorted(zip(correos_hora, horas), reverse=True)]\ncorreos_ordenados = sorted(correos_hora, reverse=True)\n\nprint(\"\\nHoras ordenadas por volumen de correos:\")\nfor hora, correos in zip(horas_ordenadas, correos_ordenados):\n    carga = (\n        \"Alta\"\n        if correos &gt;= np.percentile(correos_hora, 75)\n        else \"Media\" if correos &gt;= np.percentile(correos_hora, 25) else \"Baja\"\n    )\n    print(f\"Hora {hora}: {correos} correos - Carga {carga}\")\n\n# Distribuci\u00f3n por per\u00edodos\nmanana = correos_hora[:3]  # 8:00-10:00\nmedio_dia = correos_hora[3:6]  # 11:00-13:00\ntarde = correos_hora[6:]  # 14:00-17:00\n\nprint(\"\\n=== Distribuci\u00f3n por Per\u00edodos ===\")\nprint(\n    f\"Ma\u00f1ana (8:00-10:00): {sum(manana)} correos ({sum(manana)/sum(correos_hora)*100:.1f}%)\"\n)\nprint(\n    f\"Medio d\u00eda (11:00-13:00): {sum(medio_dia)} correos ({sum(medio_dia)/sum(correos_hora)*100:.1f}%)\"\n)\nprint(\n    f\"Tarde (14:00-17:00): {sum(tarde)} correos ({sum(tarde)/sum(correos_hora)*100:.1f}%)\"\n)\n\n# Recomendaciones basadas en los datos\nprint(\"\\n=== Recomendaciones ===\")\nmax_hora = horas[np.argmax(correos_hora)]\nprint(f\"1. Reforzar personal a las {max_hora} (hora pico)\")\nif np.mean(manana) &gt; np.mean(tarde):\n    print(\"2. Priorizar personal en horario matutino\")\nelse:\n    print(\"2. Priorizar personal en horario vespertino\")\nprint(\n    f\"3. Considerar automatizaci\u00f3n para horas de baja carga ({horas[np.argmin(correos_hora)]})\"\n)\n</pre> import numpy as np import matplotlib.pyplot as plt  # Datos de correos por hora horas = [f\"{i}:00\" for i in range(8, 18)]  # Horario laboral correos_hora = [5, 12, 8, 7, 9, 11, 6, 8, 10, 7]  # Tama\u00f1o del gr\u00e1fico plt.figure(figsize=(15, 10))  # Subplot 1: Gr\u00e1fico de barras plt.subplot(2, 2, 1) plt.bar(horas, correos_hora) plt.title(\"Correos por Hora\") plt.xlabel(\"Hora del d\u00eda\") plt.ylabel(\"N\u00famero de correos\") plt.xticks(rotation=45)  # Subplot 2: Gr\u00e1fico de l\u00ednea con puntos plt.subplot(2, 2, 2) plt.plot(horas, correos_hora, \"bo-\") plt.title(\"Tendencia de Correos\") plt.xlabel(\"Hora del d\u00eda\") plt.ylabel(\"N\u00famero de correos\") plt.xticks(rotation=45) plt.grid(True)  # Subplot 3: Gr\u00e1fico de calor horizontal plt.subplot(2, 2, 3) plt.imshow([correos_hora], cmap=\"YlOrRd\", aspect=\"auto\") plt.colorbar(label=\"N\u00famero de correos\") plt.yticks([]) plt.xticks(range(len(horas)), horas, rotation=45) plt.title(\"Mapa de Calor de Actividad\")  # Subplot 4: Gr\u00e1fico de barras con estad\u00edsticas plt.subplot(2, 2, 4) plt.bar(horas, correos_hora) plt.axhline(y=np.mean(correos_hora), color=\"r\", linestyle=\"--\", label=\"Media\") plt.axhline(y=np.median(correos_hora), color=\"g\", linestyle=\"--\", label=\"Mediana\") plt.title(\"Correos con Estad\u00edsticas\") plt.xlabel(\"Hora del d\u00eda\") plt.ylabel(\"N\u00famero de correos\") plt.xticks(rotation=45) plt.legend()  plt.tight_layout() plt.show()  # An\u00e1lisis estad\u00edstico print(\"=== An\u00e1lisis de Correos por Hora ===\") print(f\"\\nTotal de correos: {sum(correos_hora)}\") print(f\"Promedio de correos por hora: {np.mean(correos_hora):.1f}\") print(f\"Mediana de correos por hora: {np.median(correos_hora)}\") print(f\"Desviaci\u00f3n est\u00e1ndar: {np.std(correos_hora):.2f}\") print(     f\"Hora m\u00e1s ocupada: {horas[np.argmax(correos_hora)]} ({max(correos_hora)} correos)\" ) print(     f\"Hora menos ocupada: {horas[np.argmin(correos_hora)]} ({min(correos_hora)} correos)\" )  # An\u00e1lisis de carga de trabajo print(\"\\n=== An\u00e1lisis de Carga de Trabajo ===\") horas_ordenadas = [x for _, x in sorted(zip(correos_hora, horas), reverse=True)] correos_ordenados = sorted(correos_hora, reverse=True)  print(\"\\nHoras ordenadas por volumen de correos:\") for hora, correos in zip(horas_ordenadas, correos_ordenados):     carga = (         \"Alta\"         if correos &gt;= np.percentile(correos_hora, 75)         else \"Media\" if correos &gt;= np.percentile(correos_hora, 25) else \"Baja\"     )     print(f\"Hora {hora}: {correos} correos - Carga {carga}\")  # Distribuci\u00f3n por per\u00edodos manana = correos_hora[:3]  # 8:00-10:00 medio_dia = correos_hora[3:6]  # 11:00-13:00 tarde = correos_hora[6:]  # 14:00-17:00  print(\"\\n=== Distribuci\u00f3n por Per\u00edodos ===\") print(     f\"Ma\u00f1ana (8:00-10:00): {sum(manana)} correos ({sum(manana)/sum(correos_hora)*100:.1f}%)\" ) print(     f\"Medio d\u00eda (11:00-13:00): {sum(medio_dia)} correos ({sum(medio_dia)/sum(correos_hora)*100:.1f}%)\" ) print(     f\"Tarde (14:00-17:00): {sum(tarde)} correos ({sum(tarde)/sum(correos_hora)*100:.1f}%)\" )  # Recomendaciones basadas en los datos print(\"\\n=== Recomendaciones ===\") max_hora = horas[np.argmax(correos_hora)] print(f\"1. Reforzar personal a las {max_hora} (hora pico)\") if np.mean(manana) &gt; np.mean(tarde):     print(\"2. Priorizar personal en horario matutino\") else:     print(\"2. Priorizar personal en horario vespertino\") print(     f\"3. Considerar automatizaci\u00f3n para horas de baja carga ({horas[np.argmin(correos_hora)]})\" ) In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# N\u00famero de bugs encontrados por revisi\u00f3n de c\u00f3digo\nbugs_revision = [0, 2, 1, 3, 0, 1, 2, 1, 0, 1, 2, 3, 1, 0, 2]\nvalores, frecuencias = np.unique(bugs_revision, return_counts=True)\nfrecuencias_relativas = frecuencias / len(bugs_revision)\n\n# Crear la gr\u00e1fica\nplt.figure(figsize=(8, 5))\n\n# Gr\u00e1fico de barras\nplt.bar(\n    valores, frecuencias_relativas, color=\"skyblue\", edgecolor=\"darkblue\", width=0.5\n)\n\n# A\u00f1adir etiquetas a las barras\nfor i, (valor, freq) in enumerate(zip(valores, frecuencias_relativas)):\n    plt.text(valor, freq + 0.01, f\"{freq:.3f}\", ha=\"center\")\n\n# Etiquetas y t\u00edtulo\nplt.xlabel(\"N\u00famero de bugs\")\nplt.ylabel(\"Frecuencia relativa\")\nplt.title(\"Distribuci\u00f3n de bugs encontrados por revisi\u00f3n de c\u00f3digo\")\nplt.xticks(valores)\nplt.ylim(0, max(frecuencias_relativas) + 0.1)  # Espacio para las etiquetas\n\n# A\u00f1adir grid para mejor visualizaci\u00f3n\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n\nplt.show()\nprint()\n# Representaci\u00f3n alternativa: gr\u00e1fico de pastel\nplt.figure(figsize=(6, 6))\netiquetas = [f\"{v} bugs\" for v in valores]\nplt.pie(\n    frecuencias,\n    labels=etiquetas,\n    autopct=\"%1.1f%%\",\n    colors=[\"lightgreen\", \"skyblue\", \"lightcoral\", \"gold\"],\n    shadow=True,\n    startangle=90,\n)\nplt.axis(\"equal\")\nplt.title(\"Porcentaje de revisiones por cantidad de bugs encontrados\")\n\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt  # N\u00famero de bugs encontrados por revisi\u00f3n de c\u00f3digo bugs_revision = [0, 2, 1, 3, 0, 1, 2, 1, 0, 1, 2, 3, 1, 0, 2] valores, frecuencias = np.unique(bugs_revision, return_counts=True) frecuencias_relativas = frecuencias / len(bugs_revision)  # Crear la gr\u00e1fica plt.figure(figsize=(8, 5))  # Gr\u00e1fico de barras plt.bar(     valores, frecuencias_relativas, color=\"skyblue\", edgecolor=\"darkblue\", width=0.5 )  # A\u00f1adir etiquetas a las barras for i, (valor, freq) in enumerate(zip(valores, frecuencias_relativas)):     plt.text(valor, freq + 0.01, f\"{freq:.3f}\", ha=\"center\")  # Etiquetas y t\u00edtulo plt.xlabel(\"N\u00famero de bugs\") plt.ylabel(\"Frecuencia relativa\") plt.title(\"Distribuci\u00f3n de bugs encontrados por revisi\u00f3n de c\u00f3digo\") plt.xticks(valores) plt.ylim(0, max(frecuencias_relativas) + 0.1)  # Espacio para las etiquetas  # A\u00f1adir grid para mejor visualizaci\u00f3n plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)  plt.show() print() # Representaci\u00f3n alternativa: gr\u00e1fico de pastel plt.figure(figsize=(6, 6)) etiquetas = [f\"{v} bugs\" for v in valores] plt.pie(     frecuencias,     labels=etiquetas,     autopct=\"%1.1f%%\",     colors=[\"lightgreen\", \"skyblue\", \"lightcoral\", \"gold\"],     shadow=True,     startangle=90, ) plt.axis(\"equal\") plt.title(\"Porcentaje de revisiones por cantidad de bugs encontrados\")  plt.show() In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n# Datos de consumo de energ\u00eda\nconsumo_energia = [\n    5.2,\n    4.8,\n    5.1,\n    5.3,\n    4.9,\n    5.0,\n    5.2,\n    4.7,\n    5.1,\n    5.5,\n    4.8,\n    5.2,\n    5.0,\n    4.9,\n    5.1,\n    5.3,\n    4.8,\n    5.0,\n    5.2,\n    4.9,\n]\n\n# Estad\u00edsticas b\u00e1sicas\nmedia = np.mean(consumo_energia)\nminimo = min(consumo_energia)\nmaximo = max(consumo_energia)\ndesviacion = np.std(consumo_energia)\n\n# Crear figura con subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))\n\n# Histograma con curva de densidad\nax1.hist(\n    consumo_energia, bins=6, density=True, alpha=0.7, color=\"skyblue\", edgecolor=\"black\"\n)\n\n# A\u00f1adir curva de densidad (estimaci\u00f3n KDE)\nx = np.linspace(minimo - 0.2, maximo + 0.2, 100)\nkde = stats.gaussian_kde(consumo_energia)\nax1.plot(x, kde(x), \"r-\", linewidth=2)\n\n# A\u00f1adir l\u00ednea vertical para la media\nax1.axvline(\n    x=media, color=\"green\", linestyle=\"--\", linewidth=2, label=f\"Media: {media:.2f} kWh\"\n)\n\n# Configuraci\u00f3n del primer gr\u00e1fico\nax1.set_title(\"Distribuci\u00f3n del consumo de energ\u00eda\")\nax1.set_xlabel(\"Consumo (kWh)\")\nax1.set_ylabel(\"Densidad\")\nax1.grid(alpha=0.3)\nax1.legend()\n\n# Gr\u00e1fico de viol\u00edn con boxplot\nax2.violinplot(consumo_energia, showmeans=True, showmedians=True)\nax2.boxplot(\n    consumo_energia,\n    positions=[1],\n    widths=0.3,\n    patch_artist=True,\n    boxprops=dict(facecolor=\"lightgreen\", alpha=0.5),\n)\n\n# Etiquetas para estad\u00edsticas\nstats_text = (\n    f\"Media: {media:.2f} kWh\\n\"\n    f\"M\u00ednimo: {minimo:.2f} kWh\\n\"\n    f\"M\u00e1ximo: {maximo:.2f} kWh\\n\"\n    f\"Desv. est\u00e1ndar: {desviacion:.3f}\"\n)\nax2.text(1.3, media, stats_text, bbox=dict(facecolor=\"white\", alpha=0.8))\n\n# Configuraci\u00f3n del segundo gr\u00e1fico\nax2.set_title(\"An\u00e1lisis estad\u00edstico del consumo\")\nax2.set_ylabel(\"Consumo (kWh)\")\nax2.set_xticks([1])\nax2.set_xticklabels([\"Consumo\"])\nax2.set_ylim(minimo - 0.2, maximo + 0.2)\nax2.grid(axis=\"y\", alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n\n# Serie temporal (suponiendo mediciones secuenciales)\nplt.figure(figsize=(12, 5))\nplt.plot(\n    range(1, len(consumo_energia) + 1),\n    consumo_energia,\n    marker=\"o\",\n    linestyle=\"-\",\n    color=\"blue\",\n    markersize=6,\n)\nplt.axhline(y=media, color=\"r\", linestyle=\"--\", label=f\"Media: {media:.2f} kWh\")\nplt.fill_between(\n    range(1, len(consumo_energia) + 1),\n    minimo,\n    maximo,\n    alpha=0.1,\n    color=\"gray\",\n    label=f\"Rango: {minimo:.1f}-{maximo:.1f} kWh\",\n)\n\nplt.title(\"Consumo de energ\u00eda a lo largo del tiempo\")\nplt.xlabel(\"Medici\u00f3n\")\nplt.ylabel(\"Consumo (kWh)\")\nplt.grid(True, alpha=0.3)\nplt.legend()\nplt.tight_layout()\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy import stats  # Datos de consumo de energ\u00eda consumo_energia = [     5.2,     4.8,     5.1,     5.3,     4.9,     5.0,     5.2,     4.7,     5.1,     5.5,     4.8,     5.2,     5.0,     4.9,     5.1,     5.3,     4.8,     5.0,     5.2,     4.9, ]  # Estad\u00edsticas b\u00e1sicas media = np.mean(consumo_energia) minimo = min(consumo_energia) maximo = max(consumo_energia) desviacion = np.std(consumo_energia)  # Crear figura con subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))  # Histograma con curva de densidad ax1.hist(     consumo_energia, bins=6, density=True, alpha=0.7, color=\"skyblue\", edgecolor=\"black\" )  # A\u00f1adir curva de densidad (estimaci\u00f3n KDE) x = np.linspace(minimo - 0.2, maximo + 0.2, 100) kde = stats.gaussian_kde(consumo_energia) ax1.plot(x, kde(x), \"r-\", linewidth=2)  # A\u00f1adir l\u00ednea vertical para la media ax1.axvline(     x=media, color=\"green\", linestyle=\"--\", linewidth=2, label=f\"Media: {media:.2f} kWh\" )  # Configuraci\u00f3n del primer gr\u00e1fico ax1.set_title(\"Distribuci\u00f3n del consumo de energ\u00eda\") ax1.set_xlabel(\"Consumo (kWh)\") ax1.set_ylabel(\"Densidad\") ax1.grid(alpha=0.3) ax1.legend()  # Gr\u00e1fico de viol\u00edn con boxplot ax2.violinplot(consumo_energia, showmeans=True, showmedians=True) ax2.boxplot(     consumo_energia,     positions=[1],     widths=0.3,     patch_artist=True,     boxprops=dict(facecolor=\"lightgreen\", alpha=0.5), )  # Etiquetas para estad\u00edsticas stats_text = (     f\"Media: {media:.2f} kWh\\n\"     f\"M\u00ednimo: {minimo:.2f} kWh\\n\"     f\"M\u00e1ximo: {maximo:.2f} kWh\\n\"     f\"Desv. est\u00e1ndar: {desviacion:.3f}\" ) ax2.text(1.3, media, stats_text, bbox=dict(facecolor=\"white\", alpha=0.8))  # Configuraci\u00f3n del segundo gr\u00e1fico ax2.set_title(\"An\u00e1lisis estad\u00edstico del consumo\") ax2.set_ylabel(\"Consumo (kWh)\") ax2.set_xticks([1]) ax2.set_xticklabels([\"Consumo\"]) ax2.set_ylim(minimo - 0.2, maximo + 0.2) ax2.grid(axis=\"y\", alpha=0.3)  plt.tight_layout() plt.show()  # Serie temporal (suponiendo mediciones secuenciales) plt.figure(figsize=(12, 5)) plt.plot(     range(1, len(consumo_energia) + 1),     consumo_energia,     marker=\"o\",     linestyle=\"-\",     color=\"blue\",     markersize=6, ) plt.axhline(y=media, color=\"r\", linestyle=\"--\", label=f\"Media: {media:.2f} kWh\") plt.fill_between(     range(1, len(consumo_energia) + 1),     minimo,     maximo,     alpha=0.1,     color=\"gray\",     label=f\"Rango: {minimo:.1f}-{maximo:.1f} kWh\", )  plt.title(\"Consumo de energ\u00eda a lo largo del tiempo\") plt.xlabel(\"Medici\u00f3n\") plt.ylabel(\"Consumo (kWh)\") plt.grid(True, alpha=0.3) plt.legend() plt.tight_layout() plt.show() In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Peso de paquetes en l\u00ednea de producci\u00f3n (kg)\nprint(\"Peso de paquetes:\")\npeso_paquetes = [\n    10.2,\n    9.8,\n    10.1,\n    10.3,\n    10,\n    10.0,\n    10.2,\n    9.7,\n    10.1,\n    10.4,\n    9.8,\n    10.2,\n    10.0,\n    9.9,\n    10.1,\n    10.6,\n    9.8,\n    10.0,\n    10.2,\n    9.9,\n]\nprint(f\"Peso medio: {np.mean(peso_paquetes):.2f}kg\")\nprint(f\"Peso m\u00ednimo: {min(peso_paquetes):.2f}kg\")\nprint(f\"Peso m\u00e1ximo: {max(peso_paquetes):.2f}kg\")\n\n# Configuraci\u00f3n del estilo de la gr\u00e1fica\nplt.figure(figsize=(12, 8))\nsns.set_style(\"whitegrid\")\n\n# Crear subplots para diferentes visualizaciones\nfig, axs = plt.subplots(2, 2, figsize=(14, 10))\nfig.suptitle(\"An\u00e1lisis del Peso de Paquetes en L\u00ednea de Producci\u00f3n\", fontsize=16)\n\n# 1. Histograma con curva de densidad\nsns.histplot(peso_paquetes, kde=True, color=\"skyblue\", ax=axs[0, 0])\naxs[0, 0].axvline(\n    np.mean(peso_paquetes),\n    color=\"red\",\n    linestyle=\"--\",\n    linewidth=2,\n    label=f\"Media: {np.mean(peso_paquetes):.2f}kg\",\n)\naxs[0, 0].axvline(\n    np.median(peso_paquetes),\n    color=\"green\",\n    linestyle=\"-.\",\n    linewidth=2,\n    label=f\"Mediana: {np.median(peso_paquetes):.2f}kg\",\n)\naxs[0, 0].set_title(\"Distribuci\u00f3n del Peso de Paquetes\")\naxs[0, 0].set_xlabel(\"Peso (kg)\")\naxs[0, 0].set_ylabel(\"Frecuencia\")\naxs[0, 0].legend()\n\n# 2. Gr\u00e1fico de caja (boxplot)\nsns.boxplot(y=peso_paquetes, ax=axs[0, 1], color=\"lightgreen\")\naxs[0, 1].set_title(\"Boxplot del Peso de Paquetes\")\naxs[0, 1].set_ylabel(\"Peso (kg)\")\n\n# 3. Gr\u00e1fico de l\u00ednea para ver la secuencia\naxs[1, 0].plot(\n    range(1, len(peso_paquetes) + 1),\n    peso_paquetes,\n    marker=\"o\",\n    linestyle=\"-\",\n    color=\"purple\",\n)\naxs[1, 0].axhline(y=10.0, color=\"blue\", linestyle=\"--\", label=\"Peso objetivo (10.0 kg)\")\naxs[1, 0].axhline(\n    y=np.mean(peso_paquetes),\n    color=\"red\",\n    linestyle=\"-.\",\n    label=f\"Media: {np.mean(peso_paquetes):.2f}kg\",\n)\naxs[1, 0].set_title(\"Secuencia de Pesos por Paquete\")\naxs[1, 0].set_xlabel(\"N\u00famero de Paquete\")\naxs[1, 0].set_ylabel(\"Peso (kg)\")\naxs[1, 0].set_xticks(range(1, len(peso_paquetes) + 1))\naxs[1, 0].grid(True)\naxs[1, 0].legend()\n\n# 4. Gr\u00e1fico de barras de desviaci\u00f3n respecto al peso objetivo (en lugar del violin plot)\ndesviaciones = [p - 10.0 for p in peso_paquetes]\nbars = axs[1, 1].bar(\n    range(1, len(peso_paquetes) + 1),\n    desviaciones,\n    color=[\"red\" if d &lt; 0 else \"green\" for d in desviaciones],\n)\naxs[1, 1].axhline(y=0, color=\"black\", linestyle=\"-\", linewidth=1)\naxs[1, 1].set_title(\"Desviaci\u00f3n respecto al Peso Objetivo (10 kg)\")\naxs[1, 1].set_xlabel(\"N\u00famero de Paquete\")\naxs[1, 1].set_ylabel(\"Desviaci\u00f3n (kg)\")\naxs[1, 1].set_xticks(range(1, len(peso_paquetes) + 1))\naxs[1, 1].grid(True, axis=\"y\")\n\n# A\u00f1adir valores encima de las barras\nfor i, v in enumerate(desviaciones):\n    axs[1, 1].text(\n        i + 1, v + (0.01 if v &gt;= 0 else -0.03), f\"{v:.1f}\", ha=\"center\", fontsize=8\n    )\n\n# A\u00f1adir estad\u00edsticas como anotaciones en el gr\u00e1fico\nstats_text = f\"\"\"\nEstad\u00edsticas:\n- Media: {np.mean(peso_paquetes):.2f} kg\n- Mediana: {np.median(peso_paquetes):.2f} kg\n- Desv. Est\u00e1ndar: {np.std(peso_paquetes):.3f} kg\n- M\u00ednimo: {min(peso_paquetes):.2f} kg\n- M\u00e1ximo: {max(peso_paquetes):.2f} kg\n- Rango: {max(peso_paquetes) - min(peso_paquetes):.2f} kg\n- CV: {(np.std(peso_paquetes)/np.mean(peso_paquetes)*100):.2f}%\n\"\"\"\n\n# A\u00f1adir texto con estad\u00edsticas\nfig.text(\n    0.5,\n    0.02,\n    stats_text,\n    ha=\"center\",\n    va=\"center\",\n    bbox=dict(facecolor=\"lightyellow\", alpha=0.5),\n)\n\n# Ajustar el layout\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.subplots_adjust(bottom=0.15)\n\n# Mostrar el gr\u00e1fico\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt import seaborn as sns  # Peso de paquetes en l\u00ednea de producci\u00f3n (kg) print(\"Peso de paquetes:\") peso_paquetes = [     10.2,     9.8,     10.1,     10.3,     10,     10.0,     10.2,     9.7,     10.1,     10.4,     9.8,     10.2,     10.0,     9.9,     10.1,     10.6,     9.8,     10.0,     10.2,     9.9, ] print(f\"Peso medio: {np.mean(peso_paquetes):.2f}kg\") print(f\"Peso m\u00ednimo: {min(peso_paquetes):.2f}kg\") print(f\"Peso m\u00e1ximo: {max(peso_paquetes):.2f}kg\")  # Configuraci\u00f3n del estilo de la gr\u00e1fica plt.figure(figsize=(12, 8)) sns.set_style(\"whitegrid\")  # Crear subplots para diferentes visualizaciones fig, axs = plt.subplots(2, 2, figsize=(14, 10)) fig.suptitle(\"An\u00e1lisis del Peso de Paquetes en L\u00ednea de Producci\u00f3n\", fontsize=16)  # 1. Histograma con curva de densidad sns.histplot(peso_paquetes, kde=True, color=\"skyblue\", ax=axs[0, 0]) axs[0, 0].axvline(     np.mean(peso_paquetes),     color=\"red\",     linestyle=\"--\",     linewidth=2,     label=f\"Media: {np.mean(peso_paquetes):.2f}kg\", ) axs[0, 0].axvline(     np.median(peso_paquetes),     color=\"green\",     linestyle=\"-.\",     linewidth=2,     label=f\"Mediana: {np.median(peso_paquetes):.2f}kg\", ) axs[0, 0].set_title(\"Distribuci\u00f3n del Peso de Paquetes\") axs[0, 0].set_xlabel(\"Peso (kg)\") axs[0, 0].set_ylabel(\"Frecuencia\") axs[0, 0].legend()  # 2. Gr\u00e1fico de caja (boxplot) sns.boxplot(y=peso_paquetes, ax=axs[0, 1], color=\"lightgreen\") axs[0, 1].set_title(\"Boxplot del Peso de Paquetes\") axs[0, 1].set_ylabel(\"Peso (kg)\")  # 3. Gr\u00e1fico de l\u00ednea para ver la secuencia axs[1, 0].plot(     range(1, len(peso_paquetes) + 1),     peso_paquetes,     marker=\"o\",     linestyle=\"-\",     color=\"purple\", ) axs[1, 0].axhline(y=10.0, color=\"blue\", linestyle=\"--\", label=\"Peso objetivo (10.0 kg)\") axs[1, 0].axhline(     y=np.mean(peso_paquetes),     color=\"red\",     linestyle=\"-.\",     label=f\"Media: {np.mean(peso_paquetes):.2f}kg\", ) axs[1, 0].set_title(\"Secuencia de Pesos por Paquete\") axs[1, 0].set_xlabel(\"N\u00famero de Paquete\") axs[1, 0].set_ylabel(\"Peso (kg)\") axs[1, 0].set_xticks(range(1, len(peso_paquetes) + 1)) axs[1, 0].grid(True) axs[1, 0].legend()  # 4. Gr\u00e1fico de barras de desviaci\u00f3n respecto al peso objetivo (en lugar del violin plot) desviaciones = [p - 10.0 for p in peso_paquetes] bars = axs[1, 1].bar(     range(1, len(peso_paquetes) + 1),     desviaciones,     color=[\"red\" if d &lt; 0 else \"green\" for d in desviaciones], ) axs[1, 1].axhline(y=0, color=\"black\", linestyle=\"-\", linewidth=1) axs[1, 1].set_title(\"Desviaci\u00f3n respecto al Peso Objetivo (10 kg)\") axs[1, 1].set_xlabel(\"N\u00famero de Paquete\") axs[1, 1].set_ylabel(\"Desviaci\u00f3n (kg)\") axs[1, 1].set_xticks(range(1, len(peso_paquetes) + 1)) axs[1, 1].grid(True, axis=\"y\")  # A\u00f1adir valores encima de las barras for i, v in enumerate(desviaciones):     axs[1, 1].text(         i + 1, v + (0.01 if v &gt;= 0 else -0.03), f\"{v:.1f}\", ha=\"center\", fontsize=8     )  # A\u00f1adir estad\u00edsticas como anotaciones en el gr\u00e1fico stats_text = f\"\"\" Estad\u00edsticas: - Media: {np.mean(peso_paquetes):.2f} kg - Mediana: {np.median(peso_paquetes):.2f} kg - Desv. Est\u00e1ndar: {np.std(peso_paquetes):.3f} kg - M\u00ednimo: {min(peso_paquetes):.2f} kg - M\u00e1ximo: {max(peso_paquetes):.2f} kg - Rango: {max(peso_paquetes) - min(peso_paquetes):.2f} kg - CV: {(np.std(peso_paquetes)/np.mean(peso_paquetes)*100):.2f}% \"\"\"  # A\u00f1adir texto con estad\u00edsticas fig.text(     0.5,     0.02,     stats_text,     ha=\"center\",     va=\"center\",     bbox=dict(facecolor=\"lightyellow\", alpha=0.5), )  # Ajustar el layout plt.tight_layout(rect=[0, 0.03, 1, 0.95]) plt.subplots_adjust(bottom=0.15)  # Mostrar el gr\u00e1fico plt.show()"},{"location":"Contenido/07_Variable%20aleatoria.html#7_variable-aleatoria","title":"7_VARIABLE ALEATORIA\u00b6","text":""},{"location":"Contenido/07_Variable%20aleatoria.html#correos-electronicos","title":"Correos electr\u00f3nicos\u00b6","text":""},{"location":"Contenido/07_Variable%20aleatoria.html#bugs-por-revision-de-codigo","title":"Bugs por revisi\u00f3n de c\u00f3digo\u00b6","text":""},{"location":"Contenido/07_Variable%20aleatoria.html#variables-aleatorias-continuas","title":"Variables aleatorias continuas\u00b6","text":""},{"location":"Contenido/07_Variable%20aleatoria.html#consumo-de-energia-por-hora-kwh","title":"Consumo de energ\u00eda por hora (kwh)\u00b6","text":""},{"location":"Contenido/07_Variable%20aleatoria.html#control-de-calidad-en-linea-de-envasado","title":"Control de calidad en l\u00ednea de envasado\u00b6","text":""},{"location":"Contenido/08_Distribuci%C3%B3n%20Uniforme%20Discreta.html","title":"DISTRIBUCI\u00d3N UNIFORME DISCRETA","text":"In\u00a0[\u00a0]: Copied! <pre>import random\n\n# Lista de metales\nmetal = [\"acero\", \"aluminio\", \"cobre\", \"titanio\", \"magnesio\"]\n\n\"\"\" Selecci\u00f3n aleatoria de un metal. Cada vez que ejecutamos el script\n    seleccionar\u00e1 un metal diferente (o el mismo) \"\"\"\nselected_metal = random.choice(metal)\nprint(f\"El metal elegido esta vez es {selected_metal}.\")\n</pre> import random  # Lista de metales metal = [\"acero\", \"aluminio\", \"cobre\", \"titanio\", \"magnesio\"]  \"\"\" Selecci\u00f3n aleatoria de un metal. Cada vez que ejecutamos el script     seleccionar\u00e1 un metal diferente (o el mismo) \"\"\" selected_metal = random.choice(metal) print(f\"El metal elegido esta vez es {selected_metal}.\") In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas y funciones\nimport numpy as np\n\n# Construimos las letras que pueden entrar en la clave\nletter = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]\n\n# Elegimos 5 letras siguiendo la uniforme discreta\nresults = np.random.choice(letter, 5)\n\n# Construimos la clave y la presentamos\nkey = results[0] + results[1] + results[2] + results[3] + results[4]\nprint(f\"La clave es {key}\")\n</pre> # Importamos librer\u00edas y funciones import numpy as np  # Construimos las letras que pueden entrar en la clave letter = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]  # Elegimos 5 letras siguiendo la uniforme discreta results = np.random.choice(letter, 5)  # Construimos la clave y la presentamos key = results[0] + results[1] + results[2] + results[3] + results[4] print(f\"La clave es {key}\") In\u00a0[\u00a0]: Copied! <pre># Importamos las librerias y funciones espec\u00edficas\nimport numpy as np\nimport networkx as nx  # Librer\u00eda para graficar la red\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n# Fijamos la semilla\nnp.random.seed(8998)\n\n# Creamos el gr\u00e1fico de red\nG_net = nx.Graph()  # Crearmos el objeto gr\u00e1fico \"red\"\nnodes = [\"A\", \"B\", \"C\", \"D\"]  # Nodos (servidores) de la red\nG_net.add_nodes_from(nodes)  # A\u00f1ade los nodos al objeto gr\u00e1fico \"red\"\nG_net.add_edges_from(\n    [(\"A\", \"B\"), (\"B\", \"C\"), (\"C\", \"D\"), (\"D\", \"A\"), (\"B\", \"D\")]\n)  # A\u00f1ade las relaciones entre los servidores\n\n# Simulamos 1000 peticiones a los servidores distribuidos uniformemente\nnumber_requests = 1000\nroutes = np.random.choice(\n    nodes, number_requests\n)  # Simulaci\u00f3n de carga de trabajo en cada servidor\ntotal_work = Counter(\n    routes\n)  # Diccionario donde las claves son los nodos y los valores las peticiones recibidas\n\n# Calculamos estad\u00edsticas\nnode_work = [total_work[node] for node in nodes]\nstd_swing = np.std(node_work)\n\n# Visualizar red\nplt.figure(figsize=(5, 4))\npos = nx.spring_layout(G_net)\n\n# Correcci\u00f3n del tama\u00f1o de los nodos basado en el trabajo que recibe cada servidor\nnode_sizes = [total_work[node] * 10 for node in nodes]\n\n# Configuraci\u00f3n del gr\u00e1fico de red\nnx.draw(\n    G_net,\n    pos,\n    with_labels=True,\n    node_color=\"lightblue\",\n    node_size=node_sizes,\n    font_weight=\"bold\",\n)\n\nplt.title(\"Distribuci\u00f3n de carga en la red\")\nplt.show()\n\n# Imprimir informaci\u00f3n\nprint(\"Distribuci\u00f3n de trabajo por nodo:\")\nfor node in nodes:\n    print(f\"\\tNodo {node}: {total_work[node]} peticiones\")\nprint(f\"\\nDesviaci\u00f3n est\u00e1ndar de la carga: {std_swing:.2f}\")\n</pre> # Importamos las librerias y funciones espec\u00edficas import numpy as np import networkx as nx  # Librer\u00eda para graficar la red import matplotlib.pyplot as plt from collections import Counter  # Fijamos la semilla np.random.seed(8998)  # Creamos el gr\u00e1fico de red G_net = nx.Graph()  # Crearmos el objeto gr\u00e1fico \"red\" nodes = [\"A\", \"B\", \"C\", \"D\"]  # Nodos (servidores) de la red G_net.add_nodes_from(nodes)  # A\u00f1ade los nodos al objeto gr\u00e1fico \"red\" G_net.add_edges_from(     [(\"A\", \"B\"), (\"B\", \"C\"), (\"C\", \"D\"), (\"D\", \"A\"), (\"B\", \"D\")] )  # A\u00f1ade las relaciones entre los servidores  # Simulamos 1000 peticiones a los servidores distribuidos uniformemente number_requests = 1000 routes = np.random.choice(     nodes, number_requests )  # Simulaci\u00f3n de carga de trabajo en cada servidor total_work = Counter(     routes )  # Diccionario donde las claves son los nodos y los valores las peticiones recibidas  # Calculamos estad\u00edsticas node_work = [total_work[node] for node in nodes] std_swing = np.std(node_work)  # Visualizar red plt.figure(figsize=(5, 4)) pos = nx.spring_layout(G_net)  # Correcci\u00f3n del tama\u00f1o de los nodos basado en el trabajo que recibe cada servidor node_sizes = [total_work[node] * 10 for node in nodes]  # Configuraci\u00f3n del gr\u00e1fico de red nx.draw(     G_net,     pos,     with_labels=True,     node_color=\"lightblue\",     node_size=node_sizes,     font_weight=\"bold\", )  plt.title(\"Distribuci\u00f3n de carga en la red\") plt.show()  # Imprimir informaci\u00f3n print(\"Distribuci\u00f3n de trabajo por nodo:\") for node in nodes:     print(f\"\\tNodo {node}: {total_work[node]} peticiones\") print(f\"\\nDesviaci\u00f3n est\u00e1ndar de la carga: {std_swing:.2f}\")"},{"location":"Contenido/08_Distribuci%C3%B3n%20Uniforme%20Discreta.html#distribucion-uniforme-discreta","title":"DISTRIBUCI\u00d3N UNIFORME DISCRETA\u00b6","text":""},{"location":"Contenido/08_Distribuci%C3%B3n%20Uniforme%20Discreta.html#seleccion-aleatoria-de-un-material","title":"Selecci\u00f3n aleatoria de un material\u00b6","text":""},{"location":"Contenido/08_Distribuci%C3%B3n%20Uniforme%20Discreta.html#calculadora-de-claves","title":"Calculadora de claves\u00b6","text":""},{"location":"Contenido/08_Distribuci%C3%B3n%20Uniforme%20Discreta.html#simulacion-del-balanceo-de-carga","title":"Simulaci\u00f3n del balanceo de carga\u00b6","text":""},{"location":"Contenido/09_Distribuci%C3%B3n%20Bernouilli_Binomial.html","title":"9_DISTRIBUCIONES BERNOUILLI Y BINOMIAL","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import binom\n\n# Par\u00e1metros de la Binomial\nn = 15  # N\u00famero de semillas plantadas\np = 0.35  # Probabilidad de \u00e9xito (germine)\n\n# Generar los valores de la variable X\nk = np.arange(0, n + 1)\n\n# Calcularmos las probabilidades\nprob = binom.pmf(k, n, p)\n\n# Graficamos B(15,0.35)\nplt.figure(figsize=(8, 5))\nplt.bar(k, prob, color=\"green\", alpha=0.7)\nplt.title(f\"Germinaci\u00f3n de semillas $B({n},{p})$\")\nplt.xlabel(\"N\u00famero de semillas germinadas (k)\")\nplt.ylabel(\"Probabilidad\")\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import binom  # Par\u00e1metros de la Binomial n = 15  # N\u00famero de semillas plantadas p = 0.35  # Probabilidad de \u00e9xito (germine)  # Generar los valores de la variable X k = np.arange(0, n + 1)  # Calcularmos las probabilidades prob = binom.pmf(k, n, p)  # Graficamos B(15,0.35) plt.figure(figsize=(8, 5)) plt.bar(k, prob, color=\"green\", alpha=0.7) plt.title(f\"Germinaci\u00f3n de semillas $B({n},{p})$\") plt.xlabel(\"N\u00famero de semillas germinadas (k)\") plt.ylabel(\"Probabilidad\") plt.show() In\u00a0[\u00a0]: Copied! <pre>prob_5_sucess = binom.pmf(5, 15, 0.35)\nprint(f\"La probabilidad de que exactamente 5 germinen es {prob_5_sucess:.4f}\")\n</pre> prob_5_sucess = binom.pmf(5, 15, 0.35) print(f\"La probabilidad de que exactamente 5 germinen es {prob_5_sucess:.4f}\") In\u00a0[\u00a0]: Copied! <pre>prob_less_6 = binom.cdf(5, 15, 0.35)\nprint(f\"La probabilidad de que germinen menos de 6 es {prob_less_6:.4f}\")\n</pre> prob_less_6 = binom.cdf(5, 15, 0.35) print(f\"La probabilidad de que germinen menos de 6 es {prob_less_6:.4f}\") In\u00a0[\u00a0]: Copied! <pre># Repartimos el espacio de valores y calculamos probabilidades\nk_red = np.arange(0, 6)\nk_green = np.arange(6, 16)\nprob_less_6 = prob[k[k_red]]\nprob_more_6 = prob[k[k_green]]\n\n# Graficamos B(15,0.35)\nplt.figure(figsize=(8, 5))\nplt.bar(k_red, prob_less_6, color=\"red\", alpha=0.7, label=f\"$P[X&lt;6]$\")\nplt.bar(k_green, prob_more_6, color=\"green\", alpha=0.7, label=f\"$P[X\\geq 6]$\")\nplt.legend()\nplt.show()\n</pre> # Repartimos el espacio de valores y calculamos probabilidades k_red = np.arange(0, 6) k_green = np.arange(6, 16) prob_less_6 = prob[k[k_red]] prob_more_6 = prob[k[k_green]]  # Graficamos B(15,0.35) plt.figure(figsize=(8, 5)) plt.bar(k_red, prob_less_6, color=\"red\", alpha=0.7, label=f\"$P[X&lt;6]$\") plt.bar(k_green, prob_more_6, color=\"green\", alpha=0.7, label=f\"$P[X\\geq 6]$\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Simular 1000 experimentos de germinaci\u00f3n\nexperiments = np.random.binomial(n, p, size=1000)\n\n# Graficamos los resultados de la simulaci\u00f3n\nplt.figure(figsize=(8, 5))\nplt.hist(\n    experiments,\n    bins=np.arange(-0.5, n + 1.5, 1),\n    density=True,\n    alpha=0.7,\n    color=\"blue\",\n    edgecolor=\"yellow\",\n    rwidth=0.9,\n)\nplt.title(f\"Simulaci\u00f3n de 1000 experimentos de germinaci\u00f3n $B({n}, {p})$\")\nplt.xlabel(\"N\u00famero de semillas germinadas (k)\")\nplt.ylabel(\"Frecuencia relativa\")\nplt.xticks(range(0, n + 1, 2))\nplt.show()\n</pre> # Simular 1000 experimentos de germinaci\u00f3n experiments = np.random.binomial(n, p, size=1000)  # Graficamos los resultados de la simulaci\u00f3n plt.figure(figsize=(8, 5)) plt.hist(     experiments,     bins=np.arange(-0.5, n + 1.5, 1),     density=True,     alpha=0.7,     color=\"blue\",     edgecolor=\"yellow\",     rwidth=0.9, ) plt.title(f\"Simulaci\u00f3n de 1000 experimentos de germinaci\u00f3n $B({n}, {p})$\") plt.xlabel(\"N\u00famero de semillas germinadas (k)\") plt.ylabel(\"Frecuencia relativa\") plt.xticks(range(0, n + 1, 2)) plt.show() In\u00a0[\u00a0]: Copied! <pre>\"\"\"En la siguiente l\u00ednea contaremos los resultados del experimento\nunique: valores encontrados\ncounts: cuantas veces aparecen (frecuencias absolutas)\"\"\"\n\nunique, counts = np.unique(experiments, return_counts=True)\n\n# Calculamos las frecuencias relativas\nfrequencies = counts / 1000\n\n# Comparar te\u00f3rico vs simulaci\u00f3n\nplt.figure(figsize=(8, 5))\nplt.bar(\n    k, prob, color=\"green\", alpha=0.6, label=\"Probabilidad te\u00f3rica\", edgecolor=\"black\"\n)\nplt.scatter(unique, frequencies, color=\"red\", label=\"Frecuencia simulada\", zorder=5)\nplt.title(f\"Probabilidad te\u00f3rica vs simulaci\u00f3n $B({n},{p})$\")\nplt.xlabel(\"N\u00famero de semillas germinadas (k)\")\nplt.ylabel(\"Probabilidad/Frecuencia relativa\")\nplt.legend()\nplt.show()\n</pre> \"\"\"En la siguiente l\u00ednea contaremos los resultados del experimento unique: valores encontrados counts: cuantas veces aparecen (frecuencias absolutas)\"\"\"  unique, counts = np.unique(experiments, return_counts=True)  # Calculamos las frecuencias relativas frequencies = counts / 1000  # Comparar te\u00f3rico vs simulaci\u00f3n plt.figure(figsize=(8, 5)) plt.bar(     k, prob, color=\"green\", alpha=0.6, label=\"Probabilidad te\u00f3rica\", edgecolor=\"black\" ) plt.scatter(unique, frequencies, color=\"red\", label=\"Frecuencia simulada\", zorder=5) plt.title(f\"Probabilidad te\u00f3rica vs simulaci\u00f3n $B({n},{p})$\") plt.xlabel(\"N\u00famero de semillas germinadas (k)\") plt.ylabel(\"Probabilidad/Frecuencia relativa\") plt.legend() plt.show()"},{"location":"Contenido/09_Distribuci%C3%B3n%20Bernouilli_Binomial.html#9_distribuciones-bernouilli-y-binomial","title":"9_DISTRIBUCIONES BERNOUILLI Y BINOMIAL\u00b6","text":""},{"location":"Contenido/10_Distribuci%C3%B3n%20Multinomial.html","title":"10_DISTRIBUCI\u00d3N MULTINOMIAL","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos numpy y la funci\u00f3n multinomial de scipy\nimport numpy as np\nfrom scipy.stats import multinomial\nimport matplotlib.pyplot as plt\n\n# Par\u00e1metros de la distribuci\u00f3n\nn = 16\nprobs = np.ones(6) * 1 / 6\n\n# Resultado\nresult = [3, 5, 2, 4, 1, 1]  # Se puede pasar una lista o un array de numpy\n\n# Calculamos la probabilidad\nprob = multinomial.pmf(result, n, probs)\nprint(f\"La probabilidad pedida es {prob:.4f}\")\n</pre> # Importamos numpy y la funci\u00f3n multinomial de scipy import numpy as np from scipy.stats import multinomial import matplotlib.pyplot as plt  # Par\u00e1metros de la distribuci\u00f3n n = 16 probs = np.ones(6) * 1 / 6  # Resultado result = [3, 5, 2, 4, 1, 1]  # Se puede pasar una lista o un array de numpy  # Calculamos la probabilidad prob = multinomial.pmf(result, n, probs) print(f\"La probabilidad pedida es {prob:.4f}\") In\u00a0[\u00a0]: Copied! <pre># Importamos numpy y la funci\u00f3n multinomial de scipy\nimport numpy as np\nfrom scipy.stats import multinomial\nimport matplotlib.pyplot as plt\n\n# Ejemplo de herencia mendeliana con tres fenotipos\n\nn_organisms = 100\n\n# Probabilidades: dominante (AA), heterocigoto (Aa), recesivo (aa)\nprob_genotypes = np.array([0.25, 0.5, 0.25])  # AA, Aa, aa\n\n\"\"\" Generamos la poblaci\u00f3n (tambi\u00e9n podr\u00edamos utilizar multinomial.rvs)\n    en un array con el n\u00famero de organismos para cada fenotipo \"\"\"\npopulation = np.random.multinomial(n_organisms, prob_genotypes)\n\nprint(\"Distribuci\u00f3n de genotipos en la poblaci\u00f3n\")\nprint(f\"\\tAA (dominante): {population[0]}\")\nprint(f\"\\tAa (heterocigoto): {population[1]}\")\nprint(f\"\\taa (recesivo): {population[2]}\")\n\n# Probabilidad de obtener exactamente esa distribuci\u00f3n\nprob = multinomial.pmf(population, n_organisms, prob_genotypes)\nprint(f\"\\nProbabilidad de esta distribuci\u00f3n espec\u00edfica: {prob:.4f}\")\n\n# Graficamos\nlabels = [\"AA (dominante)\", \"Aa (heterocigoto)\", \"aa (recesivo)\"]\ncolors = [\"skyblue\", \"lightgreen\", \"salmon\"]\nplt.figure(figsize=(6, 4))\nplt.bar(labels, population, color=colors)\nplt.title(\"Distribuci\u00f3n de Genotipos en la Poblaci\u00f3n\", fontsize=9)\nplt.xlabel(\"Genotipos\", fontsize=8)\nplt.ylabel(\"Organismos\", fontsize=8)\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\nplt.show()\n</pre> # Importamos numpy y la funci\u00f3n multinomial de scipy import numpy as np from scipy.stats import multinomial import matplotlib.pyplot as plt  # Ejemplo de herencia mendeliana con tres fenotipos  n_organisms = 100  # Probabilidades: dominante (AA), heterocigoto (Aa), recesivo (aa) prob_genotypes = np.array([0.25, 0.5, 0.25])  # AA, Aa, aa  \"\"\" Generamos la poblaci\u00f3n (tambi\u00e9n podr\u00edamos utilizar multinomial.rvs)     en un array con el n\u00famero de organismos para cada fenotipo \"\"\" population = np.random.multinomial(n_organisms, prob_genotypes)  print(\"Distribuci\u00f3n de genotipos en la poblaci\u00f3n\") print(f\"\\tAA (dominante): {population[0]}\") print(f\"\\tAa (heterocigoto): {population[1]}\") print(f\"\\taa (recesivo): {population[2]}\")  # Probabilidad de obtener exactamente esa distribuci\u00f3n prob = multinomial.pmf(population, n_organisms, prob_genotypes) print(f\"\\nProbabilidad de esta distribuci\u00f3n espec\u00edfica: {prob:.4f}\")  # Graficamos labels = [\"AA (dominante)\", \"Aa (heterocigoto)\", \"aa (recesivo)\"] colors = [\"skyblue\", \"lightgreen\", \"salmon\"] plt.figure(figsize=(6, 4)) plt.bar(labels, population, color=colors) plt.title(\"Distribuci\u00f3n de Genotipos en la Poblaci\u00f3n\", fontsize=9) plt.xlabel(\"Genotipos\", fontsize=8) plt.ylabel(\"Organismos\", fontsize=8) plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7) plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos numpy y la funci\u00f3n multinomial de scipy\nimport numpy as np\nfrom scipy.stats import multinomial\nimport matplotlib.pyplot as plt\n\n# Par\u00e1metros de la distribuci\u00f3n\nn_defects = 300\nprobabilities = [0.5, 0.25, 0.1, 0.15]\n\n# Generamos la poblacion\npopulation = multinomial.rvs(n_defects, probabilities)\n</pre> # Importamos numpy y la funci\u00f3n multinomial de scipy import numpy as np from scipy.stats import multinomial import matplotlib.pyplot as plt  # Par\u00e1metros de la distribuci\u00f3n n_defects = 300 probabilities = [0.5, 0.25, 0.1, 0.15]  # Generamos la poblacion population = multinomial.rvs(n_defects, probabilities) In\u00a0[\u00a0]: Copied! <pre># Veamos la salida de este array\npopulation\n</pre> # Veamos la salida de este array population In\u00a0[\u00a0]: Copied! <pre># Distribuci\u00f3n de defectos\nprint(\"Distribuci\u00f3n de defectos\")\nprint(f\"\\tVacantes): {population[0]}\")\nprint(f\"\\tIntersticiales: {population[1]}\")\nprint(f\"\\tDislocaciones: {population[2]}\")\nprint(f\"\\tFronteras: {population[3]}\")\n\n# Estad\u00edsticos\nprob_np = np.array(probabilities)\nmeans = n_defects * prob_np\nfour_1 = np.ones(4)\nvariances = n_defects * prob_np * (four_1 - prob_np)\ncovariance_matrix = multinomial.cov(n_defects, prob_np)\n\nprint(\"\\nEstad\u00edsticos:\")\nprint(\"\\tMatriz de covarianza:\")\nprint(covariance_matrix)\nfor label, mean, variance in zip(labels, means, variances):\n    print(f\"\\tDefecto: {label}\")\n    print(f\"\\t\\tMedia {mean:.2f}\")\n    print(f\"\\t\\tVarianza {variance:.2f}\")\n\n# Graficamos\nlabels = [\"Vacantes\", \"Intersticiales\", \"Dislocaciones\", \"Fronteras\"]\ncolors = [\"skyblue\", \"lightgreen\", \"salmon\", \"yellow\"]\nplt.figure(figsize=(6, 4))\nplt.bar(labels, population, color=colors)\nplt.title(\"Distribuci\u00f3n de Defectos\", fontsize=9)\nplt.xlabel(\"Defectos\", fontsize=8)\nplt.ylabel(\"N\u00famero de defectos\", fontsize=8)\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\nplt.show()\n</pre> # Distribuci\u00f3n de defectos print(\"Distribuci\u00f3n de defectos\") print(f\"\\tVacantes): {population[0]}\") print(f\"\\tIntersticiales: {population[1]}\") print(f\"\\tDislocaciones: {population[2]}\") print(f\"\\tFronteras: {population[3]}\")  # Estad\u00edsticos prob_np = np.array(probabilities) means = n_defects * prob_np four_1 = np.ones(4) variances = n_defects * prob_np * (four_1 - prob_np) covariance_matrix = multinomial.cov(n_defects, prob_np)  print(\"\\nEstad\u00edsticos:\") print(\"\\tMatriz de covarianza:\") print(covariance_matrix) for label, mean, variance in zip(labels, means, variances):     print(f\"\\tDefecto: {label}\")     print(f\"\\t\\tMedia {mean:.2f}\")     print(f\"\\t\\tVarianza {variance:.2f}\")  # Graficamos labels = [\"Vacantes\", \"Intersticiales\", \"Dislocaciones\", \"Fronteras\"] colors = [\"skyblue\", \"lightgreen\", \"salmon\", \"yellow\"] plt.figure(figsize=(6, 4)) plt.bar(labels, population, color=colors) plt.title(\"Distribuci\u00f3n de Defectos\", fontsize=9) plt.xlabel(\"Defectos\", fontsize=8) plt.ylabel(\"N\u00famero de defectos\", fontsize=8) plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7) plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos numpy y la funci\u00f3n multinomial de scipy\nimport numpy as np\nfrom scipy.stats import multinomial\nimport matplotlib.pyplot as plt\nimport pandas as pd  # Para facilitar la visualizaci\u00f3n de los datos\n\n# Par\u00e1metros del modelo\nnumber_failures = 500\nnumber_cycles = 200\nprobabilities = np.array([175, 125, 100, 75, 25]) / 500\nlabels = [\"Hardware\", \"Software\", \"Red\", \"Energ\u00eda\", \"Humano\"]\nresolution_time = {\"Hardware\": 4, \"Software\": 2, \"Red\": 1, \"Energ\u00eda\": 3, \"Humano\": 0.5}\ncosts_failure = {\n    \"Hardware\": 1000,\n    \"Software\": 500,\n    \"Red\": 300,\n    \"Energ\u00eda\": 800,\n    \"Humano\": 200,\n}\n\n# Generamos las observaciones\nresults = multinomial.rvs(number_failures, probabilities, number_cycles)\n</pre> # Importamos numpy y la funci\u00f3n multinomial de scipy import numpy as np from scipy.stats import multinomial import matplotlib.pyplot as plt import pandas as pd  # Para facilitar la visualizaci\u00f3n de los datos  # Par\u00e1metros del modelo number_failures = 500 number_cycles = 200 probabilities = np.array([175, 125, 100, 75, 25]) / 500 labels = [\"Hardware\", \"Software\", \"Red\", \"Energ\u00eda\", \"Humano\"] resolution_time = {\"Hardware\": 4, \"Software\": 2, \"Red\": 1, \"Energ\u00eda\": 3, \"Humano\": 0.5} costs_failure = {     \"Hardware\": 1000,     \"Software\": 500,     \"Red\": 300,     \"Energ\u00eda\": 800,     \"Humano\": 200, }  # Generamos las observaciones results = multinomial.rvs(number_failures, probabilities, number_cycles) In\u00a0[\u00a0]: Copied! <pre># Creamos el Dataframe para visualizar los datos\nresults_pd = pd.DataFrame(results)\n# Renombramos las columnas\nresults_pd = results_pd.set_axis(\n    [\"Hardware\", \"Software\", \"Red\", \"Energ\u00eda\", \"Humano\"], axis=1\n)\n# Visualizamos los 5 primeros ciclos\nresults_pd.head()\n</pre> # Creamos el Dataframe para visualizar los datos results_pd = pd.DataFrame(results) # Renombramos las columnas results_pd = results_pd.set_axis(     [\"Hardware\", \"Software\", \"Red\", \"Energ\u00eda\", \"Humano\"], axis=1 ) # Visualizamos los 5 primeros ciclos results_pd.head() In\u00a0[\u00a0]: Copied! <pre>results_pd[\"Total Errores\"] = results_pd.sum(axis=1)\nresults_pd.head()\n</pre> results_pd[\"Total Errores\"] = results_pd.sum(axis=1) results_pd.head() In\u00a0[\u00a0]: Copied! <pre># Calculamos la media de cada tipo de error\nmeans_failures = np.mean(results, axis=0)\nmeans_failures\n</pre> # Calculamos la media de cada tipo de error means_failures = np.mean(results, axis=0) means_failures In\u00a0[\u00a0]: Copied! <pre>\"\"\"Utilizando estas medias calculamos el tiempo medio total empleado en subsanar\nlos fallos. Si consideramos una base anual de 8760 horas (un a\u00f1o), calculamos\ntambi\u00e9n la disponibilidad anual estimada.\n\"\"\"\n\nANNUAL_HOURS = 365 * 24\ntotal_time = sum(means_failures * [resolution_time[label] for label in labels])\navailability = (ANNUAL_HOURS - total_time) / ANNUAL_HOURS * 100\nprint(f\"La disponibilidad anual estimada es del {availability:.2f}%\")\n</pre> \"\"\"Utilizando estas medias calculamos el tiempo medio total empleado en subsanar los fallos. Si consideramos una base anual de 8760 horas (un a\u00f1o), calculamos tambi\u00e9n la disponibilidad anual estimada. \"\"\"  ANNUAL_HOURS = 365 * 24 total_time = sum(means_failures * [resolution_time[label] for label in labels]) availability = (ANNUAL_HOURS - total_time) / ANNUAL_HOURS * 100 print(f\"La disponibilidad anual estimada es del {availability:.2f}%\") In\u00a0[\u00a0]: Copied! <pre>\"\"\"Para el an\u00e1lisis econ\u00f3mico, procedemos de un modo similar. Calculamos el coste\npromedio total.\n\"\"\"\n\ntotal_cost = np.sum(means_failures * [costs_failure[label] for label in labels])\nprint(f\"El coste medio mensual de mantenimiento ser\u00e1 de {total_cost/12:.0f} \u20ac\")\n</pre> \"\"\"Para el an\u00e1lisis econ\u00f3mico, procedemos de un modo similar. Calculamos el coste promedio total. \"\"\"  total_cost = np.sum(means_failures * [costs_failure[label] for label in labels]) print(f\"El coste medio mensual de mantenimiento ser\u00e1 de {total_cost/12:.0f} \u20ac\") In\u00a0[\u00a0]: Copied! <pre># Graficamos la distribuci\u00f3n medias\ncolors = [\"skyblue\", \"lightgreen\", \"salmon\", \"yellow\", \"orange\"]\nplt.figure(figsize=(6, 4))\nplt.bar(labels, means_failures, color=colors)\nplt.title(\"Distribuci\u00f3n de fallos (medias)\", fontsize=9)\nplt.xlabel(\"Origen de los fallos\", fontsize=8)\nplt.ylabel(\"N\u00famero de fallos\", fontsize=8)\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\nplt.show()\n</pre> # Graficamos la distribuci\u00f3n medias colors = [\"skyblue\", \"lightgreen\", \"salmon\", \"yellow\", \"orange\"] plt.figure(figsize=(6, 4)) plt.bar(labels, means_failures, color=colors) plt.title(\"Distribuci\u00f3n de fallos (medias)\", fontsize=9) plt.xlabel(\"Origen de los fallos\", fontsize=8) plt.ylabel(\"N\u00famero de fallos\", fontsize=8) plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7) plt.show()"},{"location":"Contenido/10_Distribuci%C3%B3n%20Multinomial.html#10_distribucion-multinomial","title":"10_DISTRIBUCI\u00d3N MULTINOMIAL\u00b6","text":""},{"location":"Contenido/10_Distribuci%C3%B3n%20Multinomial.html#genetica","title":"Gen\u00e9tica\u00b6","text":""},{"location":"Contenido/10_Distribuci%C3%B3n%20Multinomial.html#ingenieria-de-materiales","title":"Ingenier\u00eda de Materiales\u00b6","text":""},{"location":"Contenido/10_Distribuci%C3%B3n%20Multinomial.html#analisis-de-fallos-en-un-sistema-de-telecomunicaciones","title":"An\u00e1lisis de fallos en un sistema de telecomunicaciones\u00b6","text":""},{"location":"Contenido/11_Distribuci%C3%B3n%20de%20Poisson.html","title":"DISTRIBUCI\u00d3N DE POISSON","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nfrom scipy.stats import poisson\nimport matplotlib.pyplot as plt\n\n\"\"\" Definimos una funci\u00f3n para dibujar la distribuci\u00f3n de Poisson:\n        argumentos : \n            lambda_: Par\u00e1metro\n            text_ : T\u00edtulo del ejemplo\n        devuelve:\n            gr\u00e1fico con la distribuci\u00f3n de Poisson de par\u00e1metro\n            lambda y el t\u00edtulo del ejemplo \n\"\"\"\n\n\ndef plot_poisson(lambda_, text_):\n    # Generar valores discretos para k\n    k = np.arange(0, lambda_ * 3)\n\n    # Calculamos las probabilidades con la pmf de scipy\n    probability = poisson.pmf(k, lambda_)\n\n    # Gr\u00e1fico\n    plt.figure(figsize=(10, 6))\n    plt.bar(k, probability, alpha=0.8, color=\"blue\", label=f\"$\\lambda$ = {lambda_}\")\n    plt.title(text_)\n    plt.xlabel(\"N\u00famero de veces que ocurre el suceso\")\n    plt.ylabel(\"Probabilidad de que ocurra\")\n    plt.legend()\n    return plt.show\n</pre> # Importamos las librer\u00edas import numpy as np from scipy.stats import poisson import matplotlib.pyplot as plt  \"\"\" Definimos una funci\u00f3n para dibujar la distribuci\u00f3n de Poisson:         argumentos :              lambda_: Par\u00e1metro             text_ : T\u00edtulo del ejemplo         devuelve:             gr\u00e1fico con la distribuci\u00f3n de Poisson de par\u00e1metro             lambda y el t\u00edtulo del ejemplo  \"\"\"   def plot_poisson(lambda_, text_):     # Generar valores discretos para k     k = np.arange(0, lambda_ * 3)      # Calculamos las probabilidades con la pmf de scipy     probability = poisson.pmf(k, lambda_)      # Gr\u00e1fico     plt.figure(figsize=(10, 6))     plt.bar(k, probability, alpha=0.8, color=\"blue\", label=f\"$\\lambda$ = {lambda_}\")     plt.title(text_)     plt.xlabel(\"N\u00famero de veces que ocurre el suceso\")     plt.ylabel(\"Probabilidad de que ocurra\")     plt.legend()     return plt.show In\u00a0[\u00a0]: Copied! <pre>plot_poisson(3, \"Colonias por cuadrante\")\n</pre> plot_poisson(3, \"Colonias por cuadrante\") In\u00a0[\u00a0]: Copied! <pre># La probabilidad pedida es\nprint(f\"La probabilidad de 3 colonias por cuadrante es {poisson.pmf(3,5):.4f}\")\n</pre> # La probabilidad pedida es print(f\"La probabilidad de 3 colonias por cuadrante es {poisson.pmf(3,5):.4f}\") In\u00a0[\u00a0]: Copied! <pre>plot_poisson(7, \"Part\u00edculas por minuto\")\n</pre> plot_poisson(7, \"Part\u00edculas por minuto\") In\u00a0[\u00a0]: Copied! <pre># Calculamos la probabilidad\nprob_plus_9 = 1 - poisson.cdf(9, 7)\nprint(f\"La probabilidad de m\u00e1s de 9 part\u00edculas es {prob_plus_9:.4f}\")\n</pre> # Calculamos la probabilidad prob_plus_9 = 1 - poisson.cdf(9, 7) print(f\"La probabilidad de m\u00e1s de 9 part\u00edculas es {prob_plus_9:.4f}\") In\u00a0[\u00a0]: Copied! <pre>lambda_ = 7\nk = np.arange(0, 21)\n\n# Separamos los array k y probability\nk_blue = k[k &lt;= 9]\nprobability_blue = poisson.pmf(k_blue, lambda_)\nk_red = k[k &gt; 9]\nprobability_red = poisson.pmf(k_red, lambda_)\n\n# Gr\u00e1fico\nplt.figure(figsize=(10, 6))\nplt.bar(k_blue, probability_blue, alpha=0.8, color=\"blue\", label=f\"$X\\leq 9$\")\nplt.bar(k_red, probability_red, alpha=0.8, color=\"red\", label=f\"$X&gt;9$\")\nplt.title(\"Probabilidad de m\u00e1s de 9 part\u00edculas\")\nplt.xlabel(\"N\u00famero de veces que ocurre el suceso\")\nplt.ylabel(\"Probabilidad de que ocurra\")\nplt.legend()\nplt.show\n</pre> lambda_ = 7 k = np.arange(0, 21)  # Separamos los array k y probability k_blue = k[k &lt;= 9] probability_blue = poisson.pmf(k_blue, lambda_) k_red = k[k &gt; 9] probability_red = poisson.pmf(k_red, lambda_)  # Gr\u00e1fico plt.figure(figsize=(10, 6)) plt.bar(k_blue, probability_blue, alpha=0.8, color=\"blue\", label=f\"$X\\leq 9$\") plt.bar(k_red, probability_red, alpha=0.8, color=\"red\", label=f\"$X&gt;9$\") plt.title(\"Probabilidad de m\u00e1s de 9 part\u00edculas\") plt.xlabel(\"N\u00famero de veces que ocurre el suceso\") plt.ylabel(\"Probabilidad de que ocurra\") plt.legend() plt.show In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Fijamos la semilla para garantizar reproducibilidad\nnp.random.seed(89876)\n\n# Par\u00e1metros de la simulaci\u00f3n\nlambda_ = 8  # Tasa media de llegada (clientes/minuto)\ntime_interval = 60  # Duraci\u00f3n de la simulaci\u00f3n en minutos\n\n# Generaci\u00f3n de datos aleatorios seg\u00fan Poisson\nclients_per_minute = np.random.poisson(lambda_, time_interval)\n\n# Resultados de la simulaci\u00f3n\nprint(\"Simulaci\u00f3n de llegadas de clientes a las cajas (clientes/minuto):\")\nprint(clients_per_minute)\n\n# Visualizaci\u00f3n\nplt.figure(figsize=(18, 8))\nplt.bar(\n    range(1, time_interval + 1), clients_per_minute, color=\"blue\", edgecolor=\"black\"\n)\n# L\u00ednea vertical para la media te\u00f3rica\nplt.axhline(\n    y=lambda_,\n    color=\"red\",\n    linestyle=\"--\",\n    label=f\"Media esperada ({lambda_} clientes/minuto)\",\n)\nplt.title(\"Simulaci\u00f3n de llegadas de clientes a las cajas del supermercado\")\nplt.xlabel(\"Minuto\")\nplt.ylabel(\"N\u00famero de clientes\")\nplt.legend()\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\nplt.show()\n\n# Estad\u00edsticas de la simulaci\u00f3n\nprint(\"\\nEstad\u00edsticas de la simulaci\u00f3n:\")\nprint(f\"\\tClientes totales en {time_interval} minutos: {np.sum(clients_per_minute)}\")\nprint(f\"\\tMedia de la simulaci\u00f3n: {np.mean(clients_per_minute):.2f} clientes/minuto\")\nprint(\n    f\"\\tDesviaci\u00f3n est\u00e1ndar de la simulaci\u00f3n: {np.std(clients_per_minute):.2f} clientes/minuto\"\n)\n</pre> import numpy as np import matplotlib.pyplot as plt  # Fijamos la semilla para garantizar reproducibilidad np.random.seed(89876)  # Par\u00e1metros de la simulaci\u00f3n lambda_ = 8  # Tasa media de llegada (clientes/minuto) time_interval = 60  # Duraci\u00f3n de la simulaci\u00f3n en minutos  # Generaci\u00f3n de datos aleatorios seg\u00fan Poisson clients_per_minute = np.random.poisson(lambda_, time_interval)  # Resultados de la simulaci\u00f3n print(\"Simulaci\u00f3n de llegadas de clientes a las cajas (clientes/minuto):\") print(clients_per_minute)  # Visualizaci\u00f3n plt.figure(figsize=(18, 8)) plt.bar(     range(1, time_interval + 1), clients_per_minute, color=\"blue\", edgecolor=\"black\" ) # L\u00ednea vertical para la media te\u00f3rica plt.axhline(     y=lambda_,     color=\"red\",     linestyle=\"--\",     label=f\"Media esperada ({lambda_} clientes/minuto)\", ) plt.title(\"Simulaci\u00f3n de llegadas de clientes a las cajas del supermercado\") plt.xlabel(\"Minuto\") plt.ylabel(\"N\u00famero de clientes\") plt.legend() plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7) plt.show()  # Estad\u00edsticas de la simulaci\u00f3n print(\"\\nEstad\u00edsticas de la simulaci\u00f3n:\") print(f\"\\tClientes totales en {time_interval} minutos: {np.sum(clients_per_minute)}\") print(f\"\\tMedia de la simulaci\u00f3n: {np.mean(clients_per_minute):.2f} clientes/minuto\") print(     f\"\\tDesviaci\u00f3n est\u00e1ndar de la simulaci\u00f3n: {np.std(clients_per_minute):.2f} clientes/minuto\" ) In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Fijamos la semilla para garantizar reproducibilidad\nnp.random.seed(146554)\n\n# Par\u00e1metros de la simulaci\u00f3n\nlambda_ = 4  # Defectos por metro cuadrado\nsize_area = 9  # Superficie de la luna\nnumber_grids = size_area  # N\u00famero de cuadr\u00edculas\n\n# Generaci\u00f3n de datos aleatorios seg\u00fan Poisson\ndefects_per_grid = np.random.poisson(lambda_, number_grids)\n\n# Resultados de la simulaci\u00f3n\nprint(\"Simulaci\u00f3n de defectos por cuadr\u00edcula:\")\nprint(defects_per_grid)\n\n# Visualizaci\u00f3n\nplt.figure(figsize=(18, 8))\nplt.bar(range(1, number_grids + 1), defects_per_grid, color=\"green\", edgecolor=\"yellow\")\n# L\u00ednea horizontal para la media te\u00f3rica\nplt.axhline(\n    y=lambda_,\n    color=\"red\",\n    linestyle=\"--\",\n    label=f\"Media esperada ({lambda_} defectos/cuadr\u00edcula)\",\n)\nplt.title(\"Simulaci\u00f3n de defectos en la luna\")\nplt.xlabel(\"Cuadr\u00edcula (1 $m^2$)\")\nplt.ylabel(\"N\u00famero de defectos\")\nplt.legend()\nplt.show()\n\n# Estad\u00edsticas de la simulaci\u00f3n\nprint(\"\\nEstad\u00edsticas de la simulaci\u00f3n:\")\nprint(f\"\\tDefectos totales en la luna: {np.sum(defects_per_grid)}\")\nprint(\n    f\"\\tMedia de defectos por cuadr\u00edcula: {np.mean(defects_per_grid):.2f} defectos/m^2\"\n)\nprint(\n    f\"\\tDesviaci\u00f3n est\u00e1ndar de la simulaci\u00f3n: {np.std(defects_per_grid):.2f} defectos/m^2\"\n)\n</pre> import numpy as np import matplotlib.pyplot as plt  # Fijamos la semilla para garantizar reproducibilidad np.random.seed(146554)  # Par\u00e1metros de la simulaci\u00f3n lambda_ = 4  # Defectos por metro cuadrado size_area = 9  # Superficie de la luna number_grids = size_area  # N\u00famero de cuadr\u00edculas  # Generaci\u00f3n de datos aleatorios seg\u00fan Poisson defects_per_grid = np.random.poisson(lambda_, number_grids)  # Resultados de la simulaci\u00f3n print(\"Simulaci\u00f3n de defectos por cuadr\u00edcula:\") print(defects_per_grid)  # Visualizaci\u00f3n plt.figure(figsize=(18, 8)) plt.bar(range(1, number_grids + 1), defects_per_grid, color=\"green\", edgecolor=\"yellow\") # L\u00ednea horizontal para la media te\u00f3rica plt.axhline(     y=lambda_,     color=\"red\",     linestyle=\"--\",     label=f\"Media esperada ({lambda_} defectos/cuadr\u00edcula)\", ) plt.title(\"Simulaci\u00f3n de defectos en la luna\") plt.xlabel(\"Cuadr\u00edcula (1 $m^2$)\") plt.ylabel(\"N\u00famero de defectos\") plt.legend() plt.show()  # Estad\u00edsticas de la simulaci\u00f3n print(\"\\nEstad\u00edsticas de la simulaci\u00f3n:\") print(f\"\\tDefectos totales en la luna: {np.sum(defects_per_grid)}\") print(     f\"\\tMedia de defectos por cuadr\u00edcula: {np.mean(defects_per_grid):.2f} defectos/m^2\" ) print(     f\"\\tDesviaci\u00f3n est\u00e1ndar de la simulaci\u00f3n: {np.std(defects_per_grid):.2f} defectos/m^2\" )"},{"location":"Contenido/11_Distribuci%C3%B3n%20de%20Poisson.html#distribucion-de-poisson","title":"DISTRIBUCI\u00d3N DE POISSON\u00b6","text":""},{"location":"Contenido/11_Distribuci%C3%B3n%20de%20Poisson.html#microbiologia","title":"Microbiolog\u00eda\u00b6","text":""},{"location":"Contenido/11_Distribuci%C3%B3n%20de%20Poisson.html#desintegracion-radioactiva","title":"Desintegraci\u00f3n radioactiva\u00b6","text":""},{"location":"Contenido/11_Distribuci%C3%B3n%20de%20Poisson.html#simulacion-de-llegadas-a-una-cola","title":"Simulaci\u00f3n de llegadas a una cola\u00b6","text":""},{"location":"Contenido/11_Distribuci%C3%B3n%20de%20Poisson.html#simulacion-de-defectos-en-una-luna-de-espejo","title":"Simulaci\u00f3n de defectos en una luna de espejo\u00b6","text":""},{"location":"Contenido/12_Distribuci%C3%B3n%20Geom%C3%A9trica.html","title":"12_DISTRIBUCI\u00d3N GEOM\u00c9TRICA","text":"In\u00a0[\u00a0]: Copied! <pre># Definimos probabilidad de \u00e9xito y n\u00famero de intentos\np = 0.8\nk = 3\n\n# Calculamos la probabilidad de 3 chips hasta el primer defectuoso\np_3 = (1 - p) ** (k - 1) * p\n\n# Informe del resultado\nprint(\n    f\"La probabilidad de seleccionar {k} chips hasta el primer defectuoso es {p_3:.4f}\"\n)\n</pre> # Definimos probabilidad de \u00e9xito y n\u00famero de intentos p = 0.8 k = 3  # Calculamos la probabilidad de 3 chips hasta el primer defectuoso p_3 = (1 - p) ** (k - 1) * p  # Informe del resultado print(     f\"La probabilidad de seleccionar {k} chips hasta el primer defectuoso es {p_3:.4f}\" ) <p>2\u00ba opci\u00f3n: Con la funci\u00f3n implementada en Scipy</p> In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nfrom scipy.stats import geom\n\n# Definimos probabilidad de \u00e9xito y n\u00famero de intentos\np = 0.8\nk = 3\n\n# Calculamos la probabilidad con la funci\u00f3n de Scipy\np_sci_3 = geom.pmf(p=p, k=k)\n\n# Informe del resultado\nprint(f\"La probabilidad de seleccionar {k} hasta el primer defectuoso es {p_sci_3:.4f}\")\n</pre> # Importamos las librer\u00edas import numpy as np from scipy.stats import geom  # Definimos probabilidad de \u00e9xito y n\u00famero de intentos p = 0.8 k = 3  # Calculamos la probabilidad con la funci\u00f3n de Scipy p_sci_3 = geom.pmf(p=p, k=k)  # Informe del resultado print(f\"La probabilidad de seleccionar {k} hasta el primer defectuoso es {p_sci_3:.4f}\") In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\n\n# Par\u00e1metros del modelo\np_failure = 0.05  # \u00c9xito\nk = 4\nn_simulations = 100\n\n# Generamos la distribuci\u00f3n y las simulaciones\ndist_geom = stats.geom(p_failure)\nsimulation = dist_geom.rvs(size=n_simulations, random_state=14)  # Fijamos la semilla\n\n# Informe de medias y medianas\nprint(f\"La media te\u00f3rica es {1/p_failure}\")\nprint(f\"La media de la simulaci\u00f3n es {np.mean(simulation)}\")\nprint()\nprint(f\"La mediana te\u00f3rica es {-np.log(2)/np.log(1-p_failure):.2f}\")\nprint(f\"La mediana de la simulaci\u00f3n es {np.median(simulation)}\")\nprint()\n\n# Creamos figura con subplots\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18, 6))\n\n# Gr\u00e1fico 1: Serie temporal de pruebas1\nax1.plot(range(n_simulations), simulation, \"b-\", alpha=0.6)\nax1.plot(\n    range(n_simulations),\n    np.ones(n_simulations) * np.mean(simulation),\n    \"r--\",\n    label=\"Media\",\n)\nax1.fill_between(\n    range(n_simulations),\n    np.mean(simulation) - np.std(simulation),\n    np.mean(simulation) - np.std(simulation),\n    alpha=0.2,\n    color=\"red\",\n)\nax1.set_xlabel(\"Repetici\u00f3n\")\nax1.set_ylabel(\"N\u00famero de pruebas hasta fallo\")\nax1.set_title(\"Serie temporal de pruebas\")\nax1.legend()\n\n# Histograma\nsns.histplot(data=simulation, ax=ax2, kde=False)\nax2.axvline(np.mean(simulation), color=\"r\", linestyle=\"--\", label=\"Media\")\nax2.axvline(np.median(simulation), color=\"g\", linestyle=\"--\", label=\"Mediana\")\nax2.set_xlabel(\"N\u00famero de pruebas hasta fallo\")\nax2.set_ylabel(\"Frecuencia\")\nax2.set_title(\"Distribuci\u00f3n de pruebas\")\nax2.legend()\n\n# Box plot\nax3.boxplot(simulation, vert=False)\nax3.set_xlabel(\"N\u00famero de pruebas hasta fallo\")\nax3.set_title(\"Box Plot de pruebas\")\n\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import scipy.stats as stats import matplotlib.pyplot as plt import seaborn as sns import random  # Par\u00e1metros del modelo p_failure = 0.05  # \u00c9xito k = 4 n_simulations = 100  # Generamos la distribuci\u00f3n y las simulaciones dist_geom = stats.geom(p_failure) simulation = dist_geom.rvs(size=n_simulations, random_state=14)  # Fijamos la semilla  # Informe de medias y medianas print(f\"La media te\u00f3rica es {1/p_failure}\") print(f\"La media de la simulaci\u00f3n es {np.mean(simulation)}\") print() print(f\"La mediana te\u00f3rica es {-np.log(2)/np.log(1-p_failure):.2f}\") print(f\"La mediana de la simulaci\u00f3n es {np.median(simulation)}\") print()  # Creamos figura con subplots fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18, 6))  # Gr\u00e1fico 1: Serie temporal de pruebas1 ax1.plot(range(n_simulations), simulation, \"b-\", alpha=0.6) ax1.plot(     range(n_simulations),     np.ones(n_simulations) * np.mean(simulation),     \"r--\",     label=\"Media\", ) ax1.fill_between(     range(n_simulations),     np.mean(simulation) - np.std(simulation),     np.mean(simulation) - np.std(simulation),     alpha=0.2,     color=\"red\", ) ax1.set_xlabel(\"Repetici\u00f3n\") ax1.set_ylabel(\"N\u00famero de pruebas hasta fallo\") ax1.set_title(\"Serie temporal de pruebas\") ax1.legend()  # Histograma sns.histplot(data=simulation, ax=ax2, kde=False) ax2.axvline(np.mean(simulation), color=\"r\", linestyle=\"--\", label=\"Media\") ax2.axvline(np.median(simulation), color=\"g\", linestyle=\"--\", label=\"Mediana\") ax2.set_xlabel(\"N\u00famero de pruebas hasta fallo\") ax2.set_ylabel(\"Frecuencia\") ax2.set_title(\"Distribuci\u00f3n de pruebas\") ax2.legend()  # Box plot ax3.boxplot(simulation, vert=False) ax3.set_xlabel(\"N\u00famero de pruebas hasta fallo\") ax3.set_title(\"Box Plot de pruebas\")  plt.show()"},{"location":"Contenido/12_Distribuci%C3%B3n%20Geom%C3%A9trica.html#12_distribucion-geometrica","title":"12_DISTRIBUCI\u00d3N GEOM\u00c9TRICA\u00b6","text":""},{"location":"Contenido/12_Distribuci%C3%B3n%20Geom%C3%A9trica.html#control-de-calidad","title":"Control de calidad\u00b6","text":""},{"location":"Contenido/12_Distribuci%C3%B3n%20Geom%C3%A9trica.html#pruebas-de-software","title":"Pruebas de software\u00b6","text":""},{"location":"Contenido/13_Distribuci%C3%B3n%20Hipergeom%C3%A9trica.html","title":"13 Distribuci\u00f3n Hipergeom\u00e9trica","text":"In\u00a0[\u00a0]: Copied! <pre># Graficar la funci\u00f3n masa de probabilidad\nimport numpy as np\nfrom scipy.stats import hypergeom\nimport matplotlib.pyplot as plt\n\n\ndef plot_hipergeom(N, K, n):\n    \"\"\"Dibuja la funci\u00f3n masa, con los argumentos:\n    N = Tama\u00f1o de la poblaci\u00f3n\n    K = \u00c9xitos en la poblaci\u00f3n\n    n = Tama\u00f1o de la muestra\n    \"\"\"\n    k = np.arange(0, min(n, K) + 1)  # Valores posibles\n    pmf = hypergeom.pmf(k, N, K, n)  # Probabilidades hipergeom\u00e9trica\n    cdf = hypergeom.cdf(k, N, K, n)  # Acumuladas hipergeom\u00e9trica\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(k, pmf, alpha=0.6, color=\"blue\", label=\"PMF\")\n    plt.plot(k, cdf, \"r-\", label=\"CDF\")\n    plt.title(f\"Distribuci\u00f3n Hipergeom\u00e9trica (N={N}, K={K}, n={n})\")\n    plt.xlabel(\"k \u00e9xitos en la muestra\")\n    plt.ylabel(\"Probabilidad\")\n    plt.legend()\n    plt.show()\n</pre> # Graficar la funci\u00f3n masa de probabilidad import numpy as np from scipy.stats import hypergeom import matplotlib.pyplot as plt   def plot_hipergeom(N, K, n):     \"\"\"Dibuja la funci\u00f3n masa, con los argumentos:     N = Tama\u00f1o de la poblaci\u00f3n     K = \u00c9xitos en la poblaci\u00f3n     n = Tama\u00f1o de la muestra     \"\"\"     k = np.arange(0, min(n, K) + 1)  # Valores posibles     pmf = hypergeom.pmf(k, N, K, n)  # Probabilidades hipergeom\u00e9trica     cdf = hypergeom.cdf(k, N, K, n)  # Acumuladas hipergeom\u00e9trica      plt.figure(figsize=(10, 6))     plt.bar(k, pmf, alpha=0.6, color=\"blue\", label=\"PMF\")     plt.plot(k, cdf, \"r-\", label=\"CDF\")     plt.title(f\"Distribuci\u00f3n Hipergeom\u00e9trica (N={N}, K={K}, n={n})\")     plt.xlabel(\"k \u00e9xitos en la muestra\")     plt.ylabel(\"Probabilidad\")     plt.legend()     plt.show() In\u00a0[\u00a0]: Copied! <pre>plot_hipergeom(20, 7, 5)\n</pre> plot_hipergeom(20, 7, 5) In\u00a0[\u00a0]: Copied! <pre>N = 100  # La poblaci\u00f3n son las piezas de la caja\nK = 10  # El \u00e9xito es que sea defectuoso\nn = 8  # La muestra que se escoge para inspeccionar\n\nplot_hipergeom(N, K, n)\n</pre> N = 100  # La poblaci\u00f3n son las piezas de la caja K = 10  # El \u00e9xito es que sea defectuoso n = 8  # La muestra que se escoge para inspeccionar  plot_hipergeom(N, K, n) In\u00a0[\u00a0]: Copied! <pre># Probabilidad de exactamente dos defectuosos\nprob_2_defect = hypergeom.pmf(2, N, K, n)\nprint(f\"La probabilidad de exactamente dos defectuosos es {prob_2_defect:.4f}\")\n</pre> # Probabilidad de exactamente dos defectuosos prob_2_defect = hypergeom.pmf(2, N, K, n) print(f\"La probabilidad de exactamente dos defectuosos es {prob_2_defect:.4f}\") In\u00a0[\u00a0]: Copied! <pre>k = np.arange(0, 9)  # Todos los valores de 0 a 10\nk2 = 2  # El valor 2\nk_2 = np.delete(k, 2)  # Todos los valores menos el 2\n\n# Dibujamos diferenciando P[X=2]\nplt.figure(figsize=(10, 6))\nplt.bar(k2, hypergeom.pmf(k2, N, K, n), alpha=0.6, color=\"red\", label=\"$P[X=2]$\")\nneq = \"$P[X \\\\neq 2]$\"\nplt.bar(\n    k_2, hypergeom.pmf(k_2, N, K, n), alpha=0.6, color=\"blue\", label=\"$P[X \\\\neq 2]$\"\n)\nplt.title(f\"Distribuci\u00f3n Hipergeom\u00e9trica (N={N}, K={K}, n={n})\")\nplt.xlabel(\"k defectuosos en la muestra\")\nplt.ylabel(\"Probabilidad\")\nplt.legend()\nplt.show()\n</pre> k = np.arange(0, 9)  # Todos los valores de 0 a 10 k2 = 2  # El valor 2 k_2 = np.delete(k, 2)  # Todos los valores menos el 2  # Dibujamos diferenciando P[X=2] plt.figure(figsize=(10, 6)) plt.bar(k2, hypergeom.pmf(k2, N, K, n), alpha=0.6, color=\"red\", label=\"$P[X=2]$\") neq = \"$P[X \\\\neq 2]$\" plt.bar(     k_2, hypergeom.pmf(k_2, N, K, n), alpha=0.6, color=\"blue\", label=\"$P[X \\\\neq 2]$\" ) plt.title(f\"Distribuci\u00f3n Hipergeom\u00e9trica (N={N}, K={K}, n={n})\") plt.xlabel(\"k defectuosos en la muestra\") plt.ylabel(\"Probabilidad\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Definimos los par\u00e1metros\nN = 200  # Poblaci\u00f3n\nK = 50  # El \u00e9xito es que tenga el alelo\nn = 10  # La muestra que se escoge para inspeccionar\n\n\"\"\" Dibujamos la funci\u00f3n de probabilidad (pmf) y distribuci\u00f3n (cdf)\n    con la funci\u00f3n definida antes \"\"\"\nplot_hipergeom(N, K, n)\n</pre> # Definimos los par\u00e1metros N = 200  # Poblaci\u00f3n K = 50  # El \u00e9xito es que tenga el alelo n = 10  # La muestra que se escoge para inspeccionar  \"\"\" Dibujamos la funci\u00f3n de probabilidad (pmf) y distribuci\u00f3n (cdf)     con la funci\u00f3n definida antes \"\"\" plot_hipergeom(N, K, n) In\u00a0[\u00a0]: Copied! <pre>prob_more_3 = 1 - hypergeom.cdf(3, N, K, n)\nprint(f\"La probabilidad de m\u00e1s de 3 personas con el alelo es {prob_more_3:.4f}\")\n</pre> prob_more_3 = 1 - hypergeom.cdf(3, N, K, n) print(f\"La probabilidad de m\u00e1s de 3 personas con el alelo es {prob_more_3:.4f}\") In\u00a0[\u00a0]: Copied! <pre># Dos arrays con los valores menores o iguales que 3 y mayores que 3\nk_up_3 = np.arange(0, 4)\nk_more_3 = np.arange(4, 11)\n\n# Probabilidades\npmf_up_3 = hypergeom.pmf(k_up_3, N, K, n)\npmf_more_3 = hypergeom.pmf(k_more_3, N, K, n)\n\n# Graficamos\nplt.figure(figsize=(10, 6))\nplt.bar(k_up_3, pmf_up_3, alpha=0.6, color=\"blue\", label=\"$P[X\\leq3]$\")\nplt.bar(k_more_3, pmf_more_3, alpha=0.6, color=\"red\", label=\"$P[X &gt; 3]$\")\nplt.title(f\"Distribuci\u00f3n Hipergeom\u00e9trica (N={N}, K={K}, n={n})\")\nplt.xlabel(\"k personas con el alelo en la muestra\")\nplt.ylabel(\"Probabilidad\")\nplt.legend()\nplt.show()\n</pre> # Dos arrays con los valores menores o iguales que 3 y mayores que 3 k_up_3 = np.arange(0, 4) k_more_3 = np.arange(4, 11)  # Probabilidades pmf_up_3 = hypergeom.pmf(k_up_3, N, K, n) pmf_more_3 = hypergeom.pmf(k_more_3, N, K, n)  # Graficamos plt.figure(figsize=(10, 6)) plt.bar(k_up_3, pmf_up_3, alpha=0.6, color=\"blue\", label=\"$P[X\\leq3]$\") plt.bar(k_more_3, pmf_more_3, alpha=0.6, color=\"red\", label=\"$P[X &gt; 3]$\") plt.title(f\"Distribuci\u00f3n Hipergeom\u00e9trica (N={N}, K={K}, n={n})\") plt.xlabel(\"k personas con el alelo en la muestra\") plt.ylabel(\"Probabilidad\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nfrom scipy.stats import hypergeom\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Definimos los par\u00e1metros de la distribuci\u00f3n\nN = 50  # Total de jugadores disponibles\nK = 20  # Tiradores efectivos\nn = 12  # Tama\u00f1o del equipo\n\n# Simulaci\u00f3n de 1000 selecciones de equipo\nnum_simulations = 1000\nresults = []\n\nfor _ in range(num_simulations):\n    # Crear poblaci\u00f3n\n    population = np.array([\"Tirador\"] * K + [\"No_tirador\"] * (N - K))\n    np.random.shuffle(population)\n    # Seleccionar equipo\n    team = population[:n]\n    triple_players = np.sum(team == \"Tirador\")\n    results.append(triple_players)\n\n# Creamos arrays con las listas\nresults = np.array(results)\nmean_triple_players = np.mean(results)\n\n# Visualizaci\u00f3n\nplt.figure(figsize=(10, 6))\nsns.histplot(results, stat=\"probability\")\nplt.axvline(\n    mean_triple_players,\n    color=\"r\",\n    linestyle=\"--\",\n    label=f\"Media: {mean_triple_players:.2f}\",\n)\nplt.title(\"Distribuci\u00f3n de Tiradores por Equipo\")\nplt.xlabel(\"N\u00famero de Tiradores\")\nplt.ylabel(\"Probabilidad\")\nplt.legend()\nplt.show()\n\n# Comparaci\u00f3n con valores te\u00f3ricos\nk = np.arange(0, n + 1)\npmf_k = hypergeom.pmf(k, N, K, n)\n\nprint(f\"\\nMedia te\u00f3rica: {n * (K/N):.2f}\")\nprint(f\"Media simulada: {mean_triple_players:.2f}\")\n</pre> import numpy as np from scipy.stats import hypergeom import matplotlib.pyplot as plt import seaborn as sns  # Definimos los par\u00e1metros de la distribuci\u00f3n N = 50  # Total de jugadores disponibles K = 20  # Tiradores efectivos n = 12  # Tama\u00f1o del equipo  # Simulaci\u00f3n de 1000 selecciones de equipo num_simulations = 1000 results = []  for _ in range(num_simulations):     # Crear poblaci\u00f3n     population = np.array([\"Tirador\"] * K + [\"No_tirador\"] * (N - K))     np.random.shuffle(population)     # Seleccionar equipo     team = population[:n]     triple_players = np.sum(team == \"Tirador\")     results.append(triple_players)  # Creamos arrays con las listas results = np.array(results) mean_triple_players = np.mean(results)  # Visualizaci\u00f3n plt.figure(figsize=(10, 6)) sns.histplot(results, stat=\"probability\") plt.axvline(     mean_triple_players,     color=\"r\",     linestyle=\"--\",     label=f\"Media: {mean_triple_players:.2f}\", ) plt.title(\"Distribuci\u00f3n de Tiradores por Equipo\") plt.xlabel(\"N\u00famero de Tiradores\") plt.ylabel(\"Probabilidad\") plt.legend() plt.show()  # Comparaci\u00f3n con valores te\u00f3ricos k = np.arange(0, n + 1) pmf_k = hypergeom.pmf(k, N, K, n)  print(f\"\\nMedia te\u00f3rica: {n * (K/N):.2f}\") print(f\"Media simulada: {mean_triple_players:.2f}\") In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"Contenido/13_Distribuci%C3%B3n%20Hipergeom%C3%A9trica.html#13_distribucion-hipergeometrica","title":"13_DISTRIBUCI\u00d3N HIPERGEOM\u00c9TRICA\u00b6","text":""},{"location":"Contenido/13_Distribuci%C3%B3n%20Hipergeom%C3%A9trica.html#control-de-calidad","title":"Control de calidad\u00b6","text":""},{"location":"Contenido/13_Distribuci%C3%B3n%20Hipergeom%C3%A9trica.html#genetica","title":"Gen\u00e9tica\u00b6","text":""},{"location":"Contenido/13_Distribuci%C3%B3n%20Hipergeom%C3%A9trica.html#simulacion-en-ciencias-del-deporte","title":"Simulaci\u00f3n en ciencias del deporte\u00b6","text":""},{"location":"Contenido/14_Distribuci%C3%B3n%20Uniforme%20Continua.html","title":"14_DISTRIBUCI\u00d3N UNIFORME CONTINUA","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos la funci\u00f3n de distribuci\u00f3n de scipy\nfrom scipy.stats import uniform\n\n# Par\u00e1metros de la distribuci\u00f3n\na, b = [0, 10]\n\n# Generamos una posici\u00f3n inicial\nstart_position = uniform(loc=a, scale=b - a).rvs()\nprint(f\"La posici\u00f3n inicial del robot es {start_position:.2f} metros\")\n</pre> # Importamos la funci\u00f3n de distribuci\u00f3n de scipy from scipy.stats import uniform  # Par\u00e1metros de la distribuci\u00f3n a, b = [0, 10]  # Generamos una posici\u00f3n inicial start_position = uniform(loc=a, scale=b - a).rvs() print(f\"La posici\u00f3n inicial del robot es {start_position:.2f} metros\") In\u00a0[\u00a0]: Copied! <pre>p_2_8 = uniform(loc=a, scale=b - a).cdf(8) - uniform(loc=a, scale=b - a).cdf(2)\nprint(f\"La probabilidad de que el robot est\u00e9 entre el 2\u00ba y 8\u00ba metro es {p_2_8:.4f}\")\n</pre> p_2_8 = uniform(loc=a, scale=b - a).cdf(8) - uniform(loc=a, scale=b - a).cdf(2) print(f\"La probabilidad de que el robot est\u00e9 entre el 2\u00ba y 8\u00ba metro es {p_2_8:.4f}\") In\u00a0[\u00a0]: Copied! <pre>import random\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Configuraci\u00f3n inicial\nrange_temperatures = (15, 20)  # Rango de temperaturas en grados Celsius\ntotal_time = 60  # Duraci\u00f3n del experimento en minutos\nmeasures = 60  # N\u00famero de mediciones (una cada minuto)\n\n# Simular temperaturas uniformemente distribuidas\ntemperatures = [random.uniform(*range_temperatures) for _ in range(measures)]\n\n# Estad\u00edsticas de las temperaturas\ntemp_min = min(temperatures)\ntemp_max = max(temperatures)\ntemp_mean = np.mean(temperatures)\n\nprint(f\"Temperatura m\u00ednima: {temp_min:.2f} \u00b0C\")\nprint(f\"Temperatura m\u00e1xima: {temp_max:.2f} \u00b0C\")\nprint(f\"Temperatura promedio: {temp_mean:.2f} \u00b0C\")\n\n# Comparaci\u00f3n con un rango seguro\nsafe_range = (16.5, 18.5)\nsafe_temperatures = [\n    temp for temp in temperatures if safe_range[0] &lt;= temp &lt;= safe_range[1]\n]\n\n# Porcentaje de mediciones seguras\npercentage_safe = (len(safe_temperatures) / len(temperatures)) * 100\nprint(f\"Porcentaje de temperaturas dentro del rango seguro: {percentage_safe:.2f}%\")\nprint()\n\n# Graficar las temperaturas a lo largo del tiempo\ntime = np.linspace(0, total_time, measures)\n\nplt.figure(figsize=(10, 6))\nplt.plot(time, temperatures, label=\"Temperaturas simuladas\", color=\"blue\", marker=\"o\")\nplt.axhline(\n    y=range_temperatures[0], color=\"green\", linestyle=\"--\", label=\"L\u00edmite inferior\"\n)\nplt.axhline(\n    y=range_temperatures[1], color=\"red\", linestyle=\"--\", label=\"L\u00edmite superior\"\n)\nplt.axhline(\n    y=safe_range[0],\n    color=\"purple\",\n    linewidth=2,\n    linestyle=\":\",\n    label=\"Rango seguro (m\u00edn)\",\n)\nplt.axhline(\n    y=safe_range[1],\n    color=\"purple\",\n    linewidth=2,\n    linestyle=\":\",\n    label=\"Rango seguro (m\u00e1x)\",\n)\nplt.title(\"Simulaci\u00f3n de Temperaturas del Sistema\")\nplt.xlabel(\"Tiempo (minutos)\")\nplt.ylabel(\"Temperatura (\u00b0C)\")\nplt.legend()\nplt.show()\n</pre> import random import numpy as np import matplotlib.pyplot as plt  # Configuraci\u00f3n inicial range_temperatures = (15, 20)  # Rango de temperaturas en grados Celsius total_time = 60  # Duraci\u00f3n del experimento en minutos measures = 60  # N\u00famero de mediciones (una cada minuto)  # Simular temperaturas uniformemente distribuidas temperatures = [random.uniform(*range_temperatures) for _ in range(measures)]  # Estad\u00edsticas de las temperaturas temp_min = min(temperatures) temp_max = max(temperatures) temp_mean = np.mean(temperatures)  print(f\"Temperatura m\u00ednima: {temp_min:.2f} \u00b0C\") print(f\"Temperatura m\u00e1xima: {temp_max:.2f} \u00b0C\") print(f\"Temperatura promedio: {temp_mean:.2f} \u00b0C\")  # Comparaci\u00f3n con un rango seguro safe_range = (16.5, 18.5) safe_temperatures = [     temp for temp in temperatures if safe_range[0] &lt;= temp &lt;= safe_range[1] ]  # Porcentaje de mediciones seguras percentage_safe = (len(safe_temperatures) / len(temperatures)) * 100 print(f\"Porcentaje de temperaturas dentro del rango seguro: {percentage_safe:.2f}%\") print()  # Graficar las temperaturas a lo largo del tiempo time = np.linspace(0, total_time, measures)  plt.figure(figsize=(10, 6)) plt.plot(time, temperatures, label=\"Temperaturas simuladas\", color=\"blue\", marker=\"o\") plt.axhline(     y=range_temperatures[0], color=\"green\", linestyle=\"--\", label=\"L\u00edmite inferior\" ) plt.axhline(     y=range_temperatures[1], color=\"red\", linestyle=\"--\", label=\"L\u00edmite superior\" ) plt.axhline(     y=safe_range[0],     color=\"purple\",     linewidth=2,     linestyle=\":\",     label=\"Rango seguro (m\u00edn)\", ) plt.axhline(     y=safe_range[1],     color=\"purple\",     linewidth=2,     linestyle=\":\",     label=\"Rango seguro (m\u00e1x)\", ) plt.title(\"Simulaci\u00f3n de Temperaturas del Sistema\") plt.xlabel(\"Tiempo (minutos)\") plt.ylabel(\"Temperatura (\u00b0C)\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"Contenido/14_Distribuci%C3%B3n%20Uniforme%20Continua.html#14_distribucion-uniforme-continua","title":"14_DISTRIBUCI\u00d3N UNIFORME CONTINUA\u00b6","text":""},{"location":"Contenido/14_Distribuci%C3%B3n%20Uniforme%20Continua.html#posicion-inicial-de-un-robot","title":"Posici\u00f3n inicial de un robot\u00b6","text":""},{"location":"Contenido/14_Distribuci%C3%B3n%20Uniforme%20Continua.html#simulacion-de-temperaturas-en-un-sistema","title":"Simulaci\u00f3n de temperaturas en un sistema\u00b6","text":""},{"location":"Contenido/15_Distribuci%C3%B3n%20Exponencial.html","title":"15_DISTRIBUCI\u00d3N EXPONENCIAL","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos los paquetes\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Definimos los par\u00e1metros lambda para las distribuciones que queremos representar\nlambdas = [0.5, 1, 2, 3]\n\n# Graficamos las funciones de densidad te\u00f3ricas para estos par\u00e1metros\nplt.figure(figsize=(6, 4))\nx = np.linspace(0, 5, 10000)\nfor lamb in lambdas:  # Un curva para cada lambda\n    plt.plot(x, lamb * np.exp(-lamb * x), label=f\"$\\lambda$ = {lamb}\")\n\n# Mejoramos el gr\u00e1fico\nplt.xlabel(\"Valor\")\nplt.xlim([0, 5])\nplt.ylabel(\"Densidad  de Probabilidad\")\nplt.title(\"Densidad de Distribuciones Exponenciales Te\u00f3ricas\")\nplt.legend()\nplt.show\n</pre> # Importamos los paquetes import numpy as np import seaborn as sns import matplotlib.pyplot as plt  # Definimos los par\u00e1metros lambda para las distribuciones que queremos representar lambdas = [0.5, 1, 2, 3]  # Graficamos las funciones de densidad te\u00f3ricas para estos par\u00e1metros plt.figure(figsize=(6, 4)) x = np.linspace(0, 5, 10000) for lamb in lambdas:  # Un curva para cada lambda     plt.plot(x, lamb * np.exp(-lamb * x), label=f\"$\\lambda$ = {lamb}\")  # Mejoramos el gr\u00e1fico plt.xlabel(\"Valor\") plt.xlim([0, 5]) plt.ylabel(\"Densidad  de Probabilidad\") plt.title(\"Densidad de Distribuciones Exponenciales Te\u00f3ricas\") plt.legend() plt.show In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nfrom scipy.stats import expon\nimport matplotlib.pyplot as plt\n\n# Graficamos la funci\u00f3n de densidad\nprint(\"Ejemplo en Ingenier\u00eda de Fiabilidad\")\nplt.figure(figsize=(6, 4))\nx = np.linspace(0, 10, 100)\n\n# expon.pdf devuelve los valores de la funci\u00f3n de densidad para cada valor del array x\nplt.plot(x, expon.pdf(x, scale=1 / 0.5), \"r-\", linewidth=2, label=\"$\\lambda = 0.5$\")\nplt.xlabel(\"Tiempo de Vida (a\u00f1os)\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.title(\"Densidad de $Exp(0.5)$\")\nplt.legend()\nplt.show()\n</pre> import numpy as np from scipy.stats import expon import matplotlib.pyplot as plt  # Graficamos la funci\u00f3n de densidad print(\"Ejemplo en Ingenier\u00eda de Fiabilidad\") plt.figure(figsize=(6, 4)) x = np.linspace(0, 10, 100)  # expon.pdf devuelve los valores de la funci\u00f3n de densidad para cada valor del array x plt.plot(x, expon.pdf(x, scale=1 / 0.5), \"r-\", linewidth=2, label=\"$\\lambda = 0.5$\") plt.xlabel(\"Tiempo de Vida (a\u00f1os)\") plt.ylabel(\"Densidad de Probabilidad\") plt.title(\"Densidad de $Exp(0.5)$\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre>prob_mas_2_anos = 1 - expon.cdf(\n    2, scale=1 / 0.5\n)  # expon.cdf devuelve la probabilidad acumulada de menos de 2, la integral\nprint(\n    f\"La probabilidad de que un componente tenga un tiempo de vida mayor a 2 a\u00f1os es: {prob_mayor_2_anos:.4f}\"\n)\n</pre> prob_mas_2_anos = 1 - expon.cdf(     2, scale=1 / 0.5 )  # expon.cdf devuelve la probabilidad acumulada de menos de 2, la integral print(     f\"La probabilidad de que un componente tenga un tiempo de vida mayor a 2 a\u00f1os es: {prob_mayor_2_anos:.4f}\" ) In\u00a0[\u00a0]: Copied! <pre># Gr\u00e1fica de la funci\u00f3n de densidad y el \u00e1rea de la probabilidad\nplt.figure(figsize=(6, 4))\nx = np.linspace(0, 10, 100)\n\n# expon.pdf devuelve el valor de la funci\u00f3n de densidad\nplt.plot(x, expon.pdf(x, scale=1 / 0.5), \"r-\", linewidth=2, label=\"$Exp(0.5)$\")\nplt.fill_between(\n    x[x &gt;= 2],\n    expon.pdf(x[x &gt;= 2], scale=1 / 0.5),\n    alpha=0.6,\n    label=\"\u00c1rea de Probabilidad\",\n)\nplt.xlabel(\"Tiempo de Vida (a\u00f1os)\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.title(\"Densidad de $Exp(0.5)$ y $P[X&gt;2]$\")\nplt.legend()\nplt.show()\n</pre> # Gr\u00e1fica de la funci\u00f3n de densidad y el \u00e1rea de la probabilidad plt.figure(figsize=(6, 4)) x = np.linspace(0, 10, 100)  # expon.pdf devuelve el valor de la funci\u00f3n de densidad plt.plot(x, expon.pdf(x, scale=1 / 0.5), \"r-\", linewidth=2, label=\"$Exp(0.5)$\") plt.fill_between(     x[x &gt;= 2],     expon.pdf(x[x &gt;= 2], scale=1 / 0.5),     alpha=0.6,     label=\"\u00c1rea de Probabilidad\", ) plt.xlabel(\"Tiempo de Vida (a\u00f1os)\") plt.ylabel(\"Densidad de Probabilidad\") plt.title(\"Densidad de $Exp(0.5)$ y $P[X&gt;2]$\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Calculamos la probabilidad\nprob_entre_1_3_anos = expon.cdf(3, scale=1 / 0.5) - expon.cdf(1, scale=1 / 0.5)\nprint(\n    f\"La probabilidad de que un componente tenga un tiempo de vida entre 1 y 3 a\u00f1os es: {prob_entre_1_3_anos:.4f}\"\n)\nprint()\n# Dibujamos la funci\u00f3n de densidad\nplt.plot(x, expon.pdf(x, scale=1 / 0.5), \"r-\", linewidth=2, label=\"$Exp(0.5)$\")\n\n# Definimos el intervalo\nx_1_3 = x[(1 &lt;= x) &amp; (x &lt;= 3)]\n\n# Graficamos el \u00e1rea\nplt.fill_between(\n    x1, expon.pdf(x1, scale=1 / 0.5), alpha=0.6, label=\"\u00c1rea de Probabilidad\"\n)\nplt.xlabel(\"Tiempo de Vida (a\u00f1os)\")\nplt.xticks(ticks=range(11))  # A\u00f1adimos ticks en el eje OX\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.title(\"Densidad de $Exp(0.5)$ y $P[1\\leq X\\leq 3]$\")\nplt.legend()\nplt.show()\n</pre> # Calculamos la probabilidad prob_entre_1_3_anos = expon.cdf(3, scale=1 / 0.5) - expon.cdf(1, scale=1 / 0.5) print(     f\"La probabilidad de que un componente tenga un tiempo de vida entre 1 y 3 a\u00f1os es: {prob_entre_1_3_anos:.4f}\" ) print() # Dibujamos la funci\u00f3n de densidad plt.plot(x, expon.pdf(x, scale=1 / 0.5), \"r-\", linewidth=2, label=\"$Exp(0.5)$\")  # Definimos el intervalo x_1_3 = x[(1 &lt;= x) &amp; (x &lt;= 3)]  # Graficamos el \u00e1rea plt.fill_between(     x1, expon.pdf(x1, scale=1 / 0.5), alpha=0.6, label=\"\u00c1rea de Probabilidad\" ) plt.xlabel(\"Tiempo de Vida (a\u00f1os)\") plt.xticks(ticks=range(11))  # A\u00f1adimos ticks en el eje OX plt.ylabel(\"Densidad de Probabilidad\") plt.title(\"Densidad de $Exp(0.5)$ y $P[1\\leq X\\leq 3]$\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos los paquetes\nimport numpy as np\nfrom scipy.stats import expon\nimport matplotlib.pyplot as plt\n\n# Definimos los par\u00e1metros del modelo y generamos los datos\nlamb = 0.2\nn_observaciones = 1000\ndatos = expon.rvs(scale=1 / lamb, size=n_observaciones)\n</pre> # Importamos los paquetes import numpy as np from scipy.stats import expon import matplotlib.pyplot as plt  # Definimos los par\u00e1metros del modelo y generamos los datos lamb = 0.2 n_observaciones = 1000 datos = expon.rvs(scale=1 / lamb, size=n_observaciones) In\u00a0[\u00a0]: Copied! <pre># Histograma con los datos\nx = np.linspace(0, max(datos), 1000)\nplt.figure(figsize=(6, 4))\nplt.hist(datos, bins=30, density=True, alpha=0.5, color=\"red\")\nplt.xlabel(\"Tiempo entre Infecciones (d\u00edas)\")\nplt.title('Histograma de \"datos\"')\nplt.show()\n</pre> # Histograma con los datos x = np.linspace(0, max(datos), 1000) plt.figure(figsize=(6, 4)) plt.hist(datos, bins=30, density=True, alpha=0.5, color=\"red\") plt.xlabel(\"Tiempo entre Infecciones (d\u00edas)\") plt.title('Histograma de \"datos\"') plt.show() In\u00a0[\u00a0]: Copied! <pre>\"\"\"Calculamos los par\u00e1metros. Recordad que los datos est\u00e1n generados a partir de un par\u00e1metro lambda = 0.2\"\"\"\n\nbeta = datos.mean()\nlamb = 1 / beta\nprint(f\"El valor del par\u00e1metro lambda es {lamb:.4f} y la escala o media es {beta:.4f}\")\n</pre> \"\"\"Calculamos los par\u00e1metros. Recordad que los datos est\u00e1n generados a partir de un par\u00e1metro lambda = 0.2\"\"\"  beta = datos.mean() lamb = 1 / beta print(f\"El valor del par\u00e1metro lambda es {lamb:.4f} y la escala o media es {beta:.4f}\") In\u00a0[\u00a0]: Copied! <pre># Histograma con los datos y dibujamos la gr\u00e1fica de la funci\u00f3n de densidad emp\u00edrica\nx = np.linspace(0, max(datos), 1000)\nplt.figure(figsize=(6, 4))\nplt.plot(\n    x, expon.pdf(x, scale=1 / lamb), \"g-\", linewidth=2, label=f\"$\\lambda$ = {lamb:.4f}\"\n)\nplt.hist(datos, bins=30, density=True, alpha=0.5, color=\"red\")\nplt.xlabel(\"Tiempo entre Infecciones (d\u00edas)\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.title(\"Histograma y funci\u00f3n de densidad emp\u00edrica\")\nplt.legend()\nplt.show()\n</pre> # Histograma con los datos y dibujamos la gr\u00e1fica de la funci\u00f3n de densidad emp\u00edrica x = np.linspace(0, max(datos), 1000) plt.figure(figsize=(6, 4)) plt.plot(     x, expon.pdf(x, scale=1 / lamb), \"g-\", linewidth=2, label=f\"$\\lambda$ = {lamb:.4f}\" ) plt.hist(datos, bins=30, density=True, alpha=0.5, color=\"red\") plt.xlabel(\"Tiempo entre Infecciones (d\u00edas)\") plt.ylabel(\"Densidad de Probabilidad\") plt.title(\"Histograma y funci\u00f3n de densidad emp\u00edrica\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Calculamos la probabilidad\nprob_mas_5_dias = 1 - expon.cdf(5, scale=1 / lamb)\nprint(f\"La probabilidad de que pasen m\u00e1s de 5 d\u00edas es {prob_mas_5_dias:.4f}\")\n</pre> # Calculamos la probabilidad prob_mas_5_dias = 1 - expon.cdf(5, scale=1 / lamb) print(f\"La probabilidad de que pasen m\u00e1s de 5 d\u00edas es {prob_mas_5_dias:.4f}\") In\u00a0[\u00a0]: Copied! <pre># Dibujamos la funci\u00f3n de densidad\nplt.plot(\n    x, expon.pdf(x, scale=1 / lamb), \"g-\", linewidth=2, label=f\"$\\lambda$ = {lamb:.4f}\"\n)\n\n# Definimos el intervalo\nx_mas_5 = x[5 &lt; x]\n\n# Graficamos el \u00e1rea\nplt.fill_between(\n    x_mas_5, expon.pdf(x_mas_5, scale=1 / lamb), alpha=0.6, label=\"\u00c1rea de Probabilidad\"\n)\nplt.xlabel(\"Tiempo entre Infecciones (d\u00edas)\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.title(\"Funci\u00f3n de densidad y $P[X\\geq 5]$\")\nplt.legend()\nplt.show()\n</pre> # Dibujamos la funci\u00f3n de densidad plt.plot(     x, expon.pdf(x, scale=1 / lamb), \"g-\", linewidth=2, label=f\"$\\lambda$ = {lamb:.4f}\" )  # Definimos el intervalo x_mas_5 = x[5 &lt; x]  # Graficamos el \u00e1rea plt.fill_between(     x_mas_5, expon.pdf(x_mas_5, scale=1 / lamb), alpha=0.6, label=\"\u00c1rea de Probabilidad\" ) plt.xlabel(\"Tiempo entre Infecciones (d\u00edas)\") plt.ylabel(\"Densidad de Probabilidad\") plt.title(\"Funci\u00f3n de densidad y $P[X\\geq 5]$\") plt.legend() plt.show()"},{"location":"Contenido/15_Distribuci%C3%B3n%20Exponencial.html#15_distribucion-exponencial","title":"15_DISTRIBUCI\u00d3N EXPONENCIAL\u00b6","text":""},{"location":"Contenido/15_Distribuci%C3%B3n%20Exponencial.html#ingenieria-de-fiabilidad","title":"Ingenier\u00eda de Fiabilidad\u00b6","text":""},{"location":"Contenido/15_Distribuci%C3%B3n%20Exponencial.html#epidemiologia","title":"Epidemiolog\u00eda\u00b6","text":""},{"location":"Contenido/16_Distribuci%C3%B3n%20Weibull.html","title":"16_DISTRIBUCI\u00d3N WEIBULL","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import weibull_min\n\n# Valores de los par\u00e1metros para cada distribuci\u00f3n Weibull\nparametros = [\n    (0.5, 1000),  # Distribuci\u00f3n con k &lt; 1 (alta tasa de fallo al inicio)\n    (1.5, 1000),  # Distribuci\u00f3n con k &gt; 1 (tasa de fallo creciente, desgaste)\n    (1.5, 2000),  # Mayor escala (lambda) = distribuci\u00f3n desplazada a la derecha\n    (2.5, 1500),  # k alto = curva m\u00e1s pronunciada, lambda intermedia\n]\n\n# Rango de valores de x\nx = np.linspace(0, 5000, 1000)\n\n# Gr\u00e1fica de cada distribuci\u00f3n\nplt.figure(figsize=(6, 4))\nfor k, beta in parametros:\n    pdf = weibull_min.pdf(x, k, scale=beta)\n    plt.plot(x, pdf, label=f\"k={k} beta={beta}\")\n\n# Personalizaci\u00f3n del gr\u00e1fico\nplt.title(\"Distribuciones Weibull con Diferentes Par\u00e1metros\")\nplt.xlabel(\"Tiempo (x)\")\nplt.ylabel(\"Densidad de Probabilidad (PDF)\")\nplt.legend()\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import weibull_min  # Valores de los par\u00e1metros para cada distribuci\u00f3n Weibull parametros = [     (0.5, 1000),  # Distribuci\u00f3n con k &lt; 1 (alta tasa de fallo al inicio)     (1.5, 1000),  # Distribuci\u00f3n con k &gt; 1 (tasa de fallo creciente, desgaste)     (1.5, 2000),  # Mayor escala (lambda) = distribuci\u00f3n desplazada a la derecha     (2.5, 1500),  # k alto = curva m\u00e1s pronunciada, lambda intermedia ]  # Rango de valores de x x = np.linspace(0, 5000, 1000)  # Gr\u00e1fica de cada distribuci\u00f3n plt.figure(figsize=(6, 4)) for k, beta in parametros:     pdf = weibull_min.pdf(x, k, scale=beta)     plt.plot(x, pdf, label=f\"k={k} beta={beta}\")  # Personalizaci\u00f3n del gr\u00e1fico plt.title(\"Distribuciones Weibull con Diferentes Par\u00e1metros\") plt.xlabel(\"Tiempo (x)\") plt.ylabel(\"Densidad de Probabilidad (PDF)\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos los paquetes\nimport numpy as np\nfrom scipy.stats import weibull_min\nfrom scipy.special import gamma\nimport matplotlib.pyplot as plt\n\n# Definimos los par\u00e1metros y generamos los valores de x\nk = 1.5  # par\u00e1metro de forma (desgaste)\nbeta = 5000  # par\u00e1metro de escala\nx = np.linspace(0, 15000, 1000)\n\n# Calculamos la media, mediana y varianza\nmedia = beta * gamma(1 + 1 / k)\nvarianza = beta**2 * (gamma(1 + 2 / k) - (gamma(1 + 1 / k)) ** 2)\ndesviacion_tipica = np.sqrt(varianza)\nmediana = beta * np.log(2) ** (1 / k)\nprint(\n    f\"La media es de {media:.2f} horas y la desviaci\u00f3n t\u00edpica de {desviacion_tipica:.2f} horas\"\n)\nprint(f\"El 50% de los componentes fallar\u00e1n antes de {mediana:.2f} horas\")\nprint()\n\n# Dibujamos la distribuci\u00f3n\npdf = weibull_min.pdf(x, k, scale=beta)\nplt.figure(figsize=(6, 4))\nplt.plot(x, pdf, \"b-\", label=f\"k={k} beta={beta}\")\n\n# Personalizamos del gr\u00e1fico\nplt.title(f\"Weibull k = {k}, beta = {beta}\")\nplt.xlabel(\"Tiempo en horas\")\nplt.ylabel(\"Densidad de Probabilidad (PDF)\")\nplt.legend()\nplt.show()\n</pre> # Importamos los paquetes import numpy as np from scipy.stats import weibull_min from scipy.special import gamma import matplotlib.pyplot as plt  # Definimos los par\u00e1metros y generamos los valores de x k = 1.5  # par\u00e1metro de forma (desgaste) beta = 5000  # par\u00e1metro de escala x = np.linspace(0, 15000, 1000)  # Calculamos la media, mediana y varianza media = beta * gamma(1 + 1 / k) varianza = beta**2 * (gamma(1 + 2 / k) - (gamma(1 + 1 / k)) ** 2) desviacion_tipica = np.sqrt(varianza) mediana = beta * np.log(2) ** (1 / k) print(     f\"La media es de {media:.2f} horas y la desviaci\u00f3n t\u00edpica de {desviacion_tipica:.2f} horas\" ) print(f\"El 50% de los componentes fallar\u00e1n antes de {mediana:.2f} horas\") print()  # Dibujamos la distribuci\u00f3n pdf = weibull_min.pdf(x, k, scale=beta) plt.figure(figsize=(6, 4)) plt.plot(x, pdf, \"b-\", label=f\"k={k} beta={beta}\")  # Personalizamos del gr\u00e1fico plt.title(f\"Weibull k = {k}, beta = {beta}\") plt.xlabel(\"Tiempo en horas\") plt.ylabel(\"Densidad de Probabilidad (PDF)\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre>t = 4000\nprob_fallo = weibull_min.cdf(t, k, scale=beta)\nprint(f\"La probabilidad de fallo antes de las {t} horas es {prob_fallo:.4f}\")\n</pre> t = 4000 prob_fallo = weibull_min.cdf(t, k, scale=beta) print(f\"La probabilidad de fallo antes de las {t} horas es {prob_fallo:.4f}\") In\u00a0[\u00a0]: Copied! <pre># Gr\u00e1fica de la funci\u00f3n de densidad y el \u00e1rea de la probabilidad\nplt.figure(figsize=(6, 4))\nx = np.linspace(0, 15000, 1000)\n\n# weibull_min.pdf devuelve el valor de la funci\u00f3n de densidad\nplt.plot(\n    x,\n    weibull_min.pdf(x, k, scale=beta),\n    \"b-\",\n    linewidth=2,\n    label=\"k = 1.5, beta = 5000\",\n)\nplt.fill_between(\n    x[x &lt; 4000],\n    weibull_min.pdf(x[x &lt; 4000], k, scale=beta),\n    alpha=0.6,\n    color=\"red\",\n    label=\"\u00c1rea de Probabilidad\",\n)\nplt.xlabel(\"Horas de funcionamiento\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.title(\"Densidad y $P[X&lt; 4000]$\")\nplt.legend()\nplt.show()\n</pre> # Gr\u00e1fica de la funci\u00f3n de densidad y el \u00e1rea de la probabilidad plt.figure(figsize=(6, 4)) x = np.linspace(0, 15000, 1000)  # weibull_min.pdf devuelve el valor de la funci\u00f3n de densidad plt.plot(     x,     weibull_min.pdf(x, k, scale=beta),     \"b-\",     linewidth=2,     label=\"k = 1.5, beta = 5000\", ) plt.fill_between(     x[x &lt; 4000],     weibull_min.pdf(x[x &lt; 4000], k, scale=beta),     alpha=0.6,     color=\"red\",     label=\"\u00c1rea de Probabilidad\", ) plt.xlabel(\"Horas de funcionamiento\") plt.ylabel(\"Densidad de Probabilidad\") plt.title(\"Densidad y $P[X&lt; 4000]$\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos los paquetes\nimport numpy as np\nfrom scipy.stats import weibull_min\nfrom scipy.special import gamma\nimport matplotlib.pyplot as plt\n\n# Definimos los par\u00e1metros y generamos los valores de x\nk = 2  # par\u00e1metro de forma (desgaste)\nbeta = 10  # par\u00e1metro de escala\nx = np.linspace(0, 25, 100)\n\n# Calculamos media, mediana y varianza\nmedia = beta * gamma(1 + 1 / k)\nvarianza = beta**2 * (gamma(1 + 2 / k) - (gamma(1 + 1 / k)) ** 2)\ndesviacion_tipica = np.sqrt(varianza)\nmediana = beta * np.log(2) ** (1 / k)\nprint(\n    f\"La media es de {media:.2f} m/s y la desviaci\u00f3n t\u00edpica de {desviacion_tipica:.2f} m/s\"\n)\nprint(f\"En el 50% de las mediciones el viento ser\u00e1 inferior a {mediana:.2f} m/s\")\n\n# Calculamos la probabilidad de que la velocidad sea inferior a 7 m/s\nt = 7\nprob_ = weibull_min.cdf(t, k, scale=beta)  # weibull_min.cdf devuelve la probabilidad\nprint(\n    f\"La probabilidad de que la velocidad del viento sea inferior a {t} m/s es {prob_:.4f}\"\n)\nprint()\n\n# weibull_min.pdf devuelve la densidad\npdf = weibull_min.pdf(x, k, scale=beta)\n# Graficamos\nplt.figure(figsize=(6, 4))\nplt.plot(x, pdf, \"b-\", linewidth=2, label=\"k = 2, beta =10\")\nplt.fill_between(\n    x[x &lt; 7],\n    weibull_min.pdf(x[x &lt; 7], k, scale=beta),\n    alpha=0.6,\n    color=\"red\",\n    label=\"\u00c1rea de Probabilidad\",\n)\nplt.xlabel(\"Velocidad (m/s)\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.title(\"Densidad y $P[X&lt;7]$\")\nplt.legend()\nplt.show()\n</pre> # Importamos los paquetes import numpy as np from scipy.stats import weibull_min from scipy.special import gamma import matplotlib.pyplot as plt  # Definimos los par\u00e1metros y generamos los valores de x k = 2  # par\u00e1metro de forma (desgaste) beta = 10  # par\u00e1metro de escala x = np.linspace(0, 25, 100)  # Calculamos media, mediana y varianza media = beta * gamma(1 + 1 / k) varianza = beta**2 * (gamma(1 + 2 / k) - (gamma(1 + 1 / k)) ** 2) desviacion_tipica = np.sqrt(varianza) mediana = beta * np.log(2) ** (1 / k) print(     f\"La media es de {media:.2f} m/s y la desviaci\u00f3n t\u00edpica de {desviacion_tipica:.2f} m/s\" ) print(f\"En el 50% de las mediciones el viento ser\u00e1 inferior a {mediana:.2f} m/s\")  # Calculamos la probabilidad de que la velocidad sea inferior a 7 m/s t = 7 prob_ = weibull_min.cdf(t, k, scale=beta)  # weibull_min.cdf devuelve la probabilidad print(     f\"La probabilidad de que la velocidad del viento sea inferior a {t} m/s es {prob_:.4f}\" ) print()  # weibull_min.pdf devuelve la densidad pdf = weibull_min.pdf(x, k, scale=beta) # Graficamos plt.figure(figsize=(6, 4)) plt.plot(x, pdf, \"b-\", linewidth=2, label=\"k = 2, beta =10\") plt.fill_between(     x[x &lt; 7],     weibull_min.pdf(x[x &lt; 7], k, scale=beta),     alpha=0.6,     color=\"red\",     label=\"\u00c1rea de Probabilidad\", ) plt.xlabel(\"Velocidad (m/s)\") plt.ylabel(\"Densidad de Probabilidad\") plt.title(\"Densidad y $P[X&lt;7]$\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos los paquetes\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import weibull_min\nfrom scipy.special import gamma\n</pre> # Importamos los paquetes import numpy as np import matplotlib.pyplot as plt from scipy.stats import weibull_min from scipy.special import gamma In\u00a0[\u00a0]: Copied! <pre># Definimos los par\u00e1metros y generamos las vidas \u00fatiles Weibull\nk = 1.7\nbeta = 3000\n\"\"\" En este ejemplo fijamos la semilla, lo que significa que el lector obtendr\u00e1 los mismos \nresultados si reproduce el c\u00f3digo\"\"\"\nnp.random.seed(8)\nvidas_utiles_1000 = weibull_min.rvs(\n    k, scale=beta, size=1000\n)  # weibull_min.rvs es el generador de aleatorios Weibull\nx = np.linspace(0, 10000, 1000)\n\n# Graficamos el histograma y la distribuci\u00f3n te\u00f3rica\npdf_1000 = weibull_min.pdf(x, k, scale=beta)\nplt.figure(figsize=(6, 4))\nplt.hist(\n    vidas_utiles_1000,\n    bins=30,\n    density=True,\n    color=\"green\",\n    alpha=0.7,\n    label=\"Histograma de datos simulados\",\n)\nplt.plot(x, pdf_1000, \"y-\", linewidth=3, label=\"Weibul te\u00f3rica\")\nplt.legend()\nplt.show()\n</pre> # Definimos los par\u00e1metros y generamos las vidas \u00fatiles Weibull k = 1.7 beta = 3000 \"\"\" En este ejemplo fijamos la semilla, lo que significa que el lector obtendr\u00e1 los mismos  resultados si reproduce el c\u00f3digo\"\"\" np.random.seed(8) vidas_utiles_1000 = weibull_min.rvs(     k, scale=beta, size=1000 )  # weibull_min.rvs es el generador de aleatorios Weibull x = np.linspace(0, 10000, 1000)  # Graficamos el histograma y la distribuci\u00f3n te\u00f3rica pdf_1000 = weibull_min.pdf(x, k, scale=beta) plt.figure(figsize=(6, 4)) plt.hist(     vidas_utiles_1000,     bins=30,     density=True,     color=\"green\",     alpha=0.7,     label=\"Histograma de datos simulados\", ) plt.plot(x, pdf_1000, \"y-\", linewidth=3, label=\"Weibul te\u00f3rica\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Calculamos los estad\u00edsticos\nmedia = beta * gamma(1 + 1 / k)\nvarianza = beta**2 * (gamma(1 + 2 / k) - (gamma(1 + 1 / k)) ** 2)\ndesviacion_tipica = np.sqrt(varianza)\nmediana = beta * np.log(2) ** (1 / k)\nprint(\n    f\"La media es de {media:.2f} horas y la desviaci\u00f3n t\u00edpica de {desviacion_tipica:.2f} horas\"\n)\nprint(f\"El 50% de los componentes tienen una vida \u00fatil inferior a {mediana:.2f} horas\")\n</pre> # Calculamos los estad\u00edsticos media = beta * gamma(1 + 1 / k) varianza = beta**2 * (gamma(1 + 2 / k) - (gamma(1 + 1 / k)) ** 2) desviacion_tipica = np.sqrt(varianza) mediana = beta * np.log(2) ** (1 / k) print(     f\"La media es de {media:.2f} horas y la desviaci\u00f3n t\u00edpica de {desviacion_tipica:.2f} horas\" ) print(f\"El 50% de los componentes tienen una vida \u00fatil inferior a {mediana:.2f} horas\") In\u00a0[\u00a0]: Copied! <pre># Calculamos y representamos la probabilidad de que la vida \u00fatil est\u00e9 entre 2000 y 4000\nt1 = 2000\nt2 = 4000\nprob_ = weibull_min.cdf(t2, k, scale=beta) - weibull_min.cdf(t1, k, scale=beta)\nprint(\n    f\"La probabilidad de que la vida \u00fatil est\u00e9 entre {t1} y {t2} horas es de {prob_:.4f}\"\n)\nprint()\n\n# Graficamos la densidad te\u00f3rica y el \u00e1rea de probabilidad\npdf = weibull_min.pdf(x, k, scale=beta)\nplt.figure(figsize=(6, 4))\nplt.plot(x, pdf, \"y-\", linewidth=2, label=\"k = 1.7, beta =3000\")\nplt.fill_between(\n    x[(2000 &lt; x) &amp; (x &lt; 4000)],\n    weibull_min.pdf(x[(2000 &lt; x) &amp; (x &lt; 4000)], k, scale=beta),\n    alpha=0.6,\n    color=\"green\",\n    label=\"\u00c1rea de Probabilidad\",\n)\nplt.xlabel(\"Vida \u00fatil (horas)\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.title(f\"Densidad y $P[{t1}\\leq X\\leq {t2}]$\")\nplt.legend()\nplt.show()\n</pre> # Calculamos y representamos la probabilidad de que la vida \u00fatil est\u00e9 entre 2000 y 4000 t1 = 2000 t2 = 4000 prob_ = weibull_min.cdf(t2, k, scale=beta) - weibull_min.cdf(t1, k, scale=beta) print(     f\"La probabilidad de que la vida \u00fatil est\u00e9 entre {t1} y {t2} horas es de {prob_:.4f}\" ) print()  # Graficamos la densidad te\u00f3rica y el \u00e1rea de probabilidad pdf = weibull_min.pdf(x, k, scale=beta) plt.figure(figsize=(6, 4)) plt.plot(x, pdf, \"y-\", linewidth=2, label=\"k = 1.7, beta =3000\") plt.fill_between(     x[(2000 &lt; x) &amp; (x &lt; 4000)],     weibull_min.pdf(x[(2000 &lt; x) &amp; (x &lt; 4000)], k, scale=beta),     alpha=0.6,     color=\"green\",     label=\"\u00c1rea de Probabilidad\", ) plt.xlabel(\"Vida \u00fatil (horas)\") plt.ylabel(\"Densidad de Probabilidad\") plt.title(f\"Densidad y $P[{t1}\\leq X\\leq {t2}]$\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos los paquetes\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import weibull_min\nfrom scipy.special import gamma\n\n# Definimos los par\u00e1metros y generamos las vidas \u00fatiles Weibull\nk = 0.6\nbeta = 10\nn_plantas = 1000\n\"\"\" En este ejemplo tambi\u00e9n fijamos la semilla, lo que significa que el lector obtendr\u00e1 los mismos \nresultados si reproduce el c\u00f3digo\"\"\"\nnp.random.seed(12)\nplantas = weibull_min.rvs(k, scale=beta, size=n_plantas)\nx = np.linspace(0, 50, 100)\n\n# Graficamos el histograma y la distribuci\u00f3n te\u00f3rica\npdf = weibull_min.pdf(x, k, scale=beta)\nplt.figure(figsize=(6, 4))\nplt.hist(\n    plantas[plantas &lt;= 50],\n    bins=30,\n    density=True,\n    color=\"blue\",\n    alpha=0.7,\n    label=\"Histograma de datos simulados\",\n)\nplt.plot(x, pdf, \"r-\", linewidth=2, label=\"Weibul te\u00f3rica\")\nplt.legend()\nplt.show()\n</pre> # Importamos los paquetes import numpy as np import matplotlib.pyplot as plt from scipy.stats import weibull_min from scipy.special import gamma  # Definimos los par\u00e1metros y generamos las vidas \u00fatiles Weibull k = 0.6 beta = 10 n_plantas = 1000 \"\"\" En este ejemplo tambi\u00e9n fijamos la semilla, lo que significa que el lector obtendr\u00e1 los mismos  resultados si reproduce el c\u00f3digo\"\"\" np.random.seed(12) plantas = weibull_min.rvs(k, scale=beta, size=n_plantas) x = np.linspace(0, 50, 100)  # Graficamos el histograma y la distribuci\u00f3n te\u00f3rica pdf = weibull_min.pdf(x, k, scale=beta) plt.figure(figsize=(6, 4)) plt.hist(     plantas[plantas &lt;= 50],     bins=30,     density=True,     color=\"blue\",     alpha=0.7,     label=\"Histograma de datos simulados\", ) plt.plot(x, pdf, \"r-\", linewidth=2, label=\"Weibul te\u00f3rica\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Calculamos los estad\u00edsticos\nmedia = beta * gamma(1 + 1 / k)\nvarianza = beta**2 * (gamma(1 + 2 / k) - (gamma(1 + 1 / k)) ** 2)\ndesviacion_tipica = np.sqrt(varianza)\nmediana = beta * np.log(2) ** (1 / k)\nprint(\n    f\"La media es de {media:.2f} d\u00edas y la desviaci\u00f3n t\u00edpica de {desviacion_tipica:.2f} d\u00edas\"\n)\nprint(f\"El 50% de los plantones viven menos de {mediana:.2f} d\u00edas\")\n</pre> # Calculamos los estad\u00edsticos media = beta * gamma(1 + 1 / k) varianza = beta**2 * (gamma(1 + 2 / k) - (gamma(1 + 1 / k)) ** 2) desviacion_tipica = np.sqrt(varianza) mediana = beta * np.log(2) ** (1 / k) print(     f\"La media es de {media:.2f} d\u00edas y la desviaci\u00f3n t\u00edpica de {desviacion_tipica:.2f} d\u00edas\" ) print(f\"El 50% de los plantones viven menos de {mediana:.2f} d\u00edas\") In\u00a0[\u00a0]: Copied! <pre># Calculamos y representamos la probabilidad de que un plant\u00f3n sobreviva m\u00e1s de 8 d\u00edas\nt = 20\nprob_ = 1 - weibull_min.cdf(t, k, scale=beta)\nprint(f\"La probabilidad de que viva m\u00e1s de {t} d\u00edas es de {prob_:.4f}\")\nprint()\n\n# Graficamos la densidad te\u00f3rica y el \u00e1rea de probabilidad\npdf = weibull_min.pdf(x, k, scale=beta)\nplt.figure(figsize=(6, 4))\nplt.plot(x, pdf, \"r-\", linewidth=2, label=f\"k = {k}, beta ={beta}\")\nplt.fill_between(\n    x[x &gt; t],\n    weibull_min.pdf(x[x &gt; t], k, scale=beta),\n    alpha=0.6,\n    color=\"blue\",\n    label=\"\u00c1rea de Probabilidad\",\n)\nplt.xlabel(\"Vida (D\u00edas)\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.title(f\"Densidad y $P[X&gt;{t}]$\")\nplt.legend()\nplt.show()\n</pre> # Calculamos y representamos la probabilidad de que un plant\u00f3n sobreviva m\u00e1s de 8 d\u00edas t = 20 prob_ = 1 - weibull_min.cdf(t, k, scale=beta) print(f\"La probabilidad de que viva m\u00e1s de {t} d\u00edas es de {prob_:.4f}\") print()  # Graficamos la densidad te\u00f3rica y el \u00e1rea de probabilidad pdf = weibull_min.pdf(x, k, scale=beta) plt.figure(figsize=(6, 4)) plt.plot(x, pdf, \"r-\", linewidth=2, label=f\"k = {k}, beta ={beta}\") plt.fill_between(     x[x &gt; t],     weibull_min.pdf(x[x &gt; t], k, scale=beta),     alpha=0.6,     color=\"blue\",     label=\"\u00c1rea de Probabilidad\", ) plt.xlabel(\"Vida (D\u00edas)\") plt.ylabel(\"Densidad de Probabilidad\") plt.title(f\"Densidad y $P[X&gt;{t}]$\") plt.legend() plt.show()"},{"location":"Contenido/16_Distribuci%C3%B3n%20Weibull.html#16_distribucion-weibull","title":"16_DISTRIBUCI\u00d3N WEIBULL\u00b6","text":""},{"location":"Contenido/16_Distribuci%C3%B3n%20Weibull.html#fiabilidad-de-componentes-electronicos","title":"Fiabilidad de Componentes Electr\u00f3nicos.\u00b6","text":""},{"location":"Contenido/16_Distribuci%C3%B3n%20Weibull.html#analisis-de-la-velocidad-del-viento","title":"An\u00e1lisis de la velocidad del viento.\u00b6","text":""},{"location":"Contenido/16_Distribuci%C3%B3n%20Weibull.html#simulacion-de-la-vida-util-de-componentes-mecanicos","title":"Simulaci\u00f3n de la vida \u00fatil de componentes mec\u00e1nicos\u00b6","text":""},{"location":"Contenido/16_Distribuci%C3%B3n%20Weibull.html#tiempo-de-supervivencia-de-plantas-jovenes-en-condiciones-adversas","title":"Tiempo de supervivencia de plantas j\u00f3venes en condiciones adversas\u00b6","text":""},{"location":"Contenido/17_Distribuci%C3%B3n%20Normal.html","title":"17_DISTRIBUCI\u00d3N NORMAL","text":"In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Par\u00e1metros de la distribuci\u00f3n\nmu = 0  # media\nsigma = 1  # desviaci\u00f3n t\u00edpica\n\n# Generamos 1000 datos aleatorios normales\ndata = np.random.normal(mu, sigma, 1000)\n\n# Configuramos la gr\u00e1fica\nplt.figure(figsize=(10, 6))\n\n# Dibujamos el histograma (30 intervalos)\nplt.hist(data, bins=30, density=True, alpha=0.6, color=\"g\")\n\n# Dibujamos la funci\u00f3n de densidad (pdf)\nx = np.linspace(-4, 4, 1000)\npdf = (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mu) / sigma) ** 2)\nplt.plot(x, pdf, \"k\", linewidth=2)\n\nplt.title(\"Distribuci\u00f3n Normal\")\nplt.xlabel(\"Valores\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.show\n</pre> import numpy as np import matplotlib.pyplot as plt  # Par\u00e1metros de la distribuci\u00f3n mu = 0  # media sigma = 1  # desviaci\u00f3n t\u00edpica  # Generamos 1000 datos aleatorios normales data = np.random.normal(mu, sigma, 1000)  # Configuramos la gr\u00e1fica plt.figure(figsize=(10, 6))  # Dibujamos el histograma (30 intervalos) plt.hist(data, bins=30, density=True, alpha=0.6, color=\"g\")  # Dibujamos la funci\u00f3n de densidad (pdf) x = np.linspace(-4, 4, 1000) pdf = (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mu) / sigma) ** 2) plt.plot(x, pdf, \"k\", linewidth=2)  plt.title(\"Distribuci\u00f3n Normal\") plt.xlabel(\"Valores\") plt.ylabel(\"Densidad de Probabilidad\") plt.show In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, kurtosis\n\n# Configuraci\u00f3n de la gr\u00e1fica\nplt.figure(figsize=(10, 6))\n\n# Generar datos para una distribuci\u00f3n normal est\u00e1ndar (mesoc\u00fartica)\nx = np.linspace(-5, 5, 1000)\ny_mesocurtica = norm.pdf(x, 0, 1)\nkurt_mesocurtica = kurtosis(y_mesocurtica, fisher=False)  # Curtosis \u2248 3\nplt.plot(x, y_mesocurtica, label=f\"Mesoc\u00fartica (Curtosis = {kurt_mesocurtica:.2f})\")\n\n# Generar datos para una distribuci\u00f3n leptoc\u00fartica (curtosis &gt; 3)\n# Usamos una desviaci\u00f3n est\u00e1ndar m\u00e1s peque\u00f1a para hacerla m\u00e1s \"pico\"\ny_leptocurtica = norm.pdf(x, 0, 0.6)\nkurt_leptocurtica = kurtosis(y_leptocurtica, fisher=False)  # Curtosis &gt; 3\nplt.plot(x, y_leptocurtica, label=f\"Leptoc\u00fartica (Curtosis = {kurt_leptocurtica:.2f})\")\n\n# Generar datos para una distribuci\u00f3n platic\u00fartica (curtosis &lt; 3)\n# Usamos una desviaci\u00f3n est\u00e1ndar m\u00e1s grande para hacerla m\u00e1s \"plana\"\ny_platicurtica = norm.pdf(x, 0, 1.6)\nkurt_platicurtica = kurtosis(y_platicurtica, fisher=False)  # Curtosis &lt; 3\nplt.plot(x, y_platicurtica, label=f\"Platic\u00fartica (Curtosis = {kurt_platicurtica:.2f})\")\n\nplt.title(\"Distribuciones Normales con diferente Curtosis\")\nplt.xlabel(\"Valores\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.legend()\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm, kurtosis  # Configuraci\u00f3n de la gr\u00e1fica plt.figure(figsize=(10, 6))  # Generar datos para una distribuci\u00f3n normal est\u00e1ndar (mesoc\u00fartica) x = np.linspace(-5, 5, 1000) y_mesocurtica = norm.pdf(x, 0, 1) kurt_mesocurtica = kurtosis(y_mesocurtica, fisher=False)  # Curtosis \u2248 3 plt.plot(x, y_mesocurtica, label=f\"Mesoc\u00fartica (Curtosis = {kurt_mesocurtica:.2f})\")  # Generar datos para una distribuci\u00f3n leptoc\u00fartica (curtosis &gt; 3) # Usamos una desviaci\u00f3n est\u00e1ndar m\u00e1s peque\u00f1a para hacerla m\u00e1s \"pico\" y_leptocurtica = norm.pdf(x, 0, 0.6) kurt_leptocurtica = kurtosis(y_leptocurtica, fisher=False)  # Curtosis &gt; 3 plt.plot(x, y_leptocurtica, label=f\"Leptoc\u00fartica (Curtosis = {kurt_leptocurtica:.2f})\")  # Generar datos para una distribuci\u00f3n platic\u00fartica (curtosis &lt; 3) # Usamos una desviaci\u00f3n est\u00e1ndar m\u00e1s grande para hacerla m\u00e1s \"plana\" y_platicurtica = norm.pdf(x, 0, 1.6) kurt_platicurtica = kurtosis(y_platicurtica, fisher=False)  # Curtosis &lt; 3 plt.plot(x, y_platicurtica, label=f\"Platic\u00fartica (Curtosis = {kurt_platicurtica:.2f})\")  plt.title(\"Distribuciones Normales con diferente Curtosis\") plt.xlabel(\"Valores\") plt.ylabel(\"Densidad de Probabilidad\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Par\u00e1metros\nmu = 5\nsigma = 0.1\n\n# Calulamos la probabilidad\nprob = norm.cdf(5.2, mu, sigma) - norm.cdf(4.8, mu, sigma)\nprint(f\"Probabilidad de que un tornillo mida entre 4.8 cm y 5.2 cm es {prob:.4f}\")\nprint()\n\n# Generamos la funci\u00f3n de densidad\nx = np.linspace(4.5, 5.5, 1000)\npdf = norm.pdf(x, mu, sigma)\n\n# Dibujamos la pdf y el \u00e1rea pedida\nplt.figure(figsize=(10, 6))\nplt.plot(x, pdf, \"k\", label=\"Distribuci\u00f3n $N(5,0.1)$\")\nplt.fill_between(\n    x,\n    pdf,\n    where=(x &gt;= 4.8) &amp; (x &lt;= 5.2),\n    color=\"blue\",\n    alpha=0.5,\n    label=\"\u00c1rea entre 4.8 cm y 5.2 cm\",\n)\nplt.title(\"Longitud de tornillos\")\nplt.xlabel(\"Longitud (cm)\")\nplt.ylabel(\"Densidad de probabilidad\")\nplt.legend()\nplt.show()\n</pre> # Importamos librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm  # Par\u00e1metros mu = 5 sigma = 0.1  # Calulamos la probabilidad prob = norm.cdf(5.2, mu, sigma) - norm.cdf(4.8, mu, sigma) print(f\"Probabilidad de que un tornillo mida entre 4.8 cm y 5.2 cm es {prob:.4f}\") print()  # Generamos la funci\u00f3n de densidad x = np.linspace(4.5, 5.5, 1000) pdf = norm.pdf(x, mu, sigma)  # Dibujamos la pdf y el \u00e1rea pedida plt.figure(figsize=(10, 6)) plt.plot(x, pdf, \"k\", label=\"Distribuci\u00f3n $N(5,0.1)$\") plt.fill_between(     x,     pdf,     where=(x &gt;= 4.8) &amp; (x &lt;= 5.2),     color=\"blue\",     alpha=0.5,     label=\"\u00c1rea entre 4.8 cm y 5.2 cm\", ) plt.title(\"Longitud de tornillos\") plt.xlabel(\"Longitud (cm)\") plt.ylabel(\"Densidad de probabilidad\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Par\u00e1metros\nmu = 115\nsigma = 12\n\n# Calculamos el percentil 85\nper_85 = norm.ppf(0.85, mu, sigma)\nprint(f\"El percentil 85 es {per_85:.1f} cm\")\nprint()\n\n# Generamos la funci\u00f3n de densidad\nx = np.linspace(75, 155, 1000)\npdf = norm.pdf(x, mu, sigma)\n\n# Dibujamos la pdf y el \u00e1rea pedida\nplt.figure(figsize=(10, 6))\nplt.plot(x, pdf, \"b\", label=\"Distribuci\u00f3n $N(115,12)$\")\nplt.fill_between(\n    x,\n    pdf,\n    where=(x &lt;= per_85),\n    color=\"brown\",\n    alpha=0.75,\n    label=\"Probabilidad percentil 85\",\n)\nplt.title(\"Altura de plantas\")\nplt.xlabel(\"Altura (cm)\")\nplt.ylabel(\"Densidad de probabilidad\")\nplt.legend()\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm  # Par\u00e1metros mu = 115 sigma = 12  # Calculamos el percentil 85 per_85 = norm.ppf(0.85, mu, sigma) print(f\"El percentil 85 es {per_85:.1f} cm\") print()  # Generamos la funci\u00f3n de densidad x = np.linspace(75, 155, 1000) pdf = norm.pdf(x, mu, sigma)  # Dibujamos la pdf y el \u00e1rea pedida plt.figure(figsize=(10, 6)) plt.plot(x, pdf, \"b\", label=\"Distribuci\u00f3n $N(115,12)$\") plt.fill_between(     x,     pdf,     where=(x &lt;= per_85),     color=\"brown\",     alpha=0.75,     label=\"Probabilidad percentil 85\", ) plt.title(\"Altura de plantas\") plt.xlabel(\"Altura (cm)\") plt.ylabel(\"Densidad de probabilidad\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Par\u00e1metros\nmu = 7\nsigma = 0.5\n\n# Calculamos la probabilidad\nprob = 1 - norm.cdf(8, mu, sigma)\nprint(f\"La probabilidad de que el pH se mayor que 8 es {prob:.4f}\")\nprint()\n\n# Generamos la funci\u00f3n de densidad\nx = np.linspace(5, 9, 1000)\npdf = norm.pdf(x, mu, sigma)\n\n# Dibujamos la pdf y el \u00e1rea pedida\nplt.figure(figsize=(10, 6))\nplt.plot(x, pdf, \"r\", label=f\"Distribuci\u00f3n $N({mu},{sigma})$\")\nplt.fill_between(\n    x, pdf, where=(x &gt; 8), color=\"blue\", alpha=0.4, label=f\"Probabilidad de $P[X&gt;8]$\"\n)\nplt.title(\"Medici\u00f3n de pH\")\nplt.xlabel(\"pH\")\nplt.ylabel(\"Densidad de probabilidad\")\nplt.legend()\nplt.show()\n</pre> # Importamos librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm  # Par\u00e1metros mu = 7 sigma = 0.5  # Calculamos la probabilidad prob = 1 - norm.cdf(8, mu, sigma) print(f\"La probabilidad de que el pH se mayor que 8 es {prob:.4f}\") print()  # Generamos la funci\u00f3n de densidad x = np.linspace(5, 9, 1000) pdf = norm.pdf(x, mu, sigma)  # Dibujamos la pdf y el \u00e1rea pedida plt.figure(figsize=(10, 6)) plt.plot(x, pdf, \"r\", label=f\"Distribuci\u00f3n $N({mu},{sigma})$\") plt.fill_between(     x, pdf, where=(x &gt; 8), color=\"blue\", alpha=0.4, label=f\"Probabilidad de $P[X&gt;8]$\" ) plt.title(\"Medici\u00f3n de pH\") plt.xlabel(\"pH\") plt.ylabel(\"Densidad de probabilidad\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Par\u00e1metros\nmu = 22\nsigma = 8\n\n# Simulaci\u00f3n de 1000 d\u00edas+\ntemperatures = np.random.normal(mu, sigma, 1000)\n\n# Histograma de la simulaci\u00f3n de temperaturas\nplt.hist(\n    temperatures,\n    bins=30,\n    density=True,\n    alpha=0.6,\n    color=\"green\",\n    label=\"Temperaturas simuladas\",\n)\nplt.title(\"Distribuci\u00f3n de temperaturas en 1000 d\u00edas\")\nplt.xlabel(\"Temperaturas\")\nplt.ylabel(\"Densidad de probabilidad\")\nplt.legend()\nplt.show()\n\n# Probabilidad de que la temperatura supere los 28 grados\nprob_plus_28 = 1 - norm.cdf(28, mu, sigma)\nprint(f\"La probabilidad de m\u00e1s de 28 es {prob_plus_28:.4f}\")\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm  # Par\u00e1metros mu = 22 sigma = 8  # Simulaci\u00f3n de 1000 d\u00edas+ temperatures = np.random.normal(mu, sigma, 1000)  # Histograma de la simulaci\u00f3n de temperaturas plt.hist(     temperatures,     bins=30,     density=True,     alpha=0.6,     color=\"green\",     label=\"Temperaturas simuladas\", ) plt.title(\"Distribuci\u00f3n de temperaturas en 1000 d\u00edas\") plt.xlabel(\"Temperaturas\") plt.ylabel(\"Densidad de probabilidad\") plt.legend() plt.show()  # Probabilidad de que la temperatura supere los 28 grados prob_plus_28 = 1 - norm.cdf(28, mu, sigma) print(f\"La probabilidad de m\u00e1s de 28 es {prob_plus_28:.4f}\") In\u00a0[\u00a0]: Copied! <pre># Generamos la funci\u00f3n de densidad te\u00f3rica\nx = np.linspace(0, 50, 1000)\npdf = norm.pdf(x, mu, sigma)\n\n# Dibujamos la pdf y el \u00e1rea pedida\nplt.figure(figsize=(10, 6))\nplt.plot(x, pdf, \"b\", label=f\"Distribuci\u00f3n $N({mu},{sigma})$\")\nplt.fill_between(\n    x, pdf, where=(x &gt; 28), color=\"green\", alpha=0.4, label=f\"Probabilidad de $P[X&gt;28]$\"\n)\nplt.title(\"Temperaturas en 1000 d\u00edas\")\nplt.xlabel(\"Temperaturas\")\nplt.ylabel(\"Densidad de probabilidad\")\nplt.legend()\nplt.show()\n</pre> # Generamos la funci\u00f3n de densidad te\u00f3rica x = np.linspace(0, 50, 1000) pdf = norm.pdf(x, mu, sigma)  # Dibujamos la pdf y el \u00e1rea pedida plt.figure(figsize=(10, 6)) plt.plot(x, pdf, \"b\", label=f\"Distribuci\u00f3n $N({mu},{sigma})$\") plt.fill_between(     x, pdf, where=(x &gt; 28), color=\"green\", alpha=0.4, label=f\"Probabilidad de $P[X&gt;28]$\" ) plt.title(\"Temperaturas en 1000 d\u00edas\") plt.xlabel(\"Temperaturas\") plt.ylabel(\"Densidad de probabilidad\") plt.legend() plt.show()"},{"location":"Contenido/17_Distribuci%C3%B3n%20Normal.html#17_distribucion-normal","title":"17_DISTRIBUCI\u00d3N NORMAL\u00b6","text":""},{"location":"Contenido/17_Distribuci%C3%B3n%20Normal.html#control-de-calidad","title":"Control de calidad\u00b6","text":""},{"location":"Contenido/17_Distribuci%C3%B3n%20Normal.html#analisis-de-datos-en-biologia","title":"An\u00e1lisis de datos en Biolog\u00eda\u00b6","text":""},{"location":"Contenido/17_Distribuci%C3%B3n%20Normal.html#diseno-de-experimentos-en-quimica","title":"Dise\u00f1o de experimentos en Qu\u00edmica\u00b6","text":""},{"location":"Contenido/17_Distribuci%C3%B3n%20Normal.html#simulacion-de-fenomenos-en-meteorologia","title":"Simulaci\u00f3n de fen\u00f3menos en Meteorolog\u00eda\u00b6","text":""},{"location":"Contenido/18_Distribuci%C3%B3n%20t%20Student.html","title":"18_DISTRIBUCI\u00d3N t STUDENT","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import t\n\n# Grados de libertad\ndf_t = [1, 5, 8, 30]\n\n# Visualizaci\u00f3n\nx_t = np.linspace(-5, 5, 1000)\nplt.figure(figsize=(12, 6))\nfor df in df_t:\n    plt.plot(x_t, t.pdf(x_t, df), label=f\"Grados de libertad = {df}\")\nplt.title(\"Distribuciones t de Student\")\nplt.legend()\nplt.show()\n</pre> # Importamos librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import t  # Grados de libertad df_t = [1, 5, 8, 30]  # Visualizaci\u00f3n x_t = np.linspace(-5, 5, 1000) plt.figure(figsize=(12, 6)) for df in df_t:     plt.plot(x_t, t.pdf(x_t, df), label=f\"Grados de libertad = {df}\") plt.title(\"Distribuciones t de Student\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import t\n\n# Grados de libertad, valor cr\u00edtico y probabilidad\ndf_t = 8\nt_value = 1.0\nprob_t = t.cdf(t_value, df_t)\nprint(f\"P(T &lt;= {t_value}) con {df_t} gl: {prob_t:.4f}\")\nprint()\n\n# Visualizaci\u00f3n\nx_t = np.linspace(t.ppf(0.001, df_t), t.ppf(0.999, df_t), 1000)\npdf_t = t.pdf(x_t, df_t)\ncdf_t = t.cdf(x_t, df_t)\n\n\nplt.figure(figsize=(12, 6))\nplt.subplot(1, 2, 1)  # Funci\u00f3n de densidad\nplt.plot(x_t, pdf_t, label=f\"t de Student (df={df_t})\")\nplt.fill_between(x_t, pdf_t, where=(x_t &lt;= t_value), color=\"blue\", alpha=0.5)\nplt.title(f\"PDF de t de Student (df={df_t})\")\nplt.xlabel(\"Valor\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.legend()\n\nplt.subplot(1, 2, 2)  # Funci\u00f3n acumulada\nplt.plot(x_t, cdf_t, label=f\"CDF de t de Student (df={df_t})\")\nplt.axvline(\n    x=t_value, color=\"red\", linestyle=\"--\", label=f\"P(T &lt;= {t_value}) = {prob_t:.4f}\"\n)\nplt.title(f\"CDF de t de Student (df={df_t})\")\nplt.xlabel(\"Valor\")\nplt.ylabel(\"Probabilidad Acumulada\")\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n</pre> # Importamos librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import t  # Grados de libertad, valor cr\u00edtico y probabilidad df_t = 8 t_value = 1.0 prob_t = t.cdf(t_value, df_t) print(f\"P(T &lt;= {t_value}) con {df_t} gl: {prob_t:.4f}\") print()  # Visualizaci\u00f3n x_t = np.linspace(t.ppf(0.001, df_t), t.ppf(0.999, df_t), 1000) pdf_t = t.pdf(x_t, df_t) cdf_t = t.cdf(x_t, df_t)   plt.figure(figsize=(12, 6)) plt.subplot(1, 2, 1)  # Funci\u00f3n de densidad plt.plot(x_t, pdf_t, label=f\"t de Student (df={df_t})\") plt.fill_between(x_t, pdf_t, where=(x_t &lt;= t_value), color=\"blue\", alpha=0.5) plt.title(f\"PDF de t de Student (df={df_t})\") plt.xlabel(\"Valor\") plt.ylabel(\"Densidad de Probabilidad\") plt.legend()  plt.subplot(1, 2, 2)  # Funci\u00f3n acumulada plt.plot(x_t, cdf_t, label=f\"CDF de t de Student (df={df_t})\") plt.axvline(     x=t_value, color=\"red\", linestyle=\"--\", label=f\"P(T &lt;= {t_value}) = {prob_t:.4f}\" ) plt.title(f\"CDF de t de Student (df={df_t})\") plt.xlabel(\"Valor\") plt.ylabel(\"Probabilidad Acumulada\") plt.legend()  plt.tight_layout() plt.show()"},{"location":"Contenido/18_Distribuci%C3%B3n%20t%20Student.html#18_distribucion-t-student","title":"18_DISTRIBUCI\u00d3N t STUDENT\u00b6","text":""},{"location":"Contenido/19_Distribuci%C3%B3n%20Chi%20Cuadrado.html","title":"19_DISTRIBUCI\u00d3N CHI CUADRADO","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import chi2\n\n# Grados de libertad\ndf_chi = [4, 6, 8, 10, 12]\n\n# Visualizaci\u00f3n\nx_chi = np.linspace(0, 25, 1000)\nplt.figure(figsize=(12, 6))\nfor df in df_chi:\n    plt.plot(x_chi, chi2.pdf(x_chi, df), label=f\"Grados de libertad = {df}\")\nplt.title(\"Distribuciones $\\chi^2$\")\nplt.legend()\nplt.show()\n</pre> # Importamos librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import chi2  # Grados de libertad df_chi = [4, 6, 8, 10, 12]  # Visualizaci\u00f3n x_chi = np.linspace(0, 25, 1000) plt.figure(figsize=(12, 6)) for df in df_chi:     plt.plot(x_chi, chi2.pdf(x_chi, df), label=f\"Grados de libertad = {df}\") plt.title(\"Distribuciones $\\chi^2$\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import chi2\n\n# Par\u00e1metros de la distribuci\u00f3n Chi Cuadrado\ndf_chi = 10  # Grados de libertad\nchi_value = 10.0  # Valor de chi cuadrado\nprob_chi = chi2.cdf(chi_value, df_chi)  # Probabilidad acumulada\nprint(f\"P(Chi^2 &lt;= {chi_value}) con {df_chi} gl: {prob_chi:.4f}\")\nprint()\n\n# Crear un rango de valores para la distribuci\u00f3n Chi Cuadrado\nx_chi = np.linspace(chi2.ppf(0.001, df_chi), chi2.ppf(0.999, df_chi), 1000)\npdf_chi = chi2.pdf(x_chi, df_chi)  # Funci\u00f3n de densidad de probabilidad (PDF)\ncdf_chi = chi2.cdf(x_chi, df_chi)  # Funci\u00f3n de distribuci\u00f3n acumulativa (CDF)\n\n# Graficar la PDF y CDF de la distribuci\u00f3n Chi Cuadrado\nplt.figure(figsize=(12, 6))\n\nplt.subplot(1, 2, 1)  # PDF de Chi Cuadrado\nplt.plot(x_chi, pdf_chi, label=f\"Chi Cuadrado (df={df_chi})\", color=\"blue\")\nplt.fill_between(\n    x_chi,\n    pdf_chi,\n    where=(x_chi &lt;= chi_value),\n    color=\"blue\",\n    alpha=0.5,\n    label=f\"P($\\chi^2 \\leq$ {chi_value}) = {prob_chi:.4f}\",\n)\nplt.title(f\"PDF de Chi Cuadrado (df={df_chi})\")\nplt.xlabel(\"Valor\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.legend()\n\nplt.subplot(1, 2, 2)  # CDF de Chi Cuadrado\nplt.plot(x_chi, cdf_chi, label=f\"CDF de Chi Cuadrado (df={df_chi})\", color=\"green\")\nplt.axvline(\n    x=chi_value,\n    color=\"red\",\n    linestyle=\"--\",\n    label=f\"P($\\chi^2 \\leq$ {chi_value}) = {prob_chi:.4f}\",\n)\nplt.title(f\"CDF de Chi Cuadrado (df={df_chi})\")\nplt.xlabel(\"Valor\")\nplt.ylabel(\"Probabilidad Acumulada\")\nplt.legend()\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import chi2  # Par\u00e1metros de la distribuci\u00f3n Chi Cuadrado df_chi = 10  # Grados de libertad chi_value = 10.0  # Valor de chi cuadrado prob_chi = chi2.cdf(chi_value, df_chi)  # Probabilidad acumulada print(f\"P(Chi^2 &lt;= {chi_value}) con {df_chi} gl: {prob_chi:.4f}\") print()  # Crear un rango de valores para la distribuci\u00f3n Chi Cuadrado x_chi = np.linspace(chi2.ppf(0.001, df_chi), chi2.ppf(0.999, df_chi), 1000) pdf_chi = chi2.pdf(x_chi, df_chi)  # Funci\u00f3n de densidad de probabilidad (PDF) cdf_chi = chi2.cdf(x_chi, df_chi)  # Funci\u00f3n de distribuci\u00f3n acumulativa (CDF)  # Graficar la PDF y CDF de la distribuci\u00f3n Chi Cuadrado plt.figure(figsize=(12, 6))  plt.subplot(1, 2, 1)  # PDF de Chi Cuadrado plt.plot(x_chi, pdf_chi, label=f\"Chi Cuadrado (df={df_chi})\", color=\"blue\") plt.fill_between(     x_chi,     pdf_chi,     where=(x_chi &lt;= chi_value),     color=\"blue\",     alpha=0.5,     label=f\"P($\\chi^2 \\leq$ {chi_value}) = {prob_chi:.4f}\", ) plt.title(f\"PDF de Chi Cuadrado (df={df_chi})\") plt.xlabel(\"Valor\") plt.ylabel(\"Densidad de Probabilidad\") plt.legend()  plt.subplot(1, 2, 2)  # CDF de Chi Cuadrado plt.plot(x_chi, cdf_chi, label=f\"CDF de Chi Cuadrado (df={df_chi})\", color=\"green\") plt.axvline(     x=chi_value,     color=\"red\",     linestyle=\"--\",     label=f\"P($\\chi^2 \\leq$ {chi_value}) = {prob_chi:.4f}\", ) plt.title(f\"CDF de Chi Cuadrado (df={df_chi})\") plt.xlabel(\"Valor\") plt.ylabel(\"Probabilidad Acumulada\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import f\n\n# Grados de libertad\ndf_f_numerator = [5, 10, 12]\ndf_f_denominator = [5, 5, 10]\n\n# Visualizaci\u00f3n\nx_f = np.linspace(0, 5, 1000)\nplt.figure(figsize=(12, 6))\nfor df1, df2 in zip(df_f_numerator, df_f_denominator):\n    plt.plot(x_f, f.pdf(x_f, df1, df2), label=f\"Grados de libertad = ({df1},{df2})\")\nplt.title(\"Distribuciones F de Fisher-Snedecor\")\nplt.legend()\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import f  # Grados de libertad df_f_numerator = [5, 10, 12] df_f_denominator = [5, 5, 10]  # Visualizaci\u00f3n x_f = np.linspace(0, 5, 1000) plt.figure(figsize=(12, 6)) for df1, df2 in zip(df_f_numerator, df_f_denominator):     plt.plot(x_f, f.pdf(x_f, df1, df2), label=f\"Grados de libertad = ({df1},{df2})\") plt.title(\"Distribuciones F de Fisher-Snedecor\") plt.legend() plt.show() <p>C\u00f3digo para calcular y representar una probabilidad</p> In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import f\n\n# Par\u00e1metros\ndf1 = 12  # Grados de libertad del numerador (Grupo 1)\ndf2 = 10  # Grados de libertad del denominador (Grupo 2)\nf_value = 2.5  # Valor de F para el cual se calcula la probabilidad acumulada\n\n# Crear un rango de valores para el eje X\nx = np.linspace(0, 5, 1000)  # Desde 0 hasta 5 para cubrir la distribuci\u00f3n F\n\n# Calcular la PDF y la CDF\npdf_values = f.pdf(x, df1, df2)  # Funci\u00f3n de densidad de probabilidad\ncdf_values = f.cdf(x, df1, df2)  # Funci\u00f3n de distribuci\u00f3n acumulada\n\n# Calcular la probabilidad acumulada para el valor espec\u00edfico f_value\nprob_f = f.cdf(f_value, df1, df2)\n\n# Crear la figura y los subgr\u00e1ficos (1 fila, 2 columnas)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))\n\n# --- Subgr\u00e1fico 1: PDF ---\nax1.plot(x, pdf_values, label=f\"PDF (F, gl1 = {df1}, gl2 = {df2})\", color=\"blue\")\nax1.fill_between(\n    x,\n    pdf_values,\n    where=(x &lt;= f_value),\n    color=\"lightblue\",\n    alpha=0.5,\n    label=f\"P(F \u2264 {f_value}) = {prob_f:.4f}\",\n)\nax1.axvline(f_value, color=\"green\", linestyle=\"--\", label=f\"F = {f_value}\")\nax1.set_title(\"Funci\u00f3n de Densidad de Probabilidad (PDF)\")\nax1.set_xlabel(\"Valor de F\")\nax1.set_ylabel(\"Densidad\")\nax1.legend()\nax1.grid(True)\n\n# --- Subgr\u00e1fico 2: CDF ---\nax2.plot(x, cdf_values, label=f\"CDF (F, gl1 = {df1}, gl2 = {df2})\", color=\"red\")\nax2.axvline(f_value, color=\"green\", linestyle=\"--\", label=f\"F = {f_value}\")\nax2.axhline(\n    prob_f, color=\"orange\", linestyle=\"--\", label=f\"P(F \u2264 {f_value}) = {prob_f:.4f}\"\n)\nax2.set_title(\"Funci\u00f3n de Distribuci\u00f3n Acumulada (CDF)\")\nax2.set_xlabel(\"Valor de F\")\nax2.set_ylabel(\"Probabilidad Acumulada\")\nax2.legend()\n\n# Ajustar el espacio entre subgr\u00e1ficos\nplt.tight_layout()\n\n# Mostrar la figura\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import f  # Par\u00e1metros df1 = 12  # Grados de libertad del numerador (Grupo 1) df2 = 10  # Grados de libertad del denominador (Grupo 2) f_value = 2.5  # Valor de F para el cual se calcula la probabilidad acumulada  # Crear un rango de valores para el eje X x = np.linspace(0, 5, 1000)  # Desde 0 hasta 5 para cubrir la distribuci\u00f3n F  # Calcular la PDF y la CDF pdf_values = f.pdf(x, df1, df2)  # Funci\u00f3n de densidad de probabilidad cdf_values = f.cdf(x, df1, df2)  # Funci\u00f3n de distribuci\u00f3n acumulada  # Calcular la probabilidad acumulada para el valor espec\u00edfico f_value prob_f = f.cdf(f_value, df1, df2)  # Crear la figura y los subgr\u00e1ficos (1 fila, 2 columnas) fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))  # --- Subgr\u00e1fico 1: PDF --- ax1.plot(x, pdf_values, label=f\"PDF (F, gl1 = {df1}, gl2 = {df2})\", color=\"blue\") ax1.fill_between(     x,     pdf_values,     where=(x &lt;= f_value),     color=\"lightblue\",     alpha=0.5,     label=f\"P(F \u2264 {f_value}) = {prob_f:.4f}\", ) ax1.axvline(f_value, color=\"green\", linestyle=\"--\", label=f\"F = {f_value}\") ax1.set_title(\"Funci\u00f3n de Densidad de Probabilidad (PDF)\") ax1.set_xlabel(\"Valor de F\") ax1.set_ylabel(\"Densidad\") ax1.legend() ax1.grid(True)  # --- Subgr\u00e1fico 2: CDF --- ax2.plot(x, cdf_values, label=f\"CDF (F, gl1 = {df1}, gl2 = {df2})\", color=\"red\") ax2.axvline(f_value, color=\"green\", linestyle=\"--\", label=f\"F = {f_value}\") ax2.axhline(     prob_f, color=\"orange\", linestyle=\"--\", label=f\"P(F \u2264 {f_value}) = {prob_f:.4f}\" ) ax2.set_title(\"Funci\u00f3n de Distribuci\u00f3n Acumulada (CDF)\") ax2.set_xlabel(\"Valor de F\") ax2.set_ylabel(\"Probabilidad Acumulada\") ax2.legend()  # Ajustar el espacio entre subgr\u00e1ficos plt.tight_layout()  # Mostrar la figura plt.show()"},{"location":"Contenido/19_Distribuci%C3%B3n%20Chi%20Cuadrado.html#19_distribucion-chi-cuadrado","title":"19_DISTRIBUCI\u00d3N CHI CUADRADO\u00b6","text":""},{"location":"Contenido/20_Distribuci%C3%B3n%20F.html","title":"20_DISTRIBUCI\u00d3N F DE FISHER-SNEDECOR","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import f\n\n# Grados de libertad\ndf_f_numerator = [5, 10, 12]\ndf_f_denominator = [5, 5, 10]\n\n# Visualizaci\u00f3n\nx_f = np.linspace(0, 5, 1000)\nplt.figure(figsize=(12, 6))\nfor df1, df2 in zip(df_f_numerator, df_f_denominator):\n    plt.plot(x_f, f.pdf(x_f, df1, df2), label=f\"Grados de libertad = ({df1},{df2})\")\nplt.title(\"Distribuciones F de Fisher-Snedecor\")\nplt.legend()\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import f  # Grados de libertad df_f_numerator = [5, 10, 12] df_f_denominator = [5, 5, 10]  # Visualizaci\u00f3n x_f = np.linspace(0, 5, 1000) plt.figure(figsize=(12, 6)) for df1, df2 in zip(df_f_numerator, df_f_denominator):     plt.plot(x_f, f.pdf(x_f, df1, df2), label=f\"Grados de libertad = ({df1},{df2})\") plt.title(\"Distribuciones F de Fisher-Snedecor\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import f\n\n# Par\u00e1metros\ndf1 = 12  # Grados de libertad del numerador (Grupo 1)\ndf2 = 10  # Grados de libertad del denominador (Grupo 2)\nf_value = 2.5  # Valor de F para el cual se calcula la probabilidad acumulada\n\n# Crear un rango de valores para el eje X\nx = np.linspace(0, 5, 1000)  # Desde 0 hasta 5 para cubrir la distribuci\u00f3n F\n\n# Calcular la PDF y la CDF\npdf_values = f.pdf(x, df1, df2)  # Funci\u00f3n de densidad de probabilidad\ncdf_values = f.cdf(x, df1, df2)  # Funci\u00f3n de distribuci\u00f3n acumulada\n\n# Calcular la probabilidad acumulada para el valor espec\u00edfico f_value\nprob_f = f.cdf(f_value, df1, df2)\n\n# Crear la figura y los subgr\u00e1ficos (1 fila, 2 columnas)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))\n\n# --- Subgr\u00e1fico 1: PDF ---\nax1.plot(x, pdf_values, label=f\"PDF (F, gl1 = {df1}, gl2 = {df2})\", color=\"blue\")\nax1.fill_between(\n    x,\n    pdf_values,\n    where=(x &lt;= f_value),\n    color=\"lightblue\",\n    alpha=0.5,\n    label=f\"P(F  $\\leq$ {f_value}) = {prob_f:.4f}\",\n)\nax1.axvline(f_value, color=\"green\", linestyle=\"--\", label=f\"F = {f_value}\")\nax1.set_title(\"Funci\u00f3n de Densidad de Probabilidad (PDF)\")\nax1.set_xlabel(\"Valor de F\")\nax1.set_ylabel(\"Densidad\")\nax1.legend()\nax1.grid(True)\n\n# --- Subgr\u00e1fico 2: CDF ---\nax2.plot(x, cdf_values, label=f\"CDF (F, gl1 = {df1}, gl2 = {df2})\", color=\"red\")\nax2.axvline(f_value, color=\"green\", linestyle=\"--\", label=f\"F = {f_value}\")\nax2.axhline(\n    prob_f,\n    color=\"orange\",\n    linestyle=\"--\",\n    label=f\"P(F $\\leq$ {f_value}) = {prob_f:.4f}\",\n)\nax2.set_title(\"Funci\u00f3n de Distribuci\u00f3n Acumulada (CDF)\")\nax2.set_xlabel(\"Valor de F\")\nax2.set_ylabel(\"Probabilidad Acumulada\")\nax2.legend()\n\n# Ajustar el espacio entre subgr\u00e1ficos\nplt.tight_layout()\n\n# Mostrar la figura\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import f  # Par\u00e1metros df1 = 12  # Grados de libertad del numerador (Grupo 1) df2 = 10  # Grados de libertad del denominador (Grupo 2) f_value = 2.5  # Valor de F para el cual se calcula la probabilidad acumulada  # Crear un rango de valores para el eje X x = np.linspace(0, 5, 1000)  # Desde 0 hasta 5 para cubrir la distribuci\u00f3n F  # Calcular la PDF y la CDF pdf_values = f.pdf(x, df1, df2)  # Funci\u00f3n de densidad de probabilidad cdf_values = f.cdf(x, df1, df2)  # Funci\u00f3n de distribuci\u00f3n acumulada  # Calcular la probabilidad acumulada para el valor espec\u00edfico f_value prob_f = f.cdf(f_value, df1, df2)  # Crear la figura y los subgr\u00e1ficos (1 fila, 2 columnas) fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))  # --- Subgr\u00e1fico 1: PDF --- ax1.plot(x, pdf_values, label=f\"PDF (F, gl1 = {df1}, gl2 = {df2})\", color=\"blue\") ax1.fill_between(     x,     pdf_values,     where=(x &lt;= f_value),     color=\"lightblue\",     alpha=0.5,     label=f\"P(F  $\\leq$ {f_value}) = {prob_f:.4f}\", ) ax1.axvline(f_value, color=\"green\", linestyle=\"--\", label=f\"F = {f_value}\") ax1.set_title(\"Funci\u00f3n de Densidad de Probabilidad (PDF)\") ax1.set_xlabel(\"Valor de F\") ax1.set_ylabel(\"Densidad\") ax1.legend() ax1.grid(True)  # --- Subgr\u00e1fico 2: CDF --- ax2.plot(x, cdf_values, label=f\"CDF (F, gl1 = {df1}, gl2 = {df2})\", color=\"red\") ax2.axvline(f_value, color=\"green\", linestyle=\"--\", label=f\"F = {f_value}\") ax2.axhline(     prob_f,     color=\"orange\",     linestyle=\"--\",     label=f\"P(F $\\leq$ {f_value}) = {prob_f:.4f}\", ) ax2.set_title(\"Funci\u00f3n de Distribuci\u00f3n Acumulada (CDF)\") ax2.set_xlabel(\"Valor de F\") ax2.set_ylabel(\"Probabilidad Acumulada\") ax2.legend()  # Ajustar el espacio entre subgr\u00e1ficos plt.tight_layout()  # Mostrar la figura plt.show()"},{"location":"Contenido/20_Distribuci%C3%B3n%20F.html#20_distribucion-f-de-fisher-snedecor","title":"20_DISTRIBUCI\u00d3N F DE FISHER-SNEDECOR\u00b6","text":""},{"location":"Contenido/21_Distribuci%C3%B3n%20Normal%20Multivariante.html","title":"21_DISTRIBUCI\u00d3N NORMAL MULTIVARIANTE","text":"In\u00a0[10]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\n\n# Par\u00e1metros de la distribuci\u00f3n\nmu = np.array([500, 200])\nSigma = np.array([[2500, 1000], [1000, 1600]])\n\n# Creamos el objeto distribuci\u00f3n normal bivariante\ndist = multivariate_normal(mean=mu, cov=Sigma)\n\n# Generamos una malla de puntos para graficar\nx, y = np.meshgrid(np.linspace(400, 600, 100), np.linspace(150, 250, 100))\npos = np.dstack((x, y))\n\n# Evaluamos la pdf en la malla de puntos\npdf_values = dist.pdf(pos)\n\n# Graficamos el mapa de contorno\nplt.contourf(x, y, pdf_values, levels=20, cmap=\"viridis\")\nplt.colorbar(label=\"Densidad de probabilidad\")\nplt.scatter(mu[0], mu[1], color=\"red\", label=\"Media (500,200)\")\nplt.xlabel(\"Resistencia a la tracci\u00f3n (MPa)\")\nplt.ylabel(\"Dureza (HV)\")\nplt.title(\"Distribuci\u00f3n Normal Bivariante\")\nplt.legend()\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import multivariate_normal  # Par\u00e1metros de la distribuci\u00f3n mu = np.array([500, 200]) Sigma = np.array([[2500, 1000], [1000, 1600]])  # Creamos el objeto distribuci\u00f3n normal bivariante dist = multivariate_normal(mean=mu, cov=Sigma)  # Generamos una malla de puntos para graficar x, y = np.meshgrid(np.linspace(400, 600, 100), np.linspace(150, 250, 100)) pos = np.dstack((x, y))  # Evaluamos la pdf en la malla de puntos pdf_values = dist.pdf(pos)  # Graficamos el mapa de contorno plt.contourf(x, y, pdf_values, levels=20, cmap=\"viridis\") plt.colorbar(label=\"Densidad de probabilidad\") plt.scatter(mu[0], mu[1], color=\"red\", label=\"Media (500,200)\") plt.xlabel(\"Resistencia a la tracci\u00f3n (MPa)\") plt.ylabel(\"Dureza (HV)\") plt.title(\"Distribuci\u00f3n Normal Bivariante\") plt.legend() plt.show() In\u00a0[20]: Copied! <pre># Gr\u00e1fica en 3D\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, projection=\"3d\")\nax.plot_surface(x, y, pdf_values, cmap=\"viridis\", alpha=0.8)\nax.set_xlabel(\"Resistencia (MPa)\")\nax.set_ylabel(\"Dureza (HV)\")\nax.set_zlabel(\"Densidad de probabilidad\")\nax.set_title(\"Distribuci\u00f3n Normal Bivariante (3D)\")\nplt.show()\n</pre> # Gr\u00e1fica en 3D fig = plt.figure(figsize=(8, 8)) ax = fig.add_subplot(111, projection=\"3d\") ax.plot_surface(x, y, pdf_values, cmap=\"viridis\", alpha=0.8) ax.set_xlabel(\"Resistencia (MPa)\") ax.set_ylabel(\"Dureza (HV)\") ax.set_zlabel(\"Densidad de probabilidad\") ax.set_title(\"Distribuci\u00f3n Normal Bivariante (3D)\") plt.show() In\u00a0[32]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal, norm\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Par\u00e1metros de la distribuci\u00f3n\nmu = np.array([500, 200])  # Vector de medias\nSigma = np.array([[2500, 1000], [1000, 1600]])  # Matriz de covarianza\n\n# Crear una distribuci\u00f3n normal multivariante\ndist = multivariate_normal(mean=mu, cov=Sigma)\n\n# Generar una malla de puntos para graficar\nx, y = np.meshgrid(np.linspace(400, 600, 100), np.linspace(150, 250, 100))\npos = np.dstack((x, y))\n\n# Evaluar la PDF en la malla de puntos\npdf_values = dist.pdf(pos)\n\n# Distribuciones marginales\nx_marginal = norm(loc=mu[0], scale=np.sqrt(Sigma[0, 0]))  # Marginal de X\u2081\ny_marginal = norm(loc=mu[1], scale=np.sqrt(Sigma[1, 1]))  # Marginal de X\u2082\n\n# Distribuci\u00f3n condicional de X\u2082 dado X\u2081 = 500\nx1_cond = 500  # Valor fijo de X\u2081\nmu_cond = mu[1] + Sigma[1, 0] / Sigma[0, 0] * (x1_cond - mu[0])  # Media condicional\nsigma_cond = np.sqrt(\n    Sigma[1, 1] - Sigma[1, 0] ** 2 / Sigma[0, 0]\n)  # Varianza condicional\ny_cond = norm(loc=mu_cond, scale=sigma_cond)  # Condicional de X\u2082 | X\u2081 = 500\n\n# Gr\u00e1fica en 3D\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection=\"3d\")\n\n# Superficie de la distribuci\u00f3n bivariante\nax.plot_surface(x, y, pdf_values, cmap=\"viridis\", alpha=0.6)\n\n# Curva marginal de X\u2081 (en el plano X\u2081-Z)\nx_vals = np.linspace(400, 600, 100)\nz_marginal_x = x_marginal.pdf(x_vals)\nax.plot(\n    x_vals,\n    np.full_like(x_vals, mu[1]),\n    z_marginal_x,\n    color=\"red\",\n    label=\"Marginal de X\u2081\",\n)\n\n# Curva marginal de X\u2082 (en el plano X\u2082-Z)\ny_vals = np.linspace(125, 275, 100)\nz_marginal_y = y_marginal.pdf(y_vals)\nax.plot(\n    np.full_like(y_vals, mu[0]),\n    y_vals,\n    z_marginal_y,\n    color=\"blue\",\n    label=\"Marginal de X\u2082\",\n)\n\n# Curva condicional de X\u2082 | X\u2081 = 500 (en el plano X\u2082-Z)\ny_cond_vals = np.linspace(125, 275, 100)\nz_cond = y_cond.pdf(y_cond_vals)\nax.plot(\n    np.full_like(y_cond_vals, x1_cond),\n    y_cond_vals,\n    z_cond,\n    color=\"green\",\n    label=\"Condicional de X\u2082 | X\u2081 = 500\",\n)\n\n# Configuraci\u00f3n del gr\u00e1fico\nax.set_xlabel(\"Resistencia (MPa)\")\nax.set_ylabel(\"Dureza (HV)\")\nax.set_zlabel(\"Densidad\")\nax.set_title(\"Distribuci\u00f3n Normal Bivariante con Marginales y Condicionales\")\nax.legend()\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import multivariate_normal, norm from mpl_toolkits.mplot3d import Axes3D  # Par\u00e1metros de la distribuci\u00f3n mu = np.array([500, 200])  # Vector de medias Sigma = np.array([[2500, 1000], [1000, 1600]])  # Matriz de covarianza  # Crear una distribuci\u00f3n normal multivariante dist = multivariate_normal(mean=mu, cov=Sigma)  # Generar una malla de puntos para graficar x, y = np.meshgrid(np.linspace(400, 600, 100), np.linspace(150, 250, 100)) pos = np.dstack((x, y))  # Evaluar la PDF en la malla de puntos pdf_values = dist.pdf(pos)  # Distribuciones marginales x_marginal = norm(loc=mu[0], scale=np.sqrt(Sigma[0, 0]))  # Marginal de X\u2081 y_marginal = norm(loc=mu[1], scale=np.sqrt(Sigma[1, 1]))  # Marginal de X\u2082  # Distribuci\u00f3n condicional de X\u2082 dado X\u2081 = 500 x1_cond = 500  # Valor fijo de X\u2081 mu_cond = mu[1] + Sigma[1, 0] / Sigma[0, 0] * (x1_cond - mu[0])  # Media condicional sigma_cond = np.sqrt(     Sigma[1, 1] - Sigma[1, 0] ** 2 / Sigma[0, 0] )  # Varianza condicional y_cond = norm(loc=mu_cond, scale=sigma_cond)  # Condicional de X\u2082 | X\u2081 = 500  # Gr\u00e1fica en 3D fig = plt.figure(figsize=(12, 8)) ax = fig.add_subplot(111, projection=\"3d\")  # Superficie de la distribuci\u00f3n bivariante ax.plot_surface(x, y, pdf_values, cmap=\"viridis\", alpha=0.6)  # Curva marginal de X\u2081 (en el plano X\u2081-Z) x_vals = np.linspace(400, 600, 100) z_marginal_x = x_marginal.pdf(x_vals) ax.plot(     x_vals,     np.full_like(x_vals, mu[1]),     z_marginal_x,     color=\"red\",     label=\"Marginal de X\u2081\", )  # Curva marginal de X\u2082 (en el plano X\u2082-Z) y_vals = np.linspace(125, 275, 100) z_marginal_y = y_marginal.pdf(y_vals) ax.plot(     np.full_like(y_vals, mu[0]),     y_vals,     z_marginal_y,     color=\"blue\",     label=\"Marginal de X\u2082\", )  # Curva condicional de X\u2082 | X\u2081 = 500 (en el plano X\u2082-Z) y_cond_vals = np.linspace(125, 275, 100) z_cond = y_cond.pdf(y_cond_vals) ax.plot(     np.full_like(y_cond_vals, x1_cond),     y_cond_vals,     z_cond,     color=\"green\",     label=\"Condicional de X\u2082 | X\u2081 = 500\", )  # Configuraci\u00f3n del gr\u00e1fico ax.set_xlabel(\"Resistencia (MPa)\") ax.set_ylabel(\"Dureza (HV)\") ax.set_zlabel(\"Densidad\") ax.set_title(\"Distribuci\u00f3n Normal Bivariante con Marginales y Condicionales\") ax.legend() plt.show() In\u00a0[33]: Copied! <pre>prob_x1_less_than_550 = x_marginal.cdf(550)\nprint(f\"P(X\u2081 &lt; 550) = {prob_x1_less_than_550:.4f}\")\n</pre> prob_x1_less_than_550 = x_marginal.cdf(550) print(f\"P(X\u2081 &lt; 550) = {prob_x1_less_than_550:.4f}\") <pre>P(X\u2081 &lt; 550) = 0.8413\n</pre> In\u00a0[34]: Copied! <pre>prob_x2_greater_than_220 = 1 - y_marginal.cdf(220)\nprint(f\"P(X\u2082 &gt; 220) = {prob_x2_greater_than_220:.4f}\")\n</pre> prob_x2_greater_than_220 = 1 - y_marginal.cdf(220) print(f\"P(X\u2082 &gt; 220) = {prob_x2_greater_than_220:.4f}\") <pre>P(X\u2082 &gt; 220) = 0.3085\n</pre> In\u00a0[39]: Copied! <pre># Calcular la probabilidad conjunta\nprob_joint = dist.cdf([550, 220])\nprint(f\"P(X\u2081 &lt; 550 \u2229 X\u2082 &lt; 220) = {prob_joint:.4f}\")\n</pre> # Calcular la probabilidad conjunta prob_joint = dist.cdf([550, 220]) print(f\"P(X\u2081 &lt; 550 \u2229 X\u2082 &lt; 220) = {prob_joint:.4f}\") <pre>P(X\u2081 &lt; 550 \u2229 X\u2082 &lt; 220) = 0.6303\n</pre> In\u00a0[43]: Copied! <pre># Valor fijo de X\u2081\nx1_cond = 500\n\n# Media y varianza condicional de X\u2082 | X\u2081 = 500\nmu_cond = mu[1] + Sigma[1, 0] / Sigma[0, 0] * (x1_cond - mu[0])  # Media condicional\nsigma_cond = np.sqrt(\n    Sigma[1, 1] - Sigma[1, 0] ** 2 / Sigma[0, 0]\n)  # Varianza condicional\n\n# Crear la distribuci\u00f3n condicional\ny_cond = norm(loc=mu_cond, scale=sigma_cond)\n\n# Calcular P(X\u2082 &gt; 220 | X\u2081 = 500)\nprob_cond = 1 - y_cond.cdf(220)\nprint(f\"P(X\u2082 &gt; 220 | X\u2081 = 500) = {prob_cond:.4f}\")\n</pre> # Valor fijo de X\u2081 x1_cond = 500  # Media y varianza condicional de X\u2082 | X\u2081 = 500 mu_cond = mu[1] + Sigma[1, 0] / Sigma[0, 0] * (x1_cond - mu[0])  # Media condicional sigma_cond = np.sqrt(     Sigma[1, 1] - Sigma[1, 0] ** 2 / Sigma[0, 0] )  # Varianza condicional  # Crear la distribuci\u00f3n condicional y_cond = norm(loc=mu_cond, scale=sigma_cond)  # Calcular P(X\u2082 &gt; 220 | X\u2081 = 500) prob_cond = 1 - y_cond.cdf(220) print(f\"P(X\u2082 &gt; 220 | X\u2081 = 500) = {prob_cond:.4f}\") <pre>P(X\u2082 &gt; 220 | X\u2081 = 500) = 0.2819\n</pre>"},{"location":"Contenido/21_Distribuci%C3%B3n%20Normal%20Multivariante.html#21_distribucion-normal-multivariante","title":"21_DISTRIBUCI\u00d3N NORMAL MULTIVARIANTE\u00b6","text":""},{"location":"Contenido/21_Distribuci%C3%B3n%20Normal%20Multivariante.html#ingenieria-de-materiales","title":"Ingenier\u00eda de materiales\u00b6","text":""},{"location":"Contenido/22_Teorema%20Central%20del%20L%C3%ADmite.html","title":"22_TEOREMA CENTRAL DEL L\u00cdMITE","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Generamos 10_000 datos de una distribuci\u00f3n exponencial (no es normal)\nescala = 2\ndatos = np.random.exponential(scale=escala, size=10_000)\nprint(\n    f\"Se ha generado un array con {len(datos)} observaciones de una exponencial de escala {escala}\"\n)\nprint(\n    f\"La media de estos datos debe ser un valor muy pr\u00f3ximo a {escala}: media de los datos generados = {datos.mean()}.\"\n)\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt import seaborn as sns  # Generamos 10_000 datos de una distribuci\u00f3n exponencial (no es normal) escala = 2 datos = np.random.exponential(scale=escala, size=10_000) print(     f\"Se ha generado un array con {len(datos)} observaciones de una exponencial de escala {escala}\" ) print(     f\"La media de estos datos debe ser un valor muy pr\u00f3ximo a {escala}: media de los datos generados = {datos.mean()}.\" ) In\u00a0[\u00a0]: Copied! <pre>def medias_muestrales(dist, numero_muestras, size_muestras):\n    # Define una lista con las medias vac\u00eda\n    medias = []\n    for _ in range(numero_muestras):\n        # Elige de la poblaci\u00f3n \"dist\" muestras de tama\u00f1o \"size_muestras\"\n        muestra = np.random.choice(dist, size=size_muestras)\n        \"\"\" Calcula la meda de la muestra obtenida en cada iteraci\u00f3n\n        y a\u00f1ade a la lista de medias\"\"\"\n        medias.append(np.mean(muestra))\n    return medias  # Devuelve la lista con las medias muestrales\n</pre> def medias_muestrales(dist, numero_muestras, size_muestras):     # Define una lista con las medias vac\u00eda     medias = []     for _ in range(numero_muestras):         # Elige de la poblaci\u00f3n \"dist\" muestras de tama\u00f1o \"size_muestras\"         muestra = np.random.choice(dist, size=size_muestras)         \"\"\" Calcula la meda de la muestra obtenida en cada iteraci\u00f3n         y a\u00f1ade a la lista de medias\"\"\"         medias.append(np.mean(muestra))     return medias  # Devuelve la lista con las medias muestrales In\u00a0[\u00a0]: Copied! <pre>numero_muestras = 1000\ntamano_muestras = [5, 30, 100]\nmedias_5 = medias_muestrales(datos, numero_muestras, tamano_muestras[0])\nmedias_30 = medias_muestrales(datos, numero_muestras, tamano_muestras[1])\nmedias_100 = medias_muestrales(datos, numero_muestras, tamano_muestras[2])\n</pre> numero_muestras = 1000 tamano_muestras = [5, 30, 100] medias_5 = medias_muestrales(datos, numero_muestras, tamano_muestras[0]) medias_30 = medias_muestrales(datos, numero_muestras, tamano_muestras[1]) medias_100 = medias_muestrales(datos, numero_muestras, tamano_muestras[2]) In\u00a0[\u00a0]: Copied! <pre>plt.figure(figsize=(18, 12))\n\n# Histograma de datos (matriz 2x2 de histogramas)\nplt.subplot(2, 2, 1)\nsns.histplot(datos, kde=True, color=\"blue\", bins=30)\nplt.title(f\"Datos exponencial de escala {escala}\")\nplt.ylabel(\"Frecuencia\")\n\n# Gr\u00e1fico de medias muestrales de tama\u00f1o 5\nplt.subplot(2, 2, 2)\nsns.histplot(medias_5, kde=True, color=\"red\", bins=30)\nplt.title(\"Distribuci\u00f3n de medias muestrales (n=5)\")\nplt.xlabel(\"Media muestral\")\nplt.ylabel(\"Frecuencia\")\n\n# Gr\u00e1fico de medias muestrales de tama\u00f1o 30\nplt.subplot(2, 2, 3)\nsns.histplot(medias_30, kde=True, color=\"green\", bins=30)\nplt.title(\"Distribuci\u00f3n de medias muestrales (n=30)\")\nplt.xlabel(\"Media muestral\")\nplt.ylabel(\"Frecuencia\")\n\n# Gr\u00e1fico de medias muestrales de tama\u00f1o 100\nplt.subplot(2, 2, 4)\nsns.histplot(medias_100, kde=True, color=\"grey\", bins=30)\nplt.title(\"Distribuci\u00f3n de medias muestrales (n=100)\")\nplt.xlabel(\"Media muestral\")\nplt.ylabel(\"Frecuencia\")\n</pre> plt.figure(figsize=(18, 12))  # Histograma de datos (matriz 2x2 de histogramas) plt.subplot(2, 2, 1) sns.histplot(datos, kde=True, color=\"blue\", bins=30) plt.title(f\"Datos exponencial de escala {escala}\") plt.ylabel(\"Frecuencia\")  # Gr\u00e1fico de medias muestrales de tama\u00f1o 5 plt.subplot(2, 2, 2) sns.histplot(medias_5, kde=True, color=\"red\", bins=30) plt.title(\"Distribuci\u00f3n de medias muestrales (n=5)\") plt.xlabel(\"Media muestral\") plt.ylabel(\"Frecuencia\")  # Gr\u00e1fico de medias muestrales de tama\u00f1o 30 plt.subplot(2, 2, 3) sns.histplot(medias_30, kde=True, color=\"green\", bins=30) plt.title(\"Distribuci\u00f3n de medias muestrales (n=30)\") plt.xlabel(\"Media muestral\") plt.ylabel(\"Frecuencia\")  # Gr\u00e1fico de medias muestrales de tama\u00f1o 100 plt.subplot(2, 2, 4) sns.histplot(medias_100, kde=True, color=\"grey\", bins=30) plt.title(\"Distribuci\u00f3n de medias muestrales (n=100)\") plt.xlabel(\"Media muestral\") plt.ylabel(\"Frecuencia\")"},{"location":"Contenido/22_Teorema%20Central%20del%20L%C3%ADmite.html#22_teorema-central-del-limite","title":"22_TEOREMA CENTRAL DEL L\u00cdMITE\u00b6","text":""},{"location":"Contenido/23_Estimaci%C3%B3n%20puntual%20de%20par%C3%A1metros%20I.html","title":"23_INFERENCIA ESTAD\u00cdSTICA: ESTIMACI\u00d3N PUNTUAL DE PAR\u00c1METROS (I)","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos las libreri\u00e1s\nimport numpy as np\nimport pandas as pd\n</pre> # Importamos las libreri\u00e1s import numpy as np import pandas as pd In\u00a0[\u00a0]: Copied! <pre># Fijamos la semilla aleatoria, para asegurar reproducibilidad\nnp.random.seed(567)\n\n# Creamos la poblaci\u00f3n de 1000 individuos N(170,10)\npopulation = np.random.normal(loc=170, scale=10, size=1000)\npopulation_pd = pd.Series(\n    population\n)  # Creamos una serie de Pandas para visualizar los datos\npopulation_pd.head()  # Veamos los 5 primeros valores de la serie de alturas\n</pre> # Fijamos la semilla aleatoria, para asegurar reproducibilidad np.random.seed(567)  # Creamos la poblaci\u00f3n de 1000 individuos N(170,10) population = np.random.normal(loc=170, scale=10, size=1000) population_pd = pd.Series(     population )  # Creamos una serie de Pandas para visualizar los datos population_pd.head()  # Veamos los 5 primeros valores de la serie de alturas In\u00a0[\u00a0]: Copied! <pre>\"\"\"Calculamos los par\u00e1metros poblacionales. \u00c9stos son los valores de partida,\ndesconocidos para el investigador\"\"\"\n\nmean_mu = np.mean(population)\nstd_sigma = np.std(population)\nprint(f\"Media poblacional = {mean_mu:.2f}\")\nprint(f\"Desviaci\u00f3n t\u00edpica poblacional = {std_sigma:.2f}\")\n</pre> \"\"\"Calculamos los par\u00e1metros poblacionales. \u00c9stos son los valores de partida, desconocidos para el investigador\"\"\"  mean_mu = np.mean(population) std_sigma = np.std(population) print(f\"Media poblacional = {mean_mu:.2f}\") print(f\"Desviaci\u00f3n t\u00edpica poblacional = {std_sigma:.2f}\") In\u00a0[\u00a0]: Copied! <pre># Obtenemos ahora una muestra aleatoria simple sin reemplazamiento de tama\u00f1o 100\nsample_size = 100\nsample = np.random.choice(population, size=sample_size, replace=False)\n</pre> # Obtenemos ahora una muestra aleatoria simple sin reemplazamiento de tama\u00f1o 100 sample_size = 100 sample = np.random.choice(population, size=sample_size, replace=False) In\u00a0[\u00a0]: Copied! <pre># m Creamos una serie de pandas para visualizar mejor los datos\nsample_pd = pd.Series(sample)\nsample_pd.head()  # Muestra los 5 primeros datos de la serie\n</pre> # m Creamos una serie de pandas para visualizar mejor los datos sample_pd = pd.Series(sample) sample_pd.head()  # Muestra los 5 primeros datos de la serie In\u00a0[\u00a0]: Copied! <pre># Calculamos ahora los estimadores puntuales\nmean_sample = np.mean(sample)\nstd_sample = np.std(sample, ddof=1)  # ddfo = 1 hace que sea insesgada (divide por n-1)\nprint(f\"Media muestral = {mean_sample:.2f}\")\nprint(f\"Desviaci\u00f3n standard muestral = {std_sample:.2f}\")\n</pre> # Calculamos ahora los estimadores puntuales mean_sample = np.mean(sample) std_sample = np.std(sample, ddof=1)  # ddfo = 1 hace que sea insesgada (divide por n-1) print(f\"Media muestral = {mean_sample:.2f}\") print(f\"Desviaci\u00f3n standard muestral = {std_sample:.2f}\") In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport pandas as pd\n\n\"\"\" Al importar nuevamente numpy, si queremos reproducir los resultados debemos fijar\nnuevamente la semilla aleatoria \"\"\"\nnp.random.seed(8934)  # Marcar si queremos obtener diferentes resultados\n\n\"\"\" Generamos una poblaci\u00f3n binomial con probabilidad de \u00e9xito (defectuosa) 0.7 y tama\u00f1o 1000. \nEn principio, el controlador de calidad no conoce el valor del par\u00e1metro p = 0.7\"\"\"\ndata_binomial = np.random.binomial(1, 0.7, size=1000)  # 1000 experimentos Bernouilli\n\n# Obtenemos una muestra de tama\u00f1o 100 de la poblaci\u00f3n de datos\nsample_binomial = np.random.choice(data_binomial, size=100, replace=False)\n\"\"\" Definimos una funci\u00f3n que recibe una poblaci\u00f3n y un valor de \u00e9xito\ny devuelve la estimaci\u00f3n puntual de la proporci\u00f3n y del error est\u00e1ndar \"\"\"\n\n\ndef estimar_proporcion(sample, valor_exito):\n    n = len(sample)\n    exitos = np.sum(sample == valor_exito)\n    estimador_p = exitos / n\n    estimador_se = np.sqrt((estimador_p * (1 - estimador_p)) / n)\n    return estimador_p, estimador_se\n\n\n# Pasamos a esta funci\u00f3n nuestros datos Bernouilli indicando que el \u00e9xito es 1\np_estimada, se_estimada = estimar_proporcion(sample_binomial, 1)\nprint(\"Estimaci\u00f3n de la proporci\u00f3n:\")\nprint(f\"\\tProporci\u00f3n estimada = {p_estimada:.4f}\")\nprint(f\"\\tError est\u00e1ndar estimado: {se_estimada:.4f}\")\nprint(\n    f\"Con esta muestra, la proporci\u00f3n de piezas defectuosas es del {p_estimada * 100:.2f} % con un error est\u00e1ndar del {se_estimada * 100:.2f} %.\"\n)\n</pre> import numpy as np import pandas as pd  \"\"\" Al importar nuevamente numpy, si queremos reproducir los resultados debemos fijar nuevamente la semilla aleatoria \"\"\" np.random.seed(8934)  # Marcar si queremos obtener diferentes resultados  \"\"\" Generamos una poblaci\u00f3n binomial con probabilidad de \u00e9xito (defectuosa) 0.7 y tama\u00f1o 1000.  En principio, el controlador de calidad no conoce el valor del par\u00e1metro p = 0.7\"\"\" data_binomial = np.random.binomial(1, 0.7, size=1000)  # 1000 experimentos Bernouilli  # Obtenemos una muestra de tama\u00f1o 100 de la poblaci\u00f3n de datos sample_binomial = np.random.choice(data_binomial, size=100, replace=False) \"\"\" Definimos una funci\u00f3n que recibe una poblaci\u00f3n y un valor de \u00e9xito y devuelve la estimaci\u00f3n puntual de la proporci\u00f3n y del error est\u00e1ndar \"\"\"   def estimar_proporcion(sample, valor_exito):     n = len(sample)     exitos = np.sum(sample == valor_exito)     estimador_p = exitos / n     estimador_se = np.sqrt((estimador_p * (1 - estimador_p)) / n)     return estimador_p, estimador_se   # Pasamos a esta funci\u00f3n nuestros datos Bernouilli indicando que el \u00e9xito es 1 p_estimada, se_estimada = estimar_proporcion(sample_binomial, 1) print(\"Estimaci\u00f3n de la proporci\u00f3n:\") print(f\"\\tProporci\u00f3n estimada = {p_estimada:.4f}\") print(f\"\\tError est\u00e1ndar estimado: {se_estimada:.4f}\") print(     f\"Con esta muestra, la proporci\u00f3n de piezas defectuosas es del {p_estimada * 100:.2f} % con un error est\u00e1ndar del {se_estimada * 100:.2f} %.\" )"},{"location":"Contenido/23_Estimaci%C3%B3n%20puntual%20de%20par%C3%A1metros%20I.html#23_inferencia-estadistica-estimacion-puntual-de-parametros-i","title":"23_INFERENCIA ESTAD\u00cdSTICA: ESTIMACI\u00d3N PUNTUAL DE PAR\u00c1METROS (I)\u00b6","text":""},{"location":"Contenido/24_Estimacion%20puntual_II.html","title":"24_ESTIMACI\u00d3N PUNTUAL DE PAR\u00c1METROS (II)","text":"In\u00a0[1]: Copied! <pre># Importamos todas las librer\u00edas\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n\n# Definimos la semilla aleatoria\nnp.random.seed(567)\n\n# Generamos una poblaci\u00f3n N(170,10) de tama\u00f1o 10000\npopulation = np.random.normal(loc=170, scale=10, size=10000)\n\n# Obtenemos una muestra aleatoria simple sin reemplazamiento de 100 individuos\nsize_sample = 100\nsample = np.random.choice(population, size=size_sample)\n\n# Para facilitar la visualizaci\u00f3n creamos series de pandas y mostramos los 5 primeros valores\npopulation_pd = pd.Series(population)\nsample_pd = pd.Series(sample)\nprint(f\"La poblaci\u00f3n tiene {len(population)} individuos\")\nprint(population_pd.head())\nprint()\nprint(f\"La muestra tiene {len(sample)} individuos\")\nprint(sample_pd.head())\nprint()\nmean_mu = np.mean(population)\nstd_sigma = np.std(population)\nprint(f\"Media poblacional = {mean_mu:.2f}\")\nprint(f\"Desviaci\u00f3n t\u00edpica poblacional = {std_sigma:.2f}\")\nprint()\nmean_sample = np.mean(sample)\nstd_sample = np.std(sample, ddof=1)  # ddfo = 1 hace que sea insesgada (divide por n-1)\nprint(f\"Media muestral = {mean_sample:.2f}\")\nprint(f\"Desviaci\u00f3n est\u00e1ndar muestral = {std_sample:.2f}\")\n</pre> # Importamos todas las librer\u00edas import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from scipy import stats  # Definimos la semilla aleatoria np.random.seed(567)  # Generamos una poblaci\u00f3n N(170,10) de tama\u00f1o 10000 population = np.random.normal(loc=170, scale=10, size=10000)  # Obtenemos una muestra aleatoria simple sin reemplazamiento de 100 individuos size_sample = 100 sample = np.random.choice(population, size=size_sample)  # Para facilitar la visualizaci\u00f3n creamos series de pandas y mostramos los 5 primeros valores population_pd = pd.Series(population) sample_pd = pd.Series(sample) print(f\"La poblaci\u00f3n tiene {len(population)} individuos\") print(population_pd.head()) print() print(f\"La muestra tiene {len(sample)} individuos\") print(sample_pd.head()) print() mean_mu = np.mean(population) std_sigma = np.std(population) print(f\"Media poblacional = {mean_mu:.2f}\") print(f\"Desviaci\u00f3n t\u00edpica poblacional = {std_sigma:.2f}\") print() mean_sample = np.mean(sample) std_sample = np.std(sample, ddof=1)  # ddfo = 1 hace que sea insesgada (divide por n-1) print(f\"Media muestral = {mean_sample:.2f}\") print(f\"Desviaci\u00f3n est\u00e1ndar muestral = {std_sample:.2f}\") <pre>La poblaci\u00f3n tiene 10000 individuos\n0    172.132661\n1    169.081006\n2    169.106513\n3    172.657557\n4    173.760651\ndtype: float64\n\nLa muestra tiene 100 individuos\n0    161.413622\n1    175.846687\n2    173.536996\n3    146.193062\n4    188.447647\ndtype: float64\n\nMedia poblacional = 169.99\nDesviaci\u00f3n t\u00edpica poblacional = 10.05\n\nMedia muestral = 169.07\nDesviaci\u00f3n est\u00e1ndar muestral = 10.95\n</pre> In\u00a0[2]: Copied! <pre># Creamos un funci\u00f3n que devuelve gr\u00e1ficos para comparar la poblaci\u00f3n y la muestra\n\n\ndef compare_population_sample(population, sample):\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))\n\n    # Gr\u00e1fico de la poblaci\u00f3n\n    sns.histplot(population, kde=True, ax=ax1, color=\"blue\", alpha=0.6)\n    ax1.axvline(\n        np.mean(population), color=\"red\", linestyle=\"--\", label=\"Media poblacional\"\n    )\n    ax1.set_title(\"Distribuci\u00f3n poblacional\")\n    ax1.legend()\n\n    # Gr\u00e1fico de la muestra\n    sns.histplot(sample, kde=True, ax=ax2, color=\"green\", alpha=0.6)\n    ax2.axvline(np.mean(sample), color=\"red\", linestyle=\"--\", label=\"Media muestral\")\n    ax2.set_title(\"Distribuci\u00f3n muestral\")\n    ax2.legend()\n\n    plt.tight_layout()\n    plt.show\n\n\n# Pasamos a esta funci\u00f3n nuestras poblaci\u00f3n y muestra\ncompare_population_sample(population, sample)\n</pre> # Creamos un funci\u00f3n que devuelve gr\u00e1ficos para comparar la poblaci\u00f3n y la muestra   def compare_population_sample(population, sample):     fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))      # Gr\u00e1fico de la poblaci\u00f3n     sns.histplot(population, kde=True, ax=ax1, color=\"blue\", alpha=0.6)     ax1.axvline(         np.mean(population), color=\"red\", linestyle=\"--\", label=\"Media poblacional\"     )     ax1.set_title(\"Distribuci\u00f3n poblacional\")     ax1.legend()      # Gr\u00e1fico de la muestra     sns.histplot(sample, kde=True, ax=ax2, color=\"green\", alpha=0.6)     ax2.axvline(np.mean(sample), color=\"red\", linestyle=\"--\", label=\"Media muestral\")     ax2.set_title(\"Distribuci\u00f3n muestral\")     ax2.legend()      plt.tight_layout()     plt.show   # Pasamos a esta funci\u00f3n nuestras poblaci\u00f3n y muestra compare_population_sample(population, sample) <pre>C:\\Users\\UJA\\.conda\\envs\\Matematicas\\lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\nC:\\Users\\UJA\\.conda\\envs\\Matematicas\\lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n</pre> In\u00a0[3]: Copied! <pre># Importamos la funci\u00f3n apropiada de Scipy\nfrom scipy.optimize import minimize\n\n\n# Definimos la funci\u00f3n de verosimilitud para N(mu,sigma) y la muestra\ndef log_MLV_normal(params, data):\n    mu, sigma = params\n    return -np.sum(stats.norm.logpdf(data, mu, sigma))\n\n\n# Muestra, la que calculamos antes\ndata_MLE = sample\n\n\"\"\" Estimaci\u00f3n por m\u00e1xima verosimilitud, partimos de los par\u00e1metros muestrales\nmedia y desviaci\u00f3n t\u00edpica (la sesgada) \"\"\"\ninitial_result = [np.mean(data_MLE), np.std(data_MLE)]\nresult = minimize(\n    log_MLV_normal, initial_result, args=(data_MLE,), method=\"Nelder-Mead\"\n)\n\n# Veamos la salida\nresult\n</pre> # Importamos la funci\u00f3n apropiada de Scipy from scipy.optimize import minimize   # Definimos la funci\u00f3n de verosimilitud para N(mu,sigma) y la muestra def log_MLV_normal(params, data):     mu, sigma = params     return -np.sum(stats.norm.logpdf(data, mu, sigma))   # Muestra, la que calculamos antes data_MLE = sample  \"\"\" Estimaci\u00f3n por m\u00e1xima verosimilitud, partimos de los par\u00e1metros muestrales media y desviaci\u00f3n t\u00edpica (la sesgada) \"\"\" initial_result = [np.mean(data_MLE), np.std(data_MLE)] result = minimize(     log_MLV_normal, initial_result, args=(data_MLE,), method=\"Nelder-Mead\" )  # Veamos la salida result Out[3]: <pre>       message: Optimization terminated successfully.\n       success: True\n        status: 0\n           fun: 380.74789430585804\n             x: [ 1.691e+02  1.090e+01]\n           nit: 30\n          nfev: 61\n final_simplex: (array([[ 1.691e+02,  1.090e+01],\n                       [ 1.691e+02,  1.090e+01],\n                       [ 1.691e+02,  1.090e+01]]), array([ 3.807e+02,  3.807e+02,  3.807e+02]))</pre> In\u00a0[4]: Copied! <pre># Extraemos de esta informaci\u00f3n los par\u00e1metros estimados, el array x\nprint(\"Estimaci\u00f3n por M\u00e1xima Verosimilitud:\")\nprint(f\"\\tMedia estimada = {result.x[0]:.2f}\")\nprint(f\"\\tDeviaci\u00f3n est\u00e1ndar estimada = {result.x[1]:.2f}\")\n</pre> # Extraemos de esta informaci\u00f3n los par\u00e1metros estimados, el array x print(\"Estimaci\u00f3n por M\u00e1xima Verosimilitud:\") print(f\"\\tMedia estimada = {result.x[0]:.2f}\") print(f\"\\tDeviaci\u00f3n est\u00e1ndar estimada = {result.x[1]:.2f}\") <pre>Estimaci\u00f3n por M\u00e1xima Verosimilitud:\n\tMedia estimada = 169.07\n\tDeviaci\u00f3n est\u00e1ndar estimada = 10.90\n</pre> In\u00a0[5]: Copied! <pre># Funci\u00f3n para obtener m\u00faltiples muestras\ndef multiple_sample(\n    population, sample_size, n_samples=1000\n):  # Poblaci\u00f3n, tama\u00f1o de cada muestra y, por defecto, 1000 muestras)\n    means_samples = []\n    variances_samples = []\n    for _ in range(n_samples):\n        sample = np.random.choice(population, size=sample_size, replace=True)\n        means_samples.append(np.mean(sample))\n        variances_samples.append(np.var(sample, ddof=1))\n    return np.array(means_samples), np.array(variances_samples)\n</pre> # Funci\u00f3n para obtener m\u00faltiples muestras def multiple_sample(     population, sample_size, n_samples=1000 ):  # Poblaci\u00f3n, tama\u00f1o de cada muestra y, por defecto, 1000 muestras)     means_samples = []     variances_samples = []     for _ in range(n_samples):         sample = np.random.choice(population, size=sample_size, replace=True)         means_samples.append(np.mean(sample))         variances_samples.append(np.var(sample, ddof=1))     return np.array(means_samples), np.array(variances_samples) <p>La siguiente funci\u00f3n nos va a permitir visualizar la convergencia del estimador de m\u00e1xima versomilitud al aumentar el tama\u00f1o de muestra.</p> In\u00a0[6]: Copied! <pre>def convergence_estimator(population, size_sample):\n    means = []\n    std_ = []\n    for n in size_sample:\n        sample = np.random.choice(population, size=n, replace=True)\n        means.append(np.mean(sample))\n        std_.append(np.std(sample, ddof=1) / np.sqrt(n))\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))\n\n    # Convergencia de la media\n    ax1.plot(size_sample, means, \"b-\", label=\"Media muestral\")\n    ax1.axhline(\n        y=np.mean(population), color=\"red\", linestyle=\"--\", label=\"Media poblacional\"\n    )\n    ax1.set_xscale(\"log\")\n    ax1.set_title(\"Convergencia de la Media Muestral\")\n    ax1.set_xlabel(\"Tama\u00f1o de muestra\")\n    ax1.set_ylabel(\"Media\")\n    ax1.legend()\n\n    # Convergencia del error est\u00e1ndar\n    ax2.plot(size_sample, std_, \"g-\", label=\"Error est\u00e1ndar\")\n    ax2.set_xscale(\"log\")\n    ax2.set_title(\"Disminuci\u00f3n del error est\u00e1ndar\")\n    ax2.set_xlabel(\"Tama\u00f1o de muestra\")\n    ax2.set_ylabel(\"Error est\u00e1ndar\")\n    ax2.legend()\n\n    plt.tight_layout()\n    plt.show()\n</pre> def convergence_estimator(population, size_sample):     means = []     std_ = []     for n in size_sample:         sample = np.random.choice(population, size=n, replace=True)         means.append(np.mean(sample))         std_.append(np.std(sample, ddof=1) / np.sqrt(n))     fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))      # Convergencia de la media     ax1.plot(size_sample, means, \"b-\", label=\"Media muestral\")     ax1.axhline(         y=np.mean(population), color=\"red\", linestyle=\"--\", label=\"Media poblacional\"     )     ax1.set_xscale(\"log\")     ax1.set_title(\"Convergencia de la Media Muestral\")     ax1.set_xlabel(\"Tama\u00f1o de muestra\")     ax1.set_ylabel(\"Media\")     ax1.legend()      # Convergencia del error est\u00e1ndar     ax2.plot(size_sample, std_, \"g-\", label=\"Error est\u00e1ndar\")     ax2.set_xscale(\"log\")     ax2.set_title(\"Disminuci\u00f3n del error est\u00e1ndar\")     ax2.set_xlabel(\"Tama\u00f1o de muestra\")     ax2.set_ylabel(\"Error est\u00e1ndar\")     ax2.legend()      plt.tight_layout()     plt.show() <p>Visualicemos la convergencia en escala logar\u00edtmica:</p> In\u00a0[7]: Copied! <pre>size_sample = np.logspace(\n    1, 4, 50, dtype=int\n)  # Escala logar\u00edtmica (el tama\u00f1a de muestra entre 10 y 10000)\nconvergence_estimator(population, size_sample)\n</pre> size_sample = np.logspace(     1, 4, 50, dtype=int )  # Escala logar\u00edtmica (el tama\u00f1a de muestra entre 10 y 10000) convergence_estimator(population, size_sample)"},{"location":"Contenido/24_Estimacion%20puntual_II.html#24_estimacion-puntual-de-parametros-ii","title":"24_ESTIMACI\u00d3N PUNTUAL DE PAR\u00c1METROS (II)\u00b6","text":""},{"location":"Contenido/25_Intervalos%20de%20confianza.html","title":"INTERVALOS DE CONFIANZA","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\n# Datos y par\u00e1metros\ndata = [50.1, 49.5, 51.1, 48.5, 52, 50.13, 49.3, 49.45, 51, 52.2]\nn = len(data)\nsigma = 0.2\nmean_sample = np.mean(data)\nalpha_ = 1 - 0.95\nconf = (1 - alpha_) * 100\n\n# Z valor\nz_value = stats.norm.ppf(1 - alpha_ / 2)\n\n# Intervalo de confianza\nee = z_value * sigma / np.sqrt(n)\nIC = (mean_sample - ee, mean_sample + ee)\nprint(\n    f\"La media muestral es {mean_sample:.2f} MPa y el intervalo IC = ({IC[0]:.2f},{IC[1]:.2f})\"\n)\nprint()\n\n# Visualizaci\u00f3n\nx = np.linspace(\n    mean_sample - 4 * sigma / np.sqrt(n), mean_sample + 4 * sigma / np.sqrt(n), 1000\n)\ny = stats.norm.pdf(x, mean_sample, sigma / np.sqrt(n))\nplt.plot(x, y, color=\"b\", label=\"Distribuci\u00f3n normal de la media muestral\")\nplt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\")\nplt.axvline(IC[1], color=\"r\", linestyle=\"--\")\nplt.axvline(mean_sample, color=\"g\", linestyle=\"--\", label=\"Media muestral\")\nplt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), alpha=0.4)\nplt.title(f\"IC al {conf}% para la media con varianza conocida\")\nplt.legend()\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt import scipy.stats as stats  # Datos y par\u00e1metros data = [50.1, 49.5, 51.1, 48.5, 52, 50.13, 49.3, 49.45, 51, 52.2] n = len(data) sigma = 0.2 mean_sample = np.mean(data) alpha_ = 1 - 0.95 conf = (1 - alpha_) * 100  # Z valor z_value = stats.norm.ppf(1 - alpha_ / 2)  # Intervalo de confianza ee = z_value * sigma / np.sqrt(n) IC = (mean_sample - ee, mean_sample + ee) print(     f\"La media muestral es {mean_sample:.2f} MPa y el intervalo IC = ({IC[0]:.2f},{IC[1]:.2f})\" ) print()  # Visualizaci\u00f3n x = np.linspace(     mean_sample - 4 * sigma / np.sqrt(n), mean_sample + 4 * sigma / np.sqrt(n), 1000 ) y = stats.norm.pdf(x, mean_sample, sigma / np.sqrt(n)) plt.plot(x, y, color=\"b\", label=\"Distribuci\u00f3n normal de la media muestral\") plt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\") plt.axvline(IC[1], color=\"r\", linestyle=\"--\") plt.axvline(mean_sample, color=\"g\", linestyle=\"--\", label=\"Media muestral\") plt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), alpha=0.4) plt.title(f\"IC al {conf}% para la media con varianza conocida\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\n# Datos y par\u00e1metros\ndata = [120, 130, 122, 140, 139, 127, 138, 132, 133, 141]\nn = len(data)\nmean_sample = np.mean(data)\ns = np.std(data, ddof=1)  # Divide por n-1\nalpha_ = 1 - 0.90\nconf = (1 - alpha_) * 100\n\n# t valor\nt_value = stats.t.ppf(1 - alpha_ / 2, n - 1)\n\n# Intervalo de confianza\nee = t_value * s / np.sqrt(n)\nIC = (mean_sample - ee, mean_sample + ee)\nprint(\n    f\"La media muestral es {mean_sample:.2f} c\u00e9lulas y el intervalo IC = ({IC[0]:.2f},{IC[1]:.2f})\"\n)\nprint()\n\n# Visualizaci\u00f3n\nx = np.linspace(\n    mean_sample - 4 * s / np.sqrt(n), mean_sample + 4 * s / np.sqrt(n), 1000\n)\ny = stats.norm.pdf(x, mean_sample, s / np.sqrt(n))\nplt.plot(x, y, color=\"b\", label=\"Distribuci\u00f3n t-student de la media muestral\")\nplt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\")\nplt.axvline(IC[1], color=\"r\", linestyle=\"--\")\nplt.axvline(mean_sample, color=\"g\", linestyle=\"--\", label=\"Media muestral\")\nplt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), color=\"orange\", alpha=0.5)\nplt.title(f\"IC al {conf}% para la media con varianza desconocida\")\nplt.legend()\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt import scipy.stats as stats  # Datos y par\u00e1metros data = [120, 130, 122, 140, 139, 127, 138, 132, 133, 141] n = len(data) mean_sample = np.mean(data) s = np.std(data, ddof=1)  # Divide por n-1 alpha_ = 1 - 0.90 conf = (1 - alpha_) * 100  # t valor t_value = stats.t.ppf(1 - alpha_ / 2, n - 1)  # Intervalo de confianza ee = t_value * s / np.sqrt(n) IC = (mean_sample - ee, mean_sample + ee) print(     f\"La media muestral es {mean_sample:.2f} c\u00e9lulas y el intervalo IC = ({IC[0]:.2f},{IC[1]:.2f})\" ) print()  # Visualizaci\u00f3n x = np.linspace(     mean_sample - 4 * s / np.sqrt(n), mean_sample + 4 * s / np.sqrt(n), 1000 ) y = stats.norm.pdf(x, mean_sample, s / np.sqrt(n)) plt.plot(x, y, color=\"b\", label=\"Distribuci\u00f3n t-student de la media muestral\") plt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\") plt.axvline(IC[1], color=\"r\", linestyle=\"--\") plt.axvline(mean_sample, color=\"g\", linestyle=\"--\", label=\"Media muestral\") plt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), color=\"orange\", alpha=0.5) plt.title(f\"IC al {conf}% para la media con varianza desconocida\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\n# Datos del problema\nn = 1000  # Tama\u00f1o de la muestra\ndefect = 150\np_hat = defect / n\nalpha_ = 1 - 0.95\nconf = (1 - alpha_) * 100\n\n# Z valor cr\u00edtico\nz_value = stats.norm.ppf(1 - alpha_ / 2)\n\n# IC\nee = z_value * np.sqrt(p_hat * (1 - p_hat) / n)\nIC = (p_hat - ee, p_hat + ee)\nprint(f\"El IC para la proporci\u00f3n de defectuosos es ({IC[0]:.4f},{IC[1]:.4f}).\")\nprint(\n    f\"El intervalo de defectuosos ser\u00e1 entonces ({int(IC[0] * 1000)},{int(IC[1] * 1000)}).\"\n)\nprint()\n\n# Visualizaci\u00f3n\nx = np.linspace(p_hat - 2 * ee, p_hat + 2 * ee, 1000)\ny = stats.norm.pdf(x, loc=p_hat, scale=np.sqrt(p_hat * (1 - p_hat) / n))\nplt.plot(x, y, color=\"b\", label=\"Distribuci\u00f3n normal de la proporci\u00f3n muestral\")\nplt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\")\nplt.axvline(IC[1], color=\"r\", linestyle=\"--\")\nplt.axvline(p_hat, color=\"g\", linestyle=\"--\", label=\"Proporci\u00f3n muestral\")\nplt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), alpha=0.4)\nplt.title(f\"IC al {conf}% para la proporci\u00f3n\")\nplt.legend()\nplt.show()\n</pre> # Importamos librer\u00edas import numpy as np import matplotlib.pyplot as plt import scipy.stats as stats  # Datos del problema n = 1000  # Tama\u00f1o de la muestra defect = 150 p_hat = defect / n alpha_ = 1 - 0.95 conf = (1 - alpha_) * 100  # Z valor cr\u00edtico z_value = stats.norm.ppf(1 - alpha_ / 2)  # IC ee = z_value * np.sqrt(p_hat * (1 - p_hat) / n) IC = (p_hat - ee, p_hat + ee) print(f\"El IC para la proporci\u00f3n de defectuosos es ({IC[0]:.4f},{IC[1]:.4f}).\") print(     f\"El intervalo de defectuosos ser\u00e1 entonces ({int(IC[0] * 1000)},{int(IC[1] * 1000)}).\" ) print()  # Visualizaci\u00f3n x = np.linspace(p_hat - 2 * ee, p_hat + 2 * ee, 1000) y = stats.norm.pdf(x, loc=p_hat, scale=np.sqrt(p_hat * (1 - p_hat) / n)) plt.plot(x, y, color=\"b\", label=\"Distribuci\u00f3n normal de la proporci\u00f3n muestral\") plt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\") plt.axvline(IC[1], color=\"r\", linestyle=\"--\") plt.axvline(p_hat, color=\"g\", linestyle=\"--\", label=\"Proporci\u00f3n muestral\") plt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), alpha=0.4) plt.title(f\"IC al {conf}% para la proporci\u00f3n\") plt.legend() plt.show() In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\n# Datos\ndata = np.array(\n    [\n        25.3,\n        26.1,\n        20.4,\n        27.2,\n        25.5,\n        23.0,\n        25.6,\n        24.3,\n        25.2,\n        27.4,\n        30.0,\n        28.4,\n        25.3,\n        30.9,\n        25.1,\n    ]\n)\nn = len(data)\ns2 = np.var(data, ddof=1)  # Varianza muestral\nalpha_ = 1 - 0.95\nconf = (1 - alpha_) * 100  # Nivel de confianza\n\n# Valores cr\u00edticos chi-cuadrado\nchi2_sup = stats.chi2.ppf(1 - alpha_ / 2, df=n - 1)\nchi2_inf = stats.chi2.ppf(alpha_ / 2, df=n - 1)\n\n# Intervalo de confianza\nIC = ((n - 1) * s2 / chi2_sup, (n - 1) * s2 / chi2_inf)\nprint(f\"La desviaci\u00f3n t\u00edpica muestral es de {np.sqrt(s2):.2f}\")\nprint(f\"El intervalo de confianza al 98% para la varianza es ({IC[0]:.3f},{IC[1]:.3f})\")\nprint()\n\n# Visualizaci\u00f3n\nx = np.linspace(-1, 30, 1000)\ny = stats.chi2.pdf(x, df=n - 1)\nplt.plot(x, y, color=\"b\", label=\"Distribuci\u00f3n Chi-cuadrado\")\nplt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\")\nplt.axvline(IC[1], color=\"r\", linestyle=\"--\")\nplt.axvline(s2, color=\"g\", linestyle=\"--\", label=\"Varianza muestral\")\nplt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), color=\"yellow\", alpha=0.5)\nplt.title(f\"IC al {conf}% para varianza poblacional\")\nplt.legend(loc=\"upper right\")\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt import scipy.stats as stats  # Datos data = np.array(     [         25.3,         26.1,         20.4,         27.2,         25.5,         23.0,         25.6,         24.3,         25.2,         27.4,         30.0,         28.4,         25.3,         30.9,         25.1,     ] ) n = len(data) s2 = np.var(data, ddof=1)  # Varianza muestral alpha_ = 1 - 0.95 conf = (1 - alpha_) * 100  # Nivel de confianza  # Valores cr\u00edticos chi-cuadrado chi2_sup = stats.chi2.ppf(1 - alpha_ / 2, df=n - 1) chi2_inf = stats.chi2.ppf(alpha_ / 2, df=n - 1)  # Intervalo de confianza IC = ((n - 1) * s2 / chi2_sup, (n - 1) * s2 / chi2_inf) print(f\"La desviaci\u00f3n t\u00edpica muestral es de {np.sqrt(s2):.2f}\") print(f\"El intervalo de confianza al 98% para la varianza es ({IC[0]:.3f},{IC[1]:.3f})\") print()  # Visualizaci\u00f3n x = np.linspace(-1, 30, 1000) y = stats.chi2.pdf(x, df=n - 1) plt.plot(x, y, color=\"b\", label=\"Distribuci\u00f3n Chi-cuadrado\") plt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\") plt.axvline(IC[1], color=\"r\", linestyle=\"--\") plt.axvline(s2, color=\"g\", linestyle=\"--\", label=\"Varianza muestral\") plt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), color=\"yellow\", alpha=0.5) plt.title(f\"IC al {conf}% para varianza poblacional\") plt.legend(loc=\"upper right\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\n# Datos\nsample_1 = np.array([5.5, 4.5, 5.4, 4.5, 5.1, 5.2, 5.4, 5, 5.3, 5, 5.1, 5.2])\nsample_2 = np.array([5.1, 5.5, 5.2, 4.4, 5.3, 5.1, 5.5, 5, 5.4, 5.2])\nn1, n2 = len(sample_1), len(sample_2)\nmean1, mean2 = np.mean(sample_1), np.mean(sample_2)\nsigma1, sigma2 = 0.2, 0.25\nalpha_ = 1 - 0.95\nconf = (1 - alpha_) * 100\n\n# Valor cr\u00edtico\nz_value = stats.norm.ppf(1 - alpha_ / 2)\n\n# Intervalo de confianza\ndif_means = mean1 - mean2\nee = z_value * np.sqrt(sigma1**2 / n1 + sigma2**2 / n2)\nIC = (dif_means - ee, dif_means + ee)\nprint(f\" El IC al 95% para la diferencia de medias es ({IC[0]:.2f},{IC[1]:.2f})\")\nprint()\n\n# Visualizaci\u00f3n\nx = np.linspace(dif_means - 2 * ee, dif_means + 2 * ee, 1000)\ny = stats.norm.pdf(x, loc=dif_means, scale=np.sqrt(sigma1**2 / n1 + sigma2**2 / n2))\nplt.plot(x, y, color=\"b\", label=\"Normal diferencia de medias\")\nplt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\")\nplt.axvline(IC[1], color=\"r\", linestyle=\"--\")\nplt.axvline(dif_means, color=\"g\", linestyle=\"--\", label=\"Diferencia medias muestrales\")\nplt.fill_between(x, y, where=(x &gt; IC[0]) &amp; (x &lt; IC[1]), alpha=0.5)\nplt.title(f\"IC al {conf:.1f}% para la diferencia de medias (varianzas conocidas)\")\nplt.legend(loc=\"upper left\")\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt import scipy.stats as stats  # Datos sample_1 = np.array([5.5, 4.5, 5.4, 4.5, 5.1, 5.2, 5.4, 5, 5.3, 5, 5.1, 5.2]) sample_2 = np.array([5.1, 5.5, 5.2, 4.4, 5.3, 5.1, 5.5, 5, 5.4, 5.2]) n1, n2 = len(sample_1), len(sample_2) mean1, mean2 = np.mean(sample_1), np.mean(sample_2) sigma1, sigma2 = 0.2, 0.25 alpha_ = 1 - 0.95 conf = (1 - alpha_) * 100  # Valor cr\u00edtico z_value = stats.norm.ppf(1 - alpha_ / 2)  # Intervalo de confianza dif_means = mean1 - mean2 ee = z_value * np.sqrt(sigma1**2 / n1 + sigma2**2 / n2) IC = (dif_means - ee, dif_means + ee) print(f\" El IC al 95% para la diferencia de medias es ({IC[0]:.2f},{IC[1]:.2f})\") print()  # Visualizaci\u00f3n x = np.linspace(dif_means - 2 * ee, dif_means + 2 * ee, 1000) y = stats.norm.pdf(x, loc=dif_means, scale=np.sqrt(sigma1**2 / n1 + sigma2**2 / n2)) plt.plot(x, y, color=\"b\", label=\"Normal diferencia de medias\") plt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\") plt.axvline(IC[1], color=\"r\", linestyle=\"--\") plt.axvline(dif_means, color=\"g\", linestyle=\"--\", label=\"Diferencia medias muestrales\") plt.fill_between(x, y, where=(x &gt; IC[0]) &amp; (x &lt; IC[1]), alpha=0.5) plt.title(f\"IC al {conf:.1f}% para la diferencia de medias (varianzas conocidas)\") plt.legend(loc=\"upper left\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\n\n# Datos\nengine_X = np.array([5.2, 5.3, 5.1, 5.4, 5.2])\nengine_Y = np.array([5.0, 5.1, 5.2, 5.3, 5.1])\nconf = 0.95\nalpha = 1 - conf\n\n# Tama\u00f1os de muestras\nn_X = len(engine_X)\nn_Y = len(engine_Y)\ndeg_freedom = n_X + n_Y - 2\n\n# Estad\u00edsticos muestrales\nmean_X = np.mean(engine_X)\ns_X = np.std(engine_X, ddof=1)\nmean_Y = np.mean(engine_Y)\ns_Y = np.std(engine_Y, ddof=1)\ns_p = np.sqrt(((n_X - 1) * s_X**2 + (n_Y - 1) * s_Y**2) / (n_X + n_Y - 2))\ndif_means = mean_X - mean_Y\n\n# Valor cr\u00edtico t\nt_value = stats.t.ppf(1 - alpha / 2, df=deg_freedom)\n\n# Error\nee = t_value * s_p * np.sqrt(1 / n_X + 1 / n_Y)\n\n# Intervalo de confianza\nIC = (dif_means - ee, dif_means + ee)\n\n# Resultados\nprint(f\"La diferencia de medias es {dif_means:.2f}\")\nprint(f\"El IC al 95% es ({IC[0]:.2f},{IC[1]:.2f})\")\nprint()\n# Visualizaci\u00f3n\nx = np.linspace(dif_means - 3 * ee, dif_means + 3 * ee, 1000)\ny = stats.t.pdf(x, df=deg_freedom, loc=dif_means, scale=ee)\nplt.plot(x, y, label=\"Distribuci\u00f3n t Student\")\nplt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"L\u00edmites IC\")\nplt.axvline(IC[1], color=\"r\", linestyle=\"--\")\nplt.fill_between(\n    x,\n    y,\n    where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]),\n    color=\"orange\",\n    alpha=0.5,\n    label=\"Intervalo de confianza\",\n)\nplt.axvline(dif_means, color=\"g\", linestyle=\"--\", label=\"Diferencia de medias\")\nplt.title(\"Diferencia de medias con varianzas desconocidas pero iguales\")\nplt.xlabel(\"Diferencia de medias $(\\mu_X-\\mu_y)$\")\nplt.ylabel(\"Densidad de Probabilidad\")\nplt.legend(loc=\"upper right\")\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import scipy.stats as stats import matplotlib.pyplot as plt  # Datos engine_X = np.array([5.2, 5.3, 5.1, 5.4, 5.2]) engine_Y = np.array([5.0, 5.1, 5.2, 5.3, 5.1]) conf = 0.95 alpha = 1 - conf  # Tama\u00f1os de muestras n_X = len(engine_X) n_Y = len(engine_Y) deg_freedom = n_X + n_Y - 2  # Estad\u00edsticos muestrales mean_X = np.mean(engine_X) s_X = np.std(engine_X, ddof=1) mean_Y = np.mean(engine_Y) s_Y = np.std(engine_Y, ddof=1) s_p = np.sqrt(((n_X - 1) * s_X**2 + (n_Y - 1) * s_Y**2) / (n_X + n_Y - 2)) dif_means = mean_X - mean_Y  # Valor cr\u00edtico t t_value = stats.t.ppf(1 - alpha / 2, df=deg_freedom)  # Error ee = t_value * s_p * np.sqrt(1 / n_X + 1 / n_Y)  # Intervalo de confianza IC = (dif_means - ee, dif_means + ee)  # Resultados print(f\"La diferencia de medias es {dif_means:.2f}\") print(f\"El IC al 95% es ({IC[0]:.2f},{IC[1]:.2f})\") print() # Visualizaci\u00f3n x = np.linspace(dif_means - 3 * ee, dif_means + 3 * ee, 1000) y = stats.t.pdf(x, df=deg_freedom, loc=dif_means, scale=ee) plt.plot(x, y, label=\"Distribuci\u00f3n t Student\") plt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"L\u00edmites IC\") plt.axvline(IC[1], color=\"r\", linestyle=\"--\") plt.fill_between(     x,     y,     where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]),     color=\"orange\",     alpha=0.5,     label=\"Intervalo de confianza\", ) plt.axvline(dif_means, color=\"g\", linestyle=\"--\", label=\"Diferencia de medias\") plt.title(\"Diferencia de medias con varianzas desconocidas pero iguales\") plt.xlabel(\"Diferencia de medias $(\\mu_X-\\mu_y)$\") plt.ylabel(\"Densidad de Probabilidad\") plt.legend(loc=\"upper right\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Datos\nn1, n2 = 100, 120\nsuccess1, success2 = 60, 90\np1_hat, p2_hat = success1 / n1, success2 / n2\nconf = 0.95\nalpha = 1 - conf\n\n# Valor cr\u00edtico Z\nz_value = norm.ppf(1 - alpha / 2)\n\n# IC\ndif_p_hat = p1_hat - p2_hat\nee = z_value * np.sqrt((p1_hat * (1 - p1_hat) / n1) + (p2_hat * (1 - p2_hat) / n2))\nIC = (dif_p_hat - ee, dif_p_hat + ee)\nprint(f\"La diferencia de proporciones es {dif_p_hat:.2f}\")\nprint(f\"El IC al {conf*100:.0f}% es ({IC[0]:.2f},{IC[1]:.2f})\")\nprint()\n# Visualizaci\u00f3n\nx = np.linspace(dif_p_hat - 3 * ee, dif_p_hat + 3 * ee, 1000)\ny = norm.pdf(x, loc=dif_p_hat, scale=ee)\nplt.plot(x, y, label=\"Distribuci\u00f3n normal\")\nplt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\")\nplt.axvline(IC[1], color=\"r\", linestyle=\"--\")\nplt.axvline(dif_p_hat, color=\"g\", linestyle=\"--\", label=\"Diferencia proporciones\")\nplt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), alpha=0.5)\nplt.title(f\"Intervalo de confianza al {conf*100:.0f}%\")\nplt.legend(loc=\"upper right\")\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm  # Datos n1, n2 = 100, 120 success1, success2 = 60, 90 p1_hat, p2_hat = success1 / n1, success2 / n2 conf = 0.95 alpha = 1 - conf  # Valor cr\u00edtico Z z_value = norm.ppf(1 - alpha / 2)  # IC dif_p_hat = p1_hat - p2_hat ee = z_value * np.sqrt((p1_hat * (1 - p1_hat) / n1) + (p2_hat * (1 - p2_hat) / n2)) IC = (dif_p_hat - ee, dif_p_hat + ee) print(f\"La diferencia de proporciones es {dif_p_hat:.2f}\") print(f\"El IC al {conf*100:.0f}% es ({IC[0]:.2f},{IC[1]:.2f})\") print() # Visualizaci\u00f3n x = np.linspace(dif_p_hat - 3 * ee, dif_p_hat + 3 * ee, 1000) y = norm.pdf(x, loc=dif_p_hat, scale=ee) plt.plot(x, y, label=\"Distribuci\u00f3n normal\") plt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\") plt.axvline(IC[1], color=\"r\", linestyle=\"--\") plt.axvline(dif_p_hat, color=\"g\", linestyle=\"--\", label=\"Diferencia proporciones\") plt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), alpha=0.5) plt.title(f\"Intervalo de confianza al {conf*100:.0f}%\") plt.legend(loc=\"upper right\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\n# Datos\nengine1 = np.array([5.2, 5.3, 5.1, 5.4, 5.2])\nengine2 = np.array([5.8, 5.1, 5.2, 5.8, 5.1])\nn1, n2 = len(engine1), len(engine2)\ns1, s2 = np.var(engine1, ddof=1), np.var(engine2, ddof=1)\nconf = 0.95\nalpha = 1 - conf\n\n# Valores cr\u00edticos F\nf_inf = stats.f.ppf(alpha / 2, dfn=n1 - 1, dfd=n2 - 1)\nf_sup = stats.f.ppf(1 - alpha / 2, dfn=n1 - 1, dfd=n2 - 1)\n\n# Intervalo de confianza\nratio_var = s1 / s2\nIC = (ratio_var / f_sup, ratio_var / f_inf)\nprint(f\"El intervalo de confianza es ({IC[0]:.2f},{IC[1]:.2f})\")\nprint()\n\n# Visualizaci\u00f3n\nx = np.linspace(0, 3, 1000)\ny = stats.f.pdf(x, dfn=n1 - 1, dfd=n2 - 1)\nplt.plot(x, y, label=\"Distribuci\u00f3n F\")\nplt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\")\nplt.axvline(IC[1], color=\"r\", linestyle=\"--\")\nplt.axvline(ratio_var, color=\"g\", linestyle=\"--\", label=\"Cociente de varianzas\")\nplt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), color=\"m\", alpha=0.5)\nplt.title(f\"Intervalo de confianza al {conf*100}%\")\nplt.legend()\nplt.show()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt import scipy.stats as stats  # Datos engine1 = np.array([5.2, 5.3, 5.1, 5.4, 5.2]) engine2 = np.array([5.8, 5.1, 5.2, 5.8, 5.1]) n1, n2 = len(engine1), len(engine2) s1, s2 = np.var(engine1, ddof=1), np.var(engine2, ddof=1) conf = 0.95 alpha = 1 - conf  # Valores cr\u00edticos F f_inf = stats.f.ppf(alpha / 2, dfn=n1 - 1, dfd=n2 - 1) f_sup = stats.f.ppf(1 - alpha / 2, dfn=n1 - 1, dfd=n2 - 1)  # Intervalo de confianza ratio_var = s1 / s2 IC = (ratio_var / f_sup, ratio_var / f_inf) print(f\"El intervalo de confianza es ({IC[0]:.2f},{IC[1]:.2f})\") print()  # Visualizaci\u00f3n x = np.linspace(0, 3, 1000) y = stats.f.pdf(x, dfn=n1 - 1, dfd=n2 - 1) plt.plot(x, y, label=\"Distribuci\u00f3n F\") plt.axvline(IC[0], color=\"r\", linestyle=\"--\", label=\"Intervalo de confianza\") plt.axvline(IC[1], color=\"r\", linestyle=\"--\") plt.axvline(ratio_var, color=\"g\", linestyle=\"--\", label=\"Cociente de varianzas\") plt.fill_between(x, y, where=(x &gt;= IC[0]) &amp; (x &lt;= IC[1]), color=\"m\", alpha=0.5) plt.title(f\"Intervalo de confianza al {conf*100}%\") plt.legend() plt.show()"},{"location":"Contenido/25_Intervalos%20de%20confianza.html#intervalos-de-confianza","title":"INTERVALOS DE CONFIANZA\u00b6","text":""},{"location":"Contenido/25_Intervalos%20de%20confianza.html#resistencia-de-materiales-en-prueba-de-carga","title":"Resistencia de materiales en prueba de carga\u00b6","text":""},{"location":"Contenido/25_Intervalos%20de%20confianza.html#numero-de-celulas","title":"N\u00famero de c\u00e9lulas\u00b6","text":""},{"location":"Contenido/25_Intervalos%20de%20confianza.html#componentes-defectuosos-en-una-fabrica","title":"Componentes defectuosos en una f\u00e1brica\u00b6","text":""},{"location":"Contenido/25_Intervalos%20de%20confianza.html#concentracion-de-un-compuesto-quimico","title":"Concentraci\u00f3n de un compuesto qu\u00edmico\u00b6","text":"<p>En un laboratorio de qu\u00edmica se mide la concentraci\u00f3n de un compuesto en 15 disoluciones. Se quiere estimar, mediante un IC al 95%, la varianza de las mediciones para evaluar la precisi\u00f3n del m\u00e9todo de medici\u00f3n.</p>"},{"location":"Contenido/25_Intervalos%20de%20confianza.html#comparacion-de-la-duracion-de-dos-tipos-de-baterias","title":"Comparaci\u00f3n de la duraci\u00f3n de dos tipos de bater\u00edas\u00b6","text":""},{"location":"Contenido/25_Intervalos%20de%20confianza.html#eficiencia-de-dos-motores-en-ingenieria-mecanica","title":"Eficiencia de dos motores en ingenier\u00eda mec\u00e1nica\u00b6","text":""},{"location":"Contenido/25_Intervalos%20de%20confianza.html#comparacion-de-la-tasa-de-exito-de-dos-algoritmos-en-ingenieria-de-software","title":"Comparaci\u00f3n de la tasa de \u00e9xito de dos algoritmos en ingenier\u00eda de software\u00b6","text":""},{"location":"Contenido/25_Intervalos%20de%20confianza.html#consistencia-en-resistencias","title":"Consistencia en resistencias\u00b6","text":""},{"location":"Contenido/26_Contrastes%20de%20hip%C3%B3tesis.html","title":"26_CONTRASTES DE HIP\u00d3TESIS PARAM\u00c9TRICOS","text":"In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Datos\nmu_0 = 2.0\nsigma = 0.5\nn = 30\nmedia_muestral = 2.3\n\n# Estad\u00edstico de contraste\nZ = (media_muestral - mu_0) / (sigma / np.sqrt(n))\n\n# Valor cr\u00edtico y p-valor\nalpha = 0.05\nvalor_critico = norm.ppf(1 - alpha / 2)  # Bilateral\np_valor = 2 * (1 - norm.cdf(abs(Z)))\n\n# Gr\u00e1fico\nx = np.linspace(-4, 4, 1000)\ny = norm.pdf(x)\nplt.plot(x, y, label=\"Distribuci\u00f3n Normal\")\nplt.fill_between(\n    x,\n    y,\n    where=(x &gt;= valor_critico) | (x &lt;= -valor_critico),\n    color=\"red\",\n    alpha=0.5,\n    label=\"Zona de Rechazo\",\n)\nplt.fill_between(\n    x,\n    y,\n    where=(x &lt; valor_critico) &amp; (x &gt; -valor_critico),\n    color=\"green\",\n    alpha=0.5,\n    label=\"Zona de Aceptaci\u00f3n\",\n)\nplt.axvline(Z, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico Z = {Z:.2f}\")\nplt.title(\"Contraste Bilateral para la Media ($\\sigma$ conocida)\\n(Rechazo de $H_0$)\")\nplt.xlabel(\"Z\")\nplt.ylabel(\"Densidad\")\nplt.legend()\nplt.show()\n\nprint(f\"Estad\u00edstico Z: {Z:.4f}\")\nprint(f\"Valor cr\u00edtico: \u00b1{valor_critico:.4f}\")\nprint(f\"P-valor: {p_valor:.4f}\")\n\nif abs(Z) &gt; valor_critico:\n    print(\"Rechazamos H0\")\nelse:\n    print(\"No rechazamos H0\")\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm  # Datos mu_0 = 2.0 sigma = 0.5 n = 30 media_muestral = 2.3  # Estad\u00edstico de contraste Z = (media_muestral - mu_0) / (sigma / np.sqrt(n))  # Valor cr\u00edtico y p-valor alpha = 0.05 valor_critico = norm.ppf(1 - alpha / 2)  # Bilateral p_valor = 2 * (1 - norm.cdf(abs(Z)))  # Gr\u00e1fico x = np.linspace(-4, 4, 1000) y = norm.pdf(x) plt.plot(x, y, label=\"Distribuci\u00f3n Normal\") plt.fill_between(     x,     y,     where=(x &gt;= valor_critico) | (x &lt;= -valor_critico),     color=\"red\",     alpha=0.5,     label=\"Zona de Rechazo\", ) plt.fill_between(     x,     y,     where=(x &lt; valor_critico) &amp; (x &gt; -valor_critico),     color=\"green\",     alpha=0.5,     label=\"Zona de Aceptaci\u00f3n\", ) plt.axvline(Z, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico Z = {Z:.2f}\") plt.title(\"Contraste Bilateral para la Media ($\\sigma$ conocida)\\n(Rechazo de $H_0$)\") plt.xlabel(\"Z\") plt.ylabel(\"Densidad\") plt.legend() plt.show()  print(f\"Estad\u00edstico Z: {Z:.4f}\") print(f\"Valor cr\u00edtico: \u00b1{valor_critico:.4f}\") print(f\"P-valor: {p_valor:.4f}\")  if abs(Z) &gt; valor_critico:     print(\"Rechazamos H0\") else:     print(\"No rechazamos H0\") In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Datos\nmu_0 = 2.0\nsigma = 0.5\nn = 30\nmedia_muestral = 2.1\n\n# Estad\u00edstico de contraste\nZ = (media_muestral - mu_0) / (sigma / np.sqrt(n))\n\n# Valor cr\u00edtico y p-valor\nalpha = 0.05\nvalor_critico = norm.ppf(1 - alpha)  # Unilateral derecha\np_valor = 1 - norm.cdf(Z)\n\n# Gr\u00e1fico\nx = np.linspace(-4, 4, 1000)\ny = norm.pdf(x)\nplt.plot(x, y, label=\"Distribuci\u00f3n Normal\")\nplt.fill_between(\n    x, y, where=(x &gt;= valor_critico), color=\"red\", alpha=0.5, label=\"Zona de Rechazo\"\n)\nplt.fill_between(\n    x,\n    y,\n    where=(x &lt; valor_critico),\n    color=\"green\",\n    alpha=0.5,\n    label=\"Zona de Aceptaci\u00f3n\",\n)\nplt.axvline(Z, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico Z = {Z:.2f}\")\nplt.title(\"Contraste Unilateral Derecha para la Media (Aceptaci\u00f3n de $H_0$)\")\nplt.xlabel(\"Z\")\nplt.ylabel(\"Densidad\")\nplt.legend()\nplt.show()\n\nprint(f\"Estad\u00edstico Z: {Z:.4f}\")\nprint(f\"Valor cr\u00edtico: {valor_critico:.4f}\")\nprint(f\"P-valor: {p_valor:.4f}\")\nif Z &gt; valor_critico:\n    print(\"Rechazamos H\u2080\")\nelse:\n    print(\"No rechazamos H\u2080\")\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm  # Datos mu_0 = 2.0 sigma = 0.5 n = 30 media_muestral = 2.1  # Estad\u00edstico de contraste Z = (media_muestral - mu_0) / (sigma / np.sqrt(n))  # Valor cr\u00edtico y p-valor alpha = 0.05 valor_critico = norm.ppf(1 - alpha)  # Unilateral derecha p_valor = 1 - norm.cdf(Z)  # Gr\u00e1fico x = np.linspace(-4, 4, 1000) y = norm.pdf(x) plt.plot(x, y, label=\"Distribuci\u00f3n Normal\") plt.fill_between(     x, y, where=(x &gt;= valor_critico), color=\"red\", alpha=0.5, label=\"Zona de Rechazo\" ) plt.fill_between(     x,     y,     where=(x &lt; valor_critico),     color=\"green\",     alpha=0.5,     label=\"Zona de Aceptaci\u00f3n\", ) plt.axvline(Z, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico Z = {Z:.2f}\") plt.title(\"Contraste Unilateral Derecha para la Media (Aceptaci\u00f3n de $H_0$)\") plt.xlabel(\"Z\") plt.ylabel(\"Densidad\") plt.legend() plt.show()  print(f\"Estad\u00edstico Z: {Z:.4f}\") print(f\"Valor cr\u00edtico: {valor_critico:.4f}\") print(f\"P-valor: {p_valor:.4f}\") if Z &gt; valor_critico:     print(\"Rechazamos H\u2080\") else:     print(\"No rechazamos H\u2080\") In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import t\n\n# Datos\nmu_0 = 14.0\ns = 2.0\nn = 25\nmedia_muestral = 14.5\n\n# Estad\u00edstico de contraste\nt_est = (media_muestral - mu_0) / (s / np.sqrt(n))\n\n# Valor cr\u00edtico y p-valor\nalpha = 0.05\ngrados_libertad = n - 1\nvalor_critico = t.ppf(1 - alpha / 2, grados_libertad)  # Bilateral\np_valor = 2 * (1 - t.cdf(abs(t_est), grados_libertad))\n\n# Gr\u00e1fico\nx = np.linspace(-4, 4, 1000)\ny = t.pdf(x, grados_libertad)\nplt.plot(x, y, label=\"Distribuci\u00f3n t de Student\")\nplt.fill_between(\n    x,\n    y,\n    where=(x &gt;= valor_critico) | (x &lt;= -valor_critico),\n    color=\"red\",\n    alpha=0.5,\n    label=\"Zona de Rechazo\",\n)\nplt.fill_between(\n    x,\n    y,\n    where=(x &lt; valor_critico) &amp; (x &gt; -valor_critico),\n    color=\"green\",\n    alpha=0.5,\n    label=\"Zona de Aceptaci\u00f3n\",\n)\nplt.axvline(t_est, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico t = {t_est:.2f}\")\nplt.title(\"Contraste Bilateral para la Media\\n(Aceptaci\u00f3n de $H_0$)\")\nplt.xlabel(\"t\")\nplt.ylabel(\"Densidad\")\nplt.legend()\nplt.show()\n\nprint(f\"Estad\u00edstico t: {t_est:.4f}\")\nprint(f\"Valor cr\u00edtico: \u00b1{valor_critico:.4f}\")\nprint(f\"P-valor: {p_valor:.4f}\")\n\nif abs(t_est) &gt; valor_critico:\n    print(\"Rechazamos H\u2080\")\nelse:\n    print(\"No rechazamos H\u2080\")\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import t  # Datos mu_0 = 14.0 s = 2.0 n = 25 media_muestral = 14.5  # Estad\u00edstico de contraste t_est = (media_muestral - mu_0) / (s / np.sqrt(n))  # Valor cr\u00edtico y p-valor alpha = 0.05 grados_libertad = n - 1 valor_critico = t.ppf(1 - alpha / 2, grados_libertad)  # Bilateral p_valor = 2 * (1 - t.cdf(abs(t_est), grados_libertad))  # Gr\u00e1fico x = np.linspace(-4, 4, 1000) y = t.pdf(x, grados_libertad) plt.plot(x, y, label=\"Distribuci\u00f3n t de Student\") plt.fill_between(     x,     y,     where=(x &gt;= valor_critico) | (x &lt;= -valor_critico),     color=\"red\",     alpha=0.5,     label=\"Zona de Rechazo\", ) plt.fill_between(     x,     y,     where=(x &lt; valor_critico) &amp; (x &gt; -valor_critico),     color=\"green\",     alpha=0.5,     label=\"Zona de Aceptaci\u00f3n\", ) plt.axvline(t_est, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico t = {t_est:.2f}\") plt.title(\"Contraste Bilateral para la Media\\n(Aceptaci\u00f3n de $H_0$)\") plt.xlabel(\"t\") plt.ylabel(\"Densidad\") plt.legend() plt.show()  print(f\"Estad\u00edstico t: {t_est:.4f}\") print(f\"Valor cr\u00edtico: \u00b1{valor_critico:.4f}\") print(f\"P-valor: {p_valor:.4f}\")  if abs(t_est) &gt; valor_critico:     print(\"Rechazamos H\u2080\") else:     print(\"No rechazamos H\u2080\") In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# Datos\nmu_A, mu_B = 19.0, 18.2\nsigma_A, sigma_B = 1.2, 1.5\nn_A, n_B = 40, 35\n\n# Estad\u00edstico de contraste\nZ = (mu_A - mu_B) / np.sqrt((sigma_A**2 / n_A) + (sigma_B**2 / n_B))\n\n# Valor cr\u00edtico y p-valor\nalpha = 0.05\nvalor_critico = norm.ppf(1 - alpha / 2)  # Bilateral\np_valor = 2 * (1 - norm.cdf(abs(Z)))\n\n# Gr\u00e1fico\nx = np.linspace(-4, 4, 1000)\ny = norm.pdf(x)\nplt.plot(x, y, label=\"Distribuci\u00f3n Normal\")\nplt.fill_between(\n    x,\n    y,\n    where=(x &gt;= valor_critico) | (x &lt;= -valor_critico),\n    color=\"red\",\n    alpha=0.5,\n    label=\"Zona de Rechazo\",\n)\nplt.fill_between(\n    x,\n    y,\n    where=(x &lt; valor_critico) &amp; (x &gt; -valor_critico),\n    color=\"green\",\n    alpha=0.5,\n    label=\"Zona de Aceptaci\u00f3n\",\n)\nplt.axvline(Z, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico Z = {Z:.2f}\")\nplt.title(\"Contraste Bilateral para Diferencia de Medias\\n(Rechazo de $H_0$)\")\nplt.xlabel(\"Z\")\nplt.ylabel(\"Densidad\")\nplt.legend()\nplt.show()\n\nprint(f\"Estad\u00edstico Z: {Z:.4f}\")\nprint(f\"Valor cr\u00edtico: \u00b1{valor_critico:.4f}\")\nprint(f\"P-valor: {p_valor:.4f}\")\n\nif abs(Z) &gt; valor_critico:\n    print(\"Rechazamos H\u2080\")\nelse:\n    print(\"No rechazamos H\u2080\")\n</pre> # Importamos librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm  # Datos mu_A, mu_B = 19.0, 18.2 sigma_A, sigma_B = 1.2, 1.5 n_A, n_B = 40, 35  # Estad\u00edstico de contraste Z = (mu_A - mu_B) / np.sqrt((sigma_A**2 / n_A) + (sigma_B**2 / n_B))  # Valor cr\u00edtico y p-valor alpha = 0.05 valor_critico = norm.ppf(1 - alpha / 2)  # Bilateral p_valor = 2 * (1 - norm.cdf(abs(Z)))  # Gr\u00e1fico x = np.linspace(-4, 4, 1000) y = norm.pdf(x) plt.plot(x, y, label=\"Distribuci\u00f3n Normal\") plt.fill_between(     x,     y,     where=(x &gt;= valor_critico) | (x &lt;= -valor_critico),     color=\"red\",     alpha=0.5,     label=\"Zona de Rechazo\", ) plt.fill_between(     x,     y,     where=(x &lt; valor_critico) &amp; (x &gt; -valor_critico),     color=\"green\",     alpha=0.5,     label=\"Zona de Aceptaci\u00f3n\", ) plt.axvline(Z, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico Z = {Z:.2f}\") plt.title(\"Contraste Bilateral para Diferencia de Medias\\n(Rechazo de $H_0$)\") plt.xlabel(\"Z\") plt.ylabel(\"Densidad\") plt.legend() plt.show()  print(f\"Estad\u00edstico Z: {Z:.4f}\") print(f\"Valor cr\u00edtico: \u00b1{valor_critico:.4f}\") print(f\"P-valor: {p_valor:.4f}\")  if abs(Z) &gt; valor_critico:     print(\"Rechazamos H\u2080\") else:     print(\"No rechazamos H\u2080\") In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import chi2\n\n# Datos\nsigma_0_cuadrado = 0.01\ns_cuadrado = 0.012\nn = 20\n\n# Estad\u00edstico de contraste\nchi2_est = (n - 1) * s_cuadrado / sigma_0_cuadrado\n\n# Valor cr\u00edtico y p-valor\nalpha = 0.05\ngrados_libertad = n - 1\nvalor_critico_inf = chi2.ppf(alpha / 2, grados_libertad)\nvalor_critico_sup = chi2.ppf(1 - alpha / 2, grados_libertad)\np_valor = 2 * min(\n    chi2.cdf(chi2_est, grados_libertad), 1 - chi2.cdf(chi2_est, grados_libertad)\n)\n\n# Gr\u00e1fico\nx = np.linspace(0, 40, 1000)\ny = chi2.pdf(x, grados_libertad)\nplt.plot(x, y, label=\"Distribuci\u00f3n Chi-cuadrado\")\nplt.fill_between(\n    x,\n    y,\n    where=(x &lt;= valor_critico_inf) | (x &gt;= valor_critico_sup),\n    color=\"red\",\n    alpha=0.5,\n    label=\"Zona de Rechazo\",\n)\nplt.fill_between(\n    x,\n    y,\n    where=(x &gt; valor_critico_inf) &amp; (x &lt; valor_critico_sup),\n    color=\"green\",\n    alpha=0.5,\n    label=\"Zona de Aceptaci\u00f3n\",\n)\nplt.axvline(\n    chi2_est, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico \u03c7\u00b2 = {chi2_est:.2f}\"\n)\nplt.title(\"Contraste Bilateral para la Varianza (Aceptaci\u00f3n de H\u2080)\")\nplt.xlabel(\"\u03c7\u00b2\")\nplt.ylabel(\"Densidad\")\nplt.legend()\nplt.show()\n\nprint(f\"Estad\u00edstico \u03c7\u00b2: {chi2_est:.4f}\")\nprint(f\"Valores cr\u00edticos: [{valor_critico_inf:.4f}, {valor_critico_sup:.4f}]\")\nprint(f\"P-valor: {p_valor:.4f}\")\n\nif chi2_est &lt; valor_critico_inf or chi2_est &gt; valor_critico_sup:\n    print(\"Rechazamos H\u2080\")\nelse:\n    print(\"No rechazamos H\u2080\")\n</pre> # Importamos librer\u00edas import numpy as np import matplotlib.pyplot as plt from scipy.stats import chi2  # Datos sigma_0_cuadrado = 0.01 s_cuadrado = 0.012 n = 20  # Estad\u00edstico de contraste chi2_est = (n - 1) * s_cuadrado / sigma_0_cuadrado  # Valor cr\u00edtico y p-valor alpha = 0.05 grados_libertad = n - 1 valor_critico_inf = chi2.ppf(alpha / 2, grados_libertad) valor_critico_sup = chi2.ppf(1 - alpha / 2, grados_libertad) p_valor = 2 * min(     chi2.cdf(chi2_est, grados_libertad), 1 - chi2.cdf(chi2_est, grados_libertad) )  # Gr\u00e1fico x = np.linspace(0, 40, 1000) y = chi2.pdf(x, grados_libertad) plt.plot(x, y, label=\"Distribuci\u00f3n Chi-cuadrado\") plt.fill_between(     x,     y,     where=(x &lt;= valor_critico_inf) | (x &gt;= valor_critico_sup),     color=\"red\",     alpha=0.5,     label=\"Zona de Rechazo\", ) plt.fill_between(     x,     y,     where=(x &gt; valor_critico_inf) &amp; (x &lt; valor_critico_sup),     color=\"green\",     alpha=0.5,     label=\"Zona de Aceptaci\u00f3n\", ) plt.axvline(     chi2_est, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico \u03c7\u00b2 = {chi2_est:.2f}\" ) plt.title(\"Contraste Bilateral para la Varianza (Aceptaci\u00f3n de H\u2080)\") plt.xlabel(\"\u03c7\u00b2\") plt.ylabel(\"Densidad\") plt.legend() plt.show()  print(f\"Estad\u00edstico \u03c7\u00b2: {chi2_est:.4f}\") print(f\"Valores cr\u00edticos: [{valor_critico_inf:.4f}, {valor_critico_sup:.4f}]\") print(f\"P-valor: {p_valor:.4f}\")  if chi2_est &lt; valor_critico_inf or chi2_est &gt; valor_critico_sup:     print(\"Rechazamos H\u2080\") else:     print(\"No rechazamos H\u2080\") In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import f\n\n# Datos\nsA_cuadrado = 4.8  # Varianza muestral del M\u00e9todo A\nsB_cuadrado = 1.9  # Varianza muestral del M\u00e9todo B\nnA = 20  # Tama\u00f1o de la muestra del M\u00e9todo A\nnB = 25  # Tama\u00f1o de la muestra del M\u00e9todo B\n\n# Estad\u00edstico de contraste\nF_est = sA_cuadrado / sB_cuadrado\n\n# Valor cr\u00edtico y p-valor\nalpha = 0.05\ngrados_libertad1 = nA - 1  # Grados de libertad del numerador\ngrados_libertad2 = nB - 1  # Grados de libertad del denominador\nvalor_critico_sup = f.ppf(\n    1 - alpha / 2, grados_libertad1, grados_libertad2\n)  # L\u00edmite superior\nvalor_critico_inf = f.ppf(\n    alpha / 2, grados_libertad1, grados_libertad2\n)  # L\u00edmite inferior\np_valor = 2 * min(\n    f.cdf(F_est, grados_libertad1, grados_libertad2),\n    1 - f.cdf(F_est, grados_libertad1, grados_libertad2),\n)\n\n# Gr\u00e1fico\nx = np.linspace(0, 5, 1000)\ny = f.pdf(x, grados_libertad1, grados_libertad2)\nplt.plot(x, y, label=\"Distribuci\u00f3n F\")\nplt.fill_between(\n    x,\n    y,\n    where=(x &lt;= valor_critico_inf) | (x &gt;= valor_critico_sup),\n    color=\"red\",\n    alpha=0.5,\n    label=\"Zona de Rechazo\",\n)\nplt.fill_between(\n    x,\n    y,\n    where=(x &gt; valor_critico_inf) &amp; (x &lt; valor_critico_sup),\n    color=\"green\",\n    alpha=0.5,\n    label=\"Zona de Aceptaci\u00f3n\",\n)\nplt.axvline(F_est, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico F = {F_est:.2f}\")\nplt.title(\"Contraste Bilateral para Igualdad de Varianzas\\n(Rechazo de H\u2080)\")\nplt.xlabel(\"F\")\nplt.ylabel(\"Densidad\")\nplt.legend()\nplt.show()\n\nprint(f\"Estad\u00edstico F: {F_est:.4f}\")\nprint(f\"Valores cr\u00edticos: [{valor_critico_inf:.4f}, {valor_critico_sup:.4f}]\")\nprint(f\"P-valor: {p_valor:.4f}\")\n\nif F_est &lt; valor_critico_inf or F_est &gt; valor_critico_sup:\n    print(\"Rechazamos H\u2080\")\nelse:\n    print(\"No rechazamos H\u2080\")\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy.stats import f  # Datos sA_cuadrado = 4.8  # Varianza muestral del M\u00e9todo A sB_cuadrado = 1.9  # Varianza muestral del M\u00e9todo B nA = 20  # Tama\u00f1o de la muestra del M\u00e9todo A nB = 25  # Tama\u00f1o de la muestra del M\u00e9todo B  # Estad\u00edstico de contraste F_est = sA_cuadrado / sB_cuadrado  # Valor cr\u00edtico y p-valor alpha = 0.05 grados_libertad1 = nA - 1  # Grados de libertad del numerador grados_libertad2 = nB - 1  # Grados de libertad del denominador valor_critico_sup = f.ppf(     1 - alpha / 2, grados_libertad1, grados_libertad2 )  # L\u00edmite superior valor_critico_inf = f.ppf(     alpha / 2, grados_libertad1, grados_libertad2 )  # L\u00edmite inferior p_valor = 2 * min(     f.cdf(F_est, grados_libertad1, grados_libertad2),     1 - f.cdf(F_est, grados_libertad1, grados_libertad2), )  # Gr\u00e1fico x = np.linspace(0, 5, 1000) y = f.pdf(x, grados_libertad1, grados_libertad2) plt.plot(x, y, label=\"Distribuci\u00f3n F\") plt.fill_between(     x,     y,     where=(x &lt;= valor_critico_inf) | (x &gt;= valor_critico_sup),     color=\"red\",     alpha=0.5,     label=\"Zona de Rechazo\", ) plt.fill_between(     x,     y,     where=(x &gt; valor_critico_inf) &amp; (x &lt; valor_critico_sup),     color=\"green\",     alpha=0.5,     label=\"Zona de Aceptaci\u00f3n\", ) plt.axvline(F_est, color=\"black\", linestyle=\"--\", label=f\"Estad\u00edstico F = {F_est:.2f}\") plt.title(\"Contraste Bilateral para Igualdad de Varianzas\\n(Rechazo de H\u2080)\") plt.xlabel(\"F\") plt.ylabel(\"Densidad\") plt.legend() plt.show()  print(f\"Estad\u00edstico F: {F_est:.4f}\") print(f\"Valores cr\u00edticos: [{valor_critico_inf:.4f}, {valor_critico_sup:.4f}]\") print(f\"P-valor: {p_valor:.4f}\")  if F_est &lt; valor_critico_inf or F_est &gt; valor_critico_sup:     print(\"Rechazamos H\u2080\") else:     print(\"No rechazamos H\u2080\")"},{"location":"Contenido/26_Contrastes%20de%20hip%C3%B3tesis.html#26_contrastes-de-hipotesis-parametricos","title":"26_CONTRASTES DE HIP\u00d3TESIS PARAM\u00c9TRICOS\u00b6","text":""},{"location":"Contenido/26_Contrastes%20de%20hip%C3%B3tesis.html#contaminante-en-agua-bilateral-y-rechazamos-la-hipotesis-nula","title":"Contaminante en agua (bilateral y rechazamos la hip\u00f3tesis nula)\u00b6","text":""},{"location":"Contenido/26_Contrastes%20de%20hip%C3%B3tesis.html#contaminante-en-agua-unilateral-derecha-y-aceptamos-la-hipotesis-nula","title":"Contaminante en agua (unilateral derecha y aceptamos la hip\u00f3tesis nula)\u00b6","text":""},{"location":"Contenido/26_Contrastes%20de%20hip%C3%B3tesis.html#crecimiento-de-plantas","title":"Crecimiento de plantas\u00b6","text":""},{"location":"Contenido/26_Contrastes%20de%20hip%C3%B3tesis.html#rendimiento-de-dos-tipos-de-paneles-solares","title":"Rendimiento de dos tipos de paneles solares)\u00b6","text":""},{"location":"Contenido/26_Contrastes%20de%20hip%C3%B3tesis.html#diametro-de-una-pieza","title":"Di\u00e1metro de una pieza\u00b6","text":""},{"location":"Contenido/26_Contrastes%20de%20hip%C3%B3tesis.html#resistencia-en-fibras-de-carbono","title":"Resistencia en fibras de carbono\u00b6","text":""},{"location":"Contenido/27_Contrastes%20de%20hip%C3%B3tesis%20no%20param%C3%A9tricos.html","title":"CONTRASTES DE HIP\u00d3TESIS NO PARAM\u00c9TRICOS","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\n\n# Datos\nantes = np.array([130, 122, 125, 140, 135, 128, 138, 132])\ndespues = np.array([120, 118, 119, 130, 128, 125, 126, 121])\n\n# Prueba de Wilcoxon\nstat, p_value = stats.wilcoxon(antes, despues)\nprint(f\"Estad\u00edstico de prueba: {stat}, p-valor: {p_value}\")\nprint()\n\n# Gr\u00e1fico de comparaci\u00f3n\nplt.figure(figsize=(6, 4))\nplt.boxplot([antes, despues], labels=[\"Antes\", \"Despu\u00e9s\"])\nplt.title(\"Presi\u00f3n sangu\u00ednea antes vs despu\u00e9s\\nPrueba de Wilcoxon\")\nplt.show()\n</pre> # Importamos librer\u00edas import numpy as np import scipy.stats as stats import matplotlib.pyplot as plt  # Datos antes = np.array([130, 122, 125, 140, 135, 128, 138, 132]) despues = np.array([120, 118, 119, 130, 128, 125, 126, 121])  # Prueba de Wilcoxon stat, p_value = stats.wilcoxon(antes, despues) print(f\"Estad\u00edstico de prueba: {stat}, p-valor: {p_value}\") print()  # Gr\u00e1fico de comparaci\u00f3n plt.figure(figsize=(6, 4)) plt.boxplot([antes, despues], labels=[\"Antes\", \"Despu\u00e9s\"]) plt.title(\"Presi\u00f3n sangu\u00ednea antes vs despu\u00e9s\\nPrueba de Wilcoxon\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\n\n# Datos: crecimiento de plantas con dos fertilizantes distintos\nfertilizante_A = np.array([15, 16, 14, 25, 18, 22, 17, 16])\nfertilizante_B = np.array([22, 21, 25, 20, 23, 24, 22, 21])\n\n# Prueba de Mann-Whitney U\nstat, p = stats.mannwhitneyu(fertilizante_A, fertilizante_B)\nprint(f\"Estad\u00edstico de prueba: {stat}, p-valor: {p}\")\nprint()\n\n# Gr\u00e1fico de comparaci\u00f3n\nplt.figure(figsize=(6, 4))\nplt.boxplot([fertilizante_A, fertilizante_B], labels=[\"A\", \"B\"])\nplt.title(\"Fertilizante A vs Fertilizante B\")\nplt.show()\n</pre> # Importamos librer\u00edas import numpy as np import scipy.stats as stats import matplotlib.pyplot as plt  # Datos: crecimiento de plantas con dos fertilizantes distintos fertilizante_A = np.array([15, 16, 14, 25, 18, 22, 17, 16]) fertilizante_B = np.array([22, 21, 25, 20, 23, 24, 22, 21])  # Prueba de Mann-Whitney U stat, p = stats.mannwhitneyu(fertilizante_A, fertilizante_B) print(f\"Estad\u00edstico de prueba: {stat}, p-valor: {p}\") print()  # Gr\u00e1fico de comparaci\u00f3n plt.figure(figsize=(6, 4)) plt.boxplot([fertilizante_A, fertilizante_B], labels=[\"A\", \"B\"]) plt.title(\"Fertilizante A vs Fertilizante B\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\n\n# Datos: niveles de contaminaci\u00f3n en tres r\u00edos\nrio_1 = np.array([42, 41, 37, 35, 40])\nrio_2 = np.array([40, 42, 38, 41, 39])\nrio_3 = np.array([50, 55, 53, 52, 54])\n\n# Prueba de Kruskal-Wallis\nstat, p = stats.kruskal(rio_1, rio_2, rio_3)\nprint(f\"Estad\u00edstico de prueba: {stat}, p-valor: {p}\")\nprint()\n\n# Gr\u00e1fico de comparaci\u00f3n\nplt.figure(figsize=(6, 4))\nplt.boxplot([rio_1, rio_2, rio_3], labels=[\"R\u00edo 1\", \"R\u00edo 2\", \"R\u00edo 3\"])\nplt.title(\"Contaminaci\u00f3n en r\u00edos\")\nplt.show()\n</pre> # Importamos librer\u00edas import numpy as np import scipy.stats as stats import matplotlib.pyplot as plt  # Datos: niveles de contaminaci\u00f3n en tres r\u00edos rio_1 = np.array([42, 41, 37, 35, 40]) rio_2 = np.array([40, 42, 38, 41, 39]) rio_3 = np.array([50, 55, 53, 52, 54])  # Prueba de Kruskal-Wallis stat, p = stats.kruskal(rio_1, rio_2, rio_3) print(f\"Estad\u00edstico de prueba: {stat}, p-valor: {p}\") print()  # Gr\u00e1fico de comparaci\u00f3n plt.figure(figsize=(6, 4)) plt.boxplot([rio_1, rio_2, rio_3], labels=[\"R\u00edo 1\", \"R\u00edo 2\", \"R\u00edo 3\"]) plt.title(\"Contaminaci\u00f3n en r\u00edos\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\n\n# Datos: precisi\u00f3n de tres algoritmos en cinco conjuntos de datos\nalgoritmo_1 = np.array([88, 88, 87, 89, 86])\nalgoritmo_2 = np.array([89, 85, 84, 87, 86])\nalgoritmo_3 = np.array([88, 85, 87, 85, 87])\n\n# Prueba de Friedman\nstat, p = stats.friedmanchisquare(algoritmo_1, algoritmo_2, algoritmo_3)\nprint(f\"Estad\u00edstico de prueba: {stat:.4f}, p-valor: {p}\")\n\n# Gr\u00e1fico de comparaci\u00f3n\nplt.figure(figsize=(6, 4))\nplt.boxplot(\n    [algoritmo_1, algoritmo_2, algoritmo_3],\n    labels=[\"Algoritmo 1\", \"Algoritmo 2\", \"Algoritmo 3\"],\n)\nplt.title(\"Rendimiento de algoritmos\")\nplt.show()\n</pre> # Importamos librer\u00edas import numpy as np import scipy.stats as stats import matplotlib.pyplot as plt  # Datos: precisi\u00f3n de tres algoritmos en cinco conjuntos de datos algoritmo_1 = np.array([88, 88, 87, 89, 86]) algoritmo_2 = np.array([89, 85, 84, 87, 86]) algoritmo_3 = np.array([88, 85, 87, 85, 87])  # Prueba de Friedman stat, p = stats.friedmanchisquare(algoritmo_1, algoritmo_2, algoritmo_3) print(f\"Estad\u00edstico de prueba: {stat:.4f}, p-valor: {p}\")  # Gr\u00e1fico de comparaci\u00f3n plt.figure(figsize=(6, 4)) plt.boxplot(     [algoritmo_1, algoritmo_2, algoritmo_3],     labels=[\"Algoritmo 1\", \"Algoritmo 2\", \"Algoritmo 3\"], ) plt.title(\"Rendimiento de algoritmos\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Importamos librer\u00edas\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\n\n# Datos: contaminaci\u00f3n ambiental y enfermedades respiratorias\ncontaminacion = np.array([10, 20, 30, 40, 50])\nenfermedades = np.array([5, 15, 25, 35, 40])\n\n# Correlaci\u00f3n de Spearman\ncoef, p = stats.spearmanr(contaminacion, enfermedades)\nprint(f\"Coeficiente de Spearman: {coef:.4f}, p-valor: {p}\")\n</pre> # Importamos librer\u00edas import numpy as np import scipy.stats as stats import matplotlib.pyplot as plt  # Datos: contaminaci\u00f3n ambiental y enfermedades respiratorias contaminacion = np.array([10, 20, 30, 40, 50]) enfermedades = np.array([5, 15, 25, 35, 40])  # Correlaci\u00f3n de Spearman coef, p = stats.spearmanr(contaminacion, enfermedades) print(f\"Coeficiente de Spearman: {coef:.4f}, p-valor: {p}\")"},{"location":"Contenido/27_Contrastes%20de%20hip%C3%B3tesis%20no%20param%C3%A9tricos.html#contrastes-de-hipotesis-no-parametricos","title":"CONTRASTES DE HIP\u00d3TESIS NO PARAM\u00c9TRICOS\u00b6","text":""},{"location":"Contenido/27_Contrastes%20de%20hip%C3%B3tesis%20no%20param%C3%A9tricos.html#presion-sanguinea","title":"Presi\u00f3n sangu\u00ednea\u00b6","text":""},{"location":"Contenido/27_Contrastes%20de%20hip%C3%B3tesis%20no%20param%C3%A9tricos.html#rendimiento-de-fertilizantes","title":"Rendimiento de fertilizantes\u00b6","text":""},{"location":"Contenido/27_Contrastes%20de%20hip%C3%B3tesis%20no%20param%C3%A9tricos.html#contaminacion-en-tres-rios","title":"Contaminaci\u00f3n en tres r\u00edos\u00b6","text":""},{"location":"Contenido/27_Contrastes%20de%20hip%C3%B3tesis%20no%20param%C3%A9tricos.html#algoritmos-de-machine-learning","title":"Algoritmos de machine learning\u00b6","text":""},{"location":"Contenido/27_Contrastes%20de%20hip%C3%B3tesis%20no%20param%C3%A9tricos.html#relacion-entre-contaminacion-ambiental-y-enfermedades-respiratorias","title":"Relaci\u00f3n entre contaminaci\u00f3n ambiental y enfermedades respiratorias\u00b6","text":""},{"location":"Contenido/28_Ajuste%20a%20distribuci%C3%B3n.html","title":"28_AJUSTE DE DATOS A UNA DISTRIBUCI\u00d3N TE\u00d3RICA","text":"In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\n# Gereramos datos simulados de tiempo de vida Weibull\nnp.random.seed(42)\ntiempo_vida = stats.weibull_min.rvs(c=2.5, loc=0, scale=1000, size=100)\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt import scipy.stats as stats  # Gereramos datos simulados de tiempo de vida Weibull np.random.seed(42) tiempo_vida = stats.weibull_min.rvs(c=2.5, loc=0, scale=1000, size=100) In\u00a0[\u00a0]: Copied! <pre># Ajustamos al distribuci\u00f3n Weibull\nparams_weibull = stats.weibull_min.fit(tiempo_vida)\n\n# Test K-S\nks_stat, ks_pval = stats.kstest(tiempo_vida, \"weibull_min\", params_weibull)\n\n# Crear visualizaciones\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n# Histograma\nax1.hist(tiempo_vida, bins=\"auto\", density=True, alpha=0.7)\nx = np.linspace(min(tiempo_vida), max(tiempo_vida), 100)\nax1.plot(x, stats.weibull_min.pdf(x, *params_weibull), \"r-\", label=\"PDF Weibull\")\nax1.set_title(\"Histograma - Tiempo de vida\")\nax1.set_xlabel(\"Tiempo (horas)\")\nax1.set_ylabel(\"Densidad\")\nax1.legend()\n\n# Q-Q plot\nstats.probplot(tiempo_vida, dist=\"weibull_min\", sparams=params_weibull, plot=ax2)\nax2.set_title(\"Q-Q Plot - Tiempo de vida\")\n\nplt.tight_layout()\n\nprint(\"=== An\u00e1lisis de tiempo de vida (Weibull) ===\")\nprint(\n    f\"Par\u00e1metros estimados: c={params_weibull[0]:.2f}, loc={params_weibull[1]:.2f}, scale={params_weibull[2]:.2f}\"\n)\nprint(f\"Estad\u00edstico KS: {ks_stat:.4f}\")\nprint(f\"p-valor: {ks_pval:.4f}\")\nprint()\n</pre> # Ajustamos al distribuci\u00f3n Weibull params_weibull = stats.weibull_min.fit(tiempo_vida)  # Test K-S ks_stat, ks_pval = stats.kstest(tiempo_vida, \"weibull_min\", params_weibull)  # Crear visualizaciones fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))  # Histograma ax1.hist(tiempo_vida, bins=\"auto\", density=True, alpha=0.7) x = np.linspace(min(tiempo_vida), max(tiempo_vida), 100) ax1.plot(x, stats.weibull_min.pdf(x, *params_weibull), \"r-\", label=\"PDF Weibull\") ax1.set_title(\"Histograma - Tiempo de vida\") ax1.set_xlabel(\"Tiempo (horas)\") ax1.set_ylabel(\"Densidad\") ax1.legend()  # Q-Q plot stats.probplot(tiempo_vida, dist=\"weibull_min\", sparams=params_weibull, plot=ax2) ax2.set_title(\"Q-Q Plot - Tiempo de vida\")  plt.tight_layout()  print(\"=== An\u00e1lisis de tiempo de vida (Weibull) ===\") print(     f\"Par\u00e1metros estimados: c={params_weibull[0]:.2f}, loc={params_weibull[1]:.2f}, scale={params_weibull[2]:.2f}\" ) print(f\"Estad\u00edstico KS: {ks_stat:.4f}\") print(f\"p-valor: {ks_pval:.4f}\") print() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\n# Generamos datos\nnp.random.seed(42)  # Fijamos la semilla\nprecipitacion = stats.gamma.rvs(a=2, scale=10, size=200)\n\n# Ajuste\nparams_gamma = stats.gamma.fit(precipitacion)\n\n# Test K-S\nks_stat, ks_pval = stats.kstest(precipitacion, \"gamma\", params_gamma)\n\n# Visualizaciones\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n# Histograma\nax1.hist(precipitacion, bins=\"auto\", density=True, alpha=0.7)\nx = np.linspace(min(precipitacion), max(precipitacion), 100)\nax1.plot(x, stats.gamma.pdf(x, *params_gamma), \"r-\", label=\"PDF Gamma\")\nax1.set_title(\"Histograma - Precipitaci\u00f3n\")\nax1.set_xlabel(\"Precipitaci\u00f3n (mm)\")\nax1.set_ylabel(\"Densidad\")\nax1.legend()\n\n# Q-Q plot\nstats.probplot(precipitacion, dist=\"gamma\", sparams=params_gamma, plot=ax2)\nax2.set_title(\"Q-Q Plot - Precipitaci\u00f3n\")\n\nplt.tight_layout()\n\nprint(\"\\n=== An\u00e1lisis de precipitaci\u00f3n (Gamma) ===\")\nprint(\n    f\"Par\u00e1metros estimados: a={params_gamma[0]:.2f}, loc={params_gamma[1]:.2f}, scale={params_gamma[2]:.2f}\"\n)\nprint(f\"Estad\u00edstico KS: {ks_stat:.4f}\")\nprint(f\"p-valor: {ks_pval:.4f}\")\nprint()\n</pre> # Importamos las librer\u00edas import numpy as np import matplotlib.pyplot as plt import scipy.stats as stats  # Generamos datos np.random.seed(42)  # Fijamos la semilla precipitacion = stats.gamma.rvs(a=2, scale=10, size=200)  # Ajuste params_gamma = stats.gamma.fit(precipitacion)  # Test K-S ks_stat, ks_pval = stats.kstest(precipitacion, \"gamma\", params_gamma)  # Visualizaciones fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))  # Histograma ax1.hist(precipitacion, bins=\"auto\", density=True, alpha=0.7) x = np.linspace(min(precipitacion), max(precipitacion), 100) ax1.plot(x, stats.gamma.pdf(x, *params_gamma), \"r-\", label=\"PDF Gamma\") ax1.set_title(\"Histograma - Precipitaci\u00f3n\") ax1.set_xlabel(\"Precipitaci\u00f3n (mm)\") ax1.set_ylabel(\"Densidad\") ax1.legend()  # Q-Q plot stats.probplot(precipitacion, dist=\"gamma\", sparams=params_gamma, plot=ax2) ax2.set_title(\"Q-Q Plot - Precipitaci\u00f3n\")  plt.tight_layout()  print(\"\\n=== An\u00e1lisis de precipitaci\u00f3n (Gamma) ===\") print(     f\"Par\u00e1metros estimados: a={params_gamma[0]:.2f}, loc={params_gamma[1]:.2f}, scale={params_gamma[2]:.2f}\" ) print(f\"Estad\u00edstico KS: {ks_stat:.4f}\") print(f\"p-valor: {ks_pval:.4f}\") print() In\u00a0[\u00a0]: Copied! <pre># Importamos las librer\u00edas\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\n\n\"\"\" Generamos datos que sabemos que no son normales.\n    Usaremos una mezcla de dos distribuciones para \n    simular un proceso bimodal \n\"\"\"\nnp.random.seed(42)\nvelocidad_1 = stats.norm.rvs(loc=10, scale=1, size=100)\nvelocidad_2 = stats.norm.rvs(loc=15, scale=1, size=100)\nvelocidad_reaccion = np.concatenate([velocidad_1, velocidad_2])\n\n# Intentamos ajustar (incorrectamente) a una distribuci\u00f3n normal\nparams_norm = stats.norm.fit(velocidad_reaccion)\n\n# Test K-S\nks_stat, ks_pval = stats.kstest(velocidad_reaccion, \"norm\", params_norm)\n\n# Visualizaciones\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n# Histograma\nax1.hist(velocidad_reaccion, bins=\"auto\", density=True, alpha=0.7)\nx = np.linspace(min(velocidad_reaccion), max(velocidad_reaccion), 100)\nax1.plot(\n    x, stats.norm.pdf(x, *params_norm), \"r-\", label=\"PDF Normal (intento de ajuste)\"\n)\nax1.set_title(\"Histograma - Velocidad de reacci\u00f3n\")\nax1.set_xlabel(\"Velocidad (mol/s)\")\nax1.set_ylabel(\"Densidad\")\nax1.legend()\n\n# Q-Q plot\nstats.probplot(velocidad_reaccion, plot=ax2)\nax2.set_title(\"Q-Q Plot - Velocidad de reacci\u00f3n\")\n\nplt.tight_layout()\n\nprint(\"\\n=== An\u00e1lisis de velocidad de reacci\u00f3n (Intento de ajuste Normal) ===\")\nprint(f\"Par\u00e1metros estimados: \u03bc={params_norm[0]:.2f}, \u03c3={params_norm[1]:.2f}\")\nprint(f\"Estad\u00edstico KS: {ks_stat:.4f}\")\nprint(f\"p-valor: {ks_pval:.4f}\")\nprint()\n</pre> # Importamos las librer\u00edas import numpy as np import scipy.stats as stats import matplotlib.pyplot as plt  \"\"\" Generamos datos que sabemos que no son normales.     Usaremos una mezcla de dos distribuciones para      simular un proceso bimodal  \"\"\" np.random.seed(42) velocidad_1 = stats.norm.rvs(loc=10, scale=1, size=100) velocidad_2 = stats.norm.rvs(loc=15, scale=1, size=100) velocidad_reaccion = np.concatenate([velocidad_1, velocidad_2])  # Intentamos ajustar (incorrectamente) a una distribuci\u00f3n normal params_norm = stats.norm.fit(velocidad_reaccion)  # Test K-S ks_stat, ks_pval = stats.kstest(velocidad_reaccion, \"norm\", params_norm)  # Visualizaciones fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))  # Histograma ax1.hist(velocidad_reaccion, bins=\"auto\", density=True, alpha=0.7) x = np.linspace(min(velocidad_reaccion), max(velocidad_reaccion), 100) ax1.plot(     x, stats.norm.pdf(x, *params_norm), \"r-\", label=\"PDF Normal (intento de ajuste)\" ) ax1.set_title(\"Histograma - Velocidad de reacci\u00f3n\") ax1.set_xlabel(\"Velocidad (mol/s)\") ax1.set_ylabel(\"Densidad\") ax1.legend()  # Q-Q plot stats.probplot(velocidad_reaccion, plot=ax2) ax2.set_title(\"Q-Q Plot - Velocidad de reacci\u00f3n\")  plt.tight_layout()  print(\"\\n=== An\u00e1lisis de velocidad de reacci\u00f3n (Intento de ajuste Normal) ===\") print(f\"Par\u00e1metros estimados: \u03bc={params_norm[0]:.2f}, \u03c3={params_norm[1]:.2f}\") print(f\"Estad\u00edstico KS: {ks_stat:.4f}\") print(f\"p-valor: {ks_pval:.4f}\") print()"},{"location":"Contenido/28_Ajuste%20a%20distribuci%C3%B3n.html#28_ajuste-de-datos-a-una-distribucion-teorica","title":"28_AJUSTE DE DATOS A UNA DISTRIBUCI\u00d3N TE\u00d3RICA\u00b6","text":""},{"location":"Contenido/28_Ajuste%20a%20distribuci%C3%B3n.html#tiempo-de-vida-de-componenentes-electronicos","title":"Tiempo de vida de componenentes electr\u00f3nicos\u00b6","text":""},{"location":"Contenido/28_Ajuste%20a%20distribuci%C3%B3n.html#mediciones-de-precipitaciones","title":"Mediciones de precipitaciones\u00b6","text":""},{"location":"Contenido/28_Ajuste%20a%20distribuci%C3%B3n.html#velocidad-de-reaccion-quimica-mal-ajuste","title":"Velocidad de reacci\u00f3n qu\u00edmica (mal ajuste)\u00b6","text":""},{"location":"Contenido/29_Regresion%20lineal.html","title":"29_REGRESI\u00d3N LINEAL","text":"In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Generar datos: Fuerza (N) vs. Elongaci\u00f3n (m)\nnp.random.seed(100)\nX = np.linspace(1, 10, 50)  # Fuerza (N)\nY = 0.1 * X + np.random.normal(0, 0.02, 50)  # Elongaci\u00f3n (m) con ruido\n\n# C\u00e1lculo de los coeficientes\nn = len(X)\nX_mean, Y_mean = np.mean(X), np.mean(Y)\nbeta1 = np.sum((X - X_mean) * (Y - Y_mean)) / np.sum((X - X_mean) ** 2)\nbeta0 = Y_mean - beta1 * X_mean\n\n# Predicciones\nY_pred = beta0 + beta1 * X\n\n# Residuos\nresiduos = Y - Y_pred\n\n# Gr\u00e1fica\nplt.scatter(X, Y, color=\"blue\", label=\"Datos observados\")\nplt.plot(X, Y_pred, color=\"red\", label=\"L\u00ednea de regresi\u00f3n\")\nplt.xlabel(\"Fuerza (N)\")\nplt.ylabel(\"Elongaci\u00f3n (m)\")\nplt.legend()\nplt.title(\"Regresi\u00f3n Lineal: Ley de Hooke\")\nplt.show()\n\nprint(f\"Ecuaci\u00f3n: Y = {beta0:.2f} + {beta1:.2f}X\")\nprint(f\"Residuos: {residuos}\")\n</pre> import numpy as np import matplotlib.pyplot as plt  # Generar datos: Fuerza (N) vs. Elongaci\u00f3n (m) np.random.seed(100) X = np.linspace(1, 10, 50)  # Fuerza (N) Y = 0.1 * X + np.random.normal(0, 0.02, 50)  # Elongaci\u00f3n (m) con ruido  # C\u00e1lculo de los coeficientes n = len(X) X_mean, Y_mean = np.mean(X), np.mean(Y) beta1 = np.sum((X - X_mean) * (Y - Y_mean)) / np.sum((X - X_mean) ** 2) beta0 = Y_mean - beta1 * X_mean  # Predicciones Y_pred = beta0 + beta1 * X  # Residuos residuos = Y - Y_pred  # Gr\u00e1fica plt.scatter(X, Y, color=\"blue\", label=\"Datos observados\") plt.plot(X, Y_pred, color=\"red\", label=\"L\u00ednea de regresi\u00f3n\") plt.xlabel(\"Fuerza (N)\") plt.ylabel(\"Elongaci\u00f3n (m)\") plt.legend() plt.title(\"Regresi\u00f3n Lineal: Ley de Hooke\") plt.show()  print(f\"Ecuaci\u00f3n: Y = {beta0:.2f} + {beta1:.2f}X\") print(f\"Residuos: {residuos}\") In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# Generar datos sint\u00e9ticos: Fuerza (N) vs. Elongaci\u00f3n (m)\nnp.random.seed(100)\nX = np.linspace(1, 10, 50)  # Fuerza (N)\nY = 0.1 * X + np.random.normal(0, 0.02, 50)  # Elongaci\u00f3n (m) con ruido\n\n# Crear y entrenar el modelo\nmodelo = LinearRegression()\nmodelo.fit(X.reshape(-1, 1), Y)\n\n# Predicciones y residuos\nY_pred = modelo.predict(X.reshape(-1, 1))\nresiduos = Y - Y_pred\n\nprint(f\"Ecuaci\u00f3n: Y = {modelo.intercept_:.2f} + {modelo.coef_[0]:.2f}X\")\nprint(f\"Residuos: {residuos}\")\nprint()\n\n# Gr\u00e1fica\nplt.scatter(X, Y, color=\"blue\", label=\"Datos observados\")\nplt.plot(X, Y_pred, color=\"red\", label=\"L\u00ednea de regresi\u00f3n\")\nplt.xlabel(\"Fuerza (N)\")\nplt.ylabel(\"Elongaci\u00f3n (m)\")\nplt.legend()\nplt.title(\"Regresi\u00f3n Lineal: Ley de Hooke\")\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression  # Generar datos sint\u00e9ticos: Fuerza (N) vs. Elongaci\u00f3n (m) np.random.seed(100) X = np.linspace(1, 10, 50)  # Fuerza (N) Y = 0.1 * X + np.random.normal(0, 0.02, 50)  # Elongaci\u00f3n (m) con ruido  # Crear y entrenar el modelo modelo = LinearRegression() modelo.fit(X.reshape(-1, 1), Y)  # Predicciones y residuos Y_pred = modelo.predict(X.reshape(-1, 1)) residuos = Y - Y_pred  print(f\"Ecuaci\u00f3n: Y = {modelo.intercept_:.2f} + {modelo.coef_[0]:.2f}X\") print(f\"Residuos: {residuos}\") print()  # Gr\u00e1fica plt.scatter(X, Y, color=\"blue\", label=\"Datos observados\") plt.plot(X, Y_pred, color=\"red\", label=\"L\u00ednea de regresi\u00f3n\") plt.xlabel(\"Fuerza (N)\") plt.ylabel(\"Elongaci\u00f3n (m)\") plt.legend() plt.title(\"Regresi\u00f3n Lineal: Ley de Hooke\") plt.show() In\u00a0[\u00a0]: Copied! <pre># Gr\u00e1fica de residuos\nplt.scatter(X, residuos, color=\"gold\", label=\"Residuos\")\nplt.axhline(y=0, color=\"green\", linestyle=\"--\", label=\"L\u00ednea de referencia\")\nplt.xlabel(\"Fuerza (N)\")\nplt.ylabel(\"Residuos\")\nplt.legend()\nplt.title(\"An\u00e1lisis de Residuos: Ley de Hooke\")\nplt.show()\n\n# Histograma de residuos\nplt.hist(residuos, bins=5, color=\"khaki\", edgecolor=\"black\")\nplt.xlabel(\"Residuos\")\nplt.ylabel(\"Frecuencia\")\nplt.title(\"Distribuci\u00f3n de Residuos\")\nplt.show()\n</pre> # Gr\u00e1fica de residuos plt.scatter(X, residuos, color=\"gold\", label=\"Residuos\") plt.axhline(y=0, color=\"green\", linestyle=\"--\", label=\"L\u00ednea de referencia\") plt.xlabel(\"Fuerza (N)\") plt.ylabel(\"Residuos\") plt.legend() plt.title(\"An\u00e1lisis de Residuos: Ley de Hooke\") plt.show()  # Histograma de residuos plt.hist(residuos, bins=5, color=\"khaki\", edgecolor=\"black\") plt.xlabel(\"Residuos\") plt.ylabel(\"Frecuencia\") plt.title(\"Distribuci\u00f3n de Residuos\") plt.show() In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# Generamos datos. Concentraci\u00f3n (mol/L) y Velocidad (mol/l\u00b7s)\nnp.random.seed(89)\nX = np.linspace(0.1, 1.0, 50)  # Concentraci\u00f3n\nY = 0.5 * X + np.random.normal(0, 0.05, 50)  # Velocidad con ruido\n\n# Creamos el objeto y lo entrenamos\nmodelo = LinearRegression()\nmodelo.fit(X.reshape(-1, 1), Y)\n\n# Coeficiente del modelo de regresi\u00f3n simple\nbeta0 = modelo.intercept_\nbeta1 = modelo.coef_[0]\n\n# Predicci\u00f3n y residuos\nY_pred = modelo.predict(X.reshape(-1, 1))\nresiduos = Y - Y_pred\n\n# Resultados\nprint(f\"Ecuaci\u00f3n: Y = {beta0:.2f} + {beta1:.2f}X\")\nprint(f\"Residuos: {residuos}\")\nprint()\n\n# Gr\u00e1fica de la regresi\u00f3n lineal\nplt.scatter(X, Y, color=\"blue\", label=\"Datos observados\")\nplt.plot(X, Y_pred, color=\"orange\", label=\"L\u00ednea de regresi\u00f3n\")\nplt.xlabel(\"Concentraci\u00f3n (mol/L)\")\nplt.ylabel(\"Velocidad (mol/L\u00b7s)\")\nplt.legend()\nplt.title(\"Regresi\u00f3n Lineal: Cin\u00e9tica Qu\u00edmica\")\nplt.show()\n\n# Gr\u00e1fica de residuos\nplt.scatter(X, residuos, color=\"green\", label=\"Residuos\")\nplt.axhline(y=0, color=\"red\", linestyle=\"--\", label=\"L\u00ednea de referencia\")\nplt.xlabel(\"Concentraci\u00f3n (mol/L)\")\nplt.ylabel(\"Residuos\")\nplt.legend()\nplt.title(\"An\u00e1lisis de Residuos: Cin\u00e9tica Qu\u00edmica\")\nplt.show()\n\n# Histograma de residuos\nplt.hist(residuos, bins=10, color=\"orange\", edgecolor=\"black\")\nplt.xlabel(\"Residuos\")\nplt.ylabel(\"Frecuencia\")\nplt.title(\"Distribuci\u00f3n de Residuos\")\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression  # Generamos datos. Concentraci\u00f3n (mol/L) y Velocidad (mol/l\u00b7s) np.random.seed(89) X = np.linspace(0.1, 1.0, 50)  # Concentraci\u00f3n Y = 0.5 * X + np.random.normal(0, 0.05, 50)  # Velocidad con ruido  # Creamos el objeto y lo entrenamos modelo = LinearRegression() modelo.fit(X.reshape(-1, 1), Y)  # Coeficiente del modelo de regresi\u00f3n simple beta0 = modelo.intercept_ beta1 = modelo.coef_[0]  # Predicci\u00f3n y residuos Y_pred = modelo.predict(X.reshape(-1, 1)) residuos = Y - Y_pred  # Resultados print(f\"Ecuaci\u00f3n: Y = {beta0:.2f} + {beta1:.2f}X\") print(f\"Residuos: {residuos}\") print()  # Gr\u00e1fica de la regresi\u00f3n lineal plt.scatter(X, Y, color=\"blue\", label=\"Datos observados\") plt.plot(X, Y_pred, color=\"orange\", label=\"L\u00ednea de regresi\u00f3n\") plt.xlabel(\"Concentraci\u00f3n (mol/L)\") plt.ylabel(\"Velocidad (mol/L\u00b7s)\") plt.legend() plt.title(\"Regresi\u00f3n Lineal: Cin\u00e9tica Qu\u00edmica\") plt.show()  # Gr\u00e1fica de residuos plt.scatter(X, residuos, color=\"green\", label=\"Residuos\") plt.axhline(y=0, color=\"red\", linestyle=\"--\", label=\"L\u00ednea de referencia\") plt.xlabel(\"Concentraci\u00f3n (mol/L)\") plt.ylabel(\"Residuos\") plt.legend() plt.title(\"An\u00e1lisis de Residuos: Cin\u00e9tica Qu\u00edmica\") plt.show()  # Histograma de residuos plt.hist(residuos, bins=10, color=\"orange\", edgecolor=\"black\") plt.xlabel(\"Residuos\") plt.ylabel(\"Frecuencia\") plt.title(\"Distribuci\u00f3n de Residuos\") plt.show() In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom scipy import stats\nimport seaborn as sns\n\n# Generamos datos no lineales para IMC y presi\u00f3n arterial sist\u00f3lica\nnp.random.seed(42)\nn_pacientes = 100\n\n# Generamos IMC con distribuci\u00f3n no normal\nimc = np.concatenate(\n    [\n        np.random.normal(22, 2, 50),  # IMC normal\n        np.random.normal(30, 3, 20),  # Sobrepeso/obesidad\n        np.random.normal(35, 4, 30),  # Obesidad severa\n    ]\n)\n\n# Modificamos la generaci\u00f3n de presi\u00f3n para obtener r \u2248 0.7\nruido = np.random.normal(0, 10, n_pacientes) * (imc / 20)  # Ruido heteroced\u00e1stico\npresion = (\n    90 + 2.5 * imc + (imc - 38) ** 2 * 0.1 + ruido\n)  # Combinaci\u00f3n lineal y no lineal\n\n# Creamos DataFrame\ndatos = pd.DataFrame({\"IMC\": imc, \"Presion_Sistolica\": presion})\n\n# Ajustamos regresi\u00f3n lineal\nX = datos[\"IMC\"].values.reshape(-1, 1)\ny = datos[\"Presion_Sistolica\"].values\nmodelo = LinearRegression()\nmodelo.fit(X, y)\ny_pred = modelo.predict(X)\n\n# Calculamos residuos\nresiduos = y - y_pred\n\n# Calculamos coeficiente de correlaci\u00f3n de Pearson\nr = stats.pearsonr(imc, presion)[0]\n\n# Creamos visualizaci\u00f3n con 3 gr\u00e1ficos\nfig = plt.figure(figsize=(15, 5))\ngs = plt.GridSpec(1, 3, figure=fig)\n\n# 1. Gr\u00e1fico de dispersi\u00f3n con l\u00ednea de regresi\u00f3n\nax1 = fig.add_subplot(gs[0, 0])\nax1.scatter(X, y, alpha=0.5, color=\"blue\")\nax1.plot(X, y_pred, color=\"red\", linewidth=2)\nax1.set_xlabel(\"IMC\")\nax1.set_ylabel(\"Presi\u00f3n Sist\u00f3lica (mmHg)\")\nax1.set_title(f\"Dispersi\u00f3n y Regresi\u00f3n Lineal\\nr = {r:.3f}\")\nax1.grid(True, alpha=0.3)\n\n# 2. Gr\u00e1fico de residuos vs valores ajustados\nax2 = fig.add_subplot(gs[0, 1])\nax2.scatter(y_pred, residuos, alpha=0.5, color=\"green\")\nax2.axhline(y=0, color=\"red\", linestyle=\"--\")\nax2.set_xlabel(\"Valores Predichos\")\nax2.set_ylabel(\"Residuos\")\nax2.set_title(\"Residuos vs Valores Predichos\\nHeterocedasticidad\")\nax2.grid(True, alpha=0.3)\n\n# 3. Histograma de residuos\nax3 = fig.add_subplot(gs[0, 2])\nsns.histplot(residuos, kde=True, ax=ax3, color=\"purple\")\nax3.axvline(\n    x=np.mean(residuos),\n    color=\"red\",\n    linestyle=\"--\",\n    label=f\"Media = {np.mean(residuos):.2f}\",\n)\nax3.set_xlabel(\"Residuos\")\nax3.set_title(\"Distribuci\u00f3n de Residuos\\n(No es Normal)\")\nax3.legend()\n\nplt.suptitle(\n    \"An\u00e1lisis de Regresi\u00f3n Lineal Inadecuada\\nIMC vs Presi\u00f3n Arterial Sist\u00f3lica\",\n    fontsize=14,\n)\nplt.tight_layout()\nplt.show()\n\n# Imprimimos estad\u00edsticas\nprint(\"\\nEstad\u00edsticas del modelo:\")\nprint(f\"Coeficiente de correlaci\u00f3n de Pearson (r): {r:.3f}\")\nprint(f\"Coeficiente de determinaci\u00f3n (R\u00b2): {modelo.score(X, y):.3f}\")\nprint(f\"Pendiente: {modelo.coef_[0]:.3f}\")\nprint(f\"Intercepto: {modelo.intercept_:.3f}\")\nprint(f\"\\nEstad\u00edsticas de residuos:\")\nprint(f\"Media de residuos: {np.mean(residuos):.3f}\")\nprint(f\"Desviaci\u00f3n est\u00e1ndar de residuos: {np.std(residuos):.3f}\")\n</pre> import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from scipy import stats import seaborn as sns  # Generamos datos no lineales para IMC y presi\u00f3n arterial sist\u00f3lica np.random.seed(42) n_pacientes = 100  # Generamos IMC con distribuci\u00f3n no normal imc = np.concatenate(     [         np.random.normal(22, 2, 50),  # IMC normal         np.random.normal(30, 3, 20),  # Sobrepeso/obesidad         np.random.normal(35, 4, 30),  # Obesidad severa     ] )  # Modificamos la generaci\u00f3n de presi\u00f3n para obtener r \u2248 0.7 ruido = np.random.normal(0, 10, n_pacientes) * (imc / 20)  # Ruido heteroced\u00e1stico presion = (     90 + 2.5 * imc + (imc - 38) ** 2 * 0.1 + ruido )  # Combinaci\u00f3n lineal y no lineal  # Creamos DataFrame datos = pd.DataFrame({\"IMC\": imc, \"Presion_Sistolica\": presion})  # Ajustamos regresi\u00f3n lineal X = datos[\"IMC\"].values.reshape(-1, 1) y = datos[\"Presion_Sistolica\"].values modelo = LinearRegression() modelo.fit(X, y) y_pred = modelo.predict(X)  # Calculamos residuos residuos = y - y_pred  # Calculamos coeficiente de correlaci\u00f3n de Pearson r = stats.pearsonr(imc, presion)[0]  # Creamos visualizaci\u00f3n con 3 gr\u00e1ficos fig = plt.figure(figsize=(15, 5)) gs = plt.GridSpec(1, 3, figure=fig)  # 1. Gr\u00e1fico de dispersi\u00f3n con l\u00ednea de regresi\u00f3n ax1 = fig.add_subplot(gs[0, 0]) ax1.scatter(X, y, alpha=0.5, color=\"blue\") ax1.plot(X, y_pred, color=\"red\", linewidth=2) ax1.set_xlabel(\"IMC\") ax1.set_ylabel(\"Presi\u00f3n Sist\u00f3lica (mmHg)\") ax1.set_title(f\"Dispersi\u00f3n y Regresi\u00f3n Lineal\\nr = {r:.3f}\") ax1.grid(True, alpha=0.3)  # 2. Gr\u00e1fico de residuos vs valores ajustados ax2 = fig.add_subplot(gs[0, 1]) ax2.scatter(y_pred, residuos, alpha=0.5, color=\"green\") ax2.axhline(y=0, color=\"red\", linestyle=\"--\") ax2.set_xlabel(\"Valores Predichos\") ax2.set_ylabel(\"Residuos\") ax2.set_title(\"Residuos vs Valores Predichos\\nHeterocedasticidad\") ax2.grid(True, alpha=0.3)  # 3. Histograma de residuos ax3 = fig.add_subplot(gs[0, 2]) sns.histplot(residuos, kde=True, ax=ax3, color=\"purple\") ax3.axvline(     x=np.mean(residuos),     color=\"red\",     linestyle=\"--\",     label=f\"Media = {np.mean(residuos):.2f}\", ) ax3.set_xlabel(\"Residuos\") ax3.set_title(\"Distribuci\u00f3n de Residuos\\n(No es Normal)\") ax3.legend()  plt.suptitle(     \"An\u00e1lisis de Regresi\u00f3n Lineal Inadecuada\\nIMC vs Presi\u00f3n Arterial Sist\u00f3lica\",     fontsize=14, ) plt.tight_layout() plt.show()  # Imprimimos estad\u00edsticas print(\"\\nEstad\u00edsticas del modelo:\") print(f\"Coeficiente de correlaci\u00f3n de Pearson (r): {r:.3f}\") print(f\"Coeficiente de determinaci\u00f3n (R\u00b2): {modelo.score(X, y):.3f}\") print(f\"Pendiente: {modelo.coef_[0]:.3f}\") print(f\"Intercepto: {modelo.intercept_:.3f}\") print(f\"\\nEstad\u00edsticas de residuos:\") print(f\"Media de residuos: {np.mean(residuos):.3f}\") print(f\"Desviaci\u00f3n est\u00e1ndar de residuos: {np.std(residuos):.3f}\") In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Generar datos dispersos\nnp.random.seed(67)  # Fijar semilla para reproducibilidad\ntemp = np.random.uniform(80, 320, 35)  # Temperaturas entre 80\u00b0C y 320\u00b0C\npres = np.random.uniform(0.8, 3.5, 35)  # Presiones entre 0.8 atm y 3.5 atm\nrend = (\n    30 + 0.25 * temp + 5 * pres + np.random.normal(0, 5, 35)\n)  # Rendimiento con variabilidad\n\n# Convertir a formato adecuado para el modelo\nX = np.column_stack((temp, pres))\nY = rend\n\n# Crear y entrenar el modelo\nmodelo = LinearRegression()\nmodelo.fit(X, Y)\n\n# Coeficientes del modelo\nbeta0 = modelo.intercept_  # Intercepto (beta0)\nbeta1, beta2 = modelo.coef_  # Coeficientes de temperatura y presi\u00f3n\n\n# Predicciones\nY_pred = modelo.predict(X)\nresiduos = Y - Y_pred  # C\u00e1lculo de residuos\n\n# Crear una malla para visualizar el plano de regresi\u00f3n\ntemp_range = np.linspace(80, 320, 25)  # Rango de temperatura m\u00e1s amplio\npres_range = np.linspace(0.8, 3.5, 25)  # Rango de presi\u00f3n m\u00e1s amplio\ntemp_mesh, pres_mesh = np.meshgrid(temp_range, pres_range)\nrend_mesh = beta0 + beta1 * temp_mesh + beta2 * pres_mesh  # Plano de regresi\u00f3n\n\n# Gr\u00e1fica 3D con residuos\nfig = plt.figure(figsize=(14, 10))\nax = fig.add_subplot(111, projection=\"3d\")\n\n# Puntos observados\nax.scatter(X[:, 0], X[:, 1], Y, color=\"blue\", s=80, label=\"Datos observados\")\n\n# Plano de regresi\u00f3n\nax.plot_surface(temp_mesh, pres_mesh, rend_mesh, color=\"red\", alpha=0.5)\n\n# Dibujar los residuos como l\u00edneas desde los puntos observados al plano\nfor i in range(len(Y)):\n    ax.plot(\n        [X[i, 0], X[i, 0]],\n        [X[i, 1], X[i, 1]],\n        [Y[i], Y_pred[i]],\n        color=\"black\",\n        linestyle=\"dashed\",\n    )\n\n# Etiquetas\nax.set_xlabel(\"Temperatura (\u00b0C)\")\nax.set_ylabel(\"Presi\u00f3n (atm)\")\nax.set_title(\"Regresi\u00f3n Lineal en Dos Variables: Rendimiento del Motor con Residuos\")\nax.legend()\n\nplt.show()\n\n# Resultados\nprint(\n    f\"Ecuaci\u00f3n del plano: Rendimiento = {beta0:.2f} + {beta1:.2f}\u00b7Temperatura + {beta2:.2f}\u00b7Presi\u00f3n\"\n)\nprint(f\"Residuos: {residuos}\")\n</pre> import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from mpl_toolkits.mplot3d import Axes3D  # Generar datos dispersos np.random.seed(67)  # Fijar semilla para reproducibilidad temp = np.random.uniform(80, 320, 35)  # Temperaturas entre 80\u00b0C y 320\u00b0C pres = np.random.uniform(0.8, 3.5, 35)  # Presiones entre 0.8 atm y 3.5 atm rend = (     30 + 0.25 * temp + 5 * pres + np.random.normal(0, 5, 35) )  # Rendimiento con variabilidad  # Convertir a formato adecuado para el modelo X = np.column_stack((temp, pres)) Y = rend  # Crear y entrenar el modelo modelo = LinearRegression() modelo.fit(X, Y)  # Coeficientes del modelo beta0 = modelo.intercept_  # Intercepto (beta0) beta1, beta2 = modelo.coef_  # Coeficientes de temperatura y presi\u00f3n  # Predicciones Y_pred = modelo.predict(X) residuos = Y - Y_pred  # C\u00e1lculo de residuos  # Crear una malla para visualizar el plano de regresi\u00f3n temp_range = np.linspace(80, 320, 25)  # Rango de temperatura m\u00e1s amplio pres_range = np.linspace(0.8, 3.5, 25)  # Rango de presi\u00f3n m\u00e1s amplio temp_mesh, pres_mesh = np.meshgrid(temp_range, pres_range) rend_mesh = beta0 + beta1 * temp_mesh + beta2 * pres_mesh  # Plano de regresi\u00f3n  # Gr\u00e1fica 3D con residuos fig = plt.figure(figsize=(14, 10)) ax = fig.add_subplot(111, projection=\"3d\")  # Puntos observados ax.scatter(X[:, 0], X[:, 1], Y, color=\"blue\", s=80, label=\"Datos observados\")  # Plano de regresi\u00f3n ax.plot_surface(temp_mesh, pres_mesh, rend_mesh, color=\"red\", alpha=0.5)  # Dibujar los residuos como l\u00edneas desde los puntos observados al plano for i in range(len(Y)):     ax.plot(         [X[i, 0], X[i, 0]],         [X[i, 1], X[i, 1]],         [Y[i], Y_pred[i]],         color=\"black\",         linestyle=\"dashed\",     )  # Etiquetas ax.set_xlabel(\"Temperatura (\u00b0C)\") ax.set_ylabel(\"Presi\u00f3n (atm)\") ax.set_title(\"Regresi\u00f3n Lineal en Dos Variables: Rendimiento del Motor con Residuos\") ax.legend()  plt.show()  # Resultados print(     f\"Ecuaci\u00f3n del plano: Rendimiento = {beta0:.2f} + {beta1:.2f}\u00b7Temperatura + {beta2:.2f}\u00b7Presi\u00f3n\" ) print(f\"Residuos: {residuos}\")"},{"location":"Contenido/29_Regresion%20lineal.html#29_regresion-lineal","title":"29_REGRESI\u00d3N LINEAL\u00b6","text":""},{"location":"Contenido/29_Regresion%20lineal.html#ley-de-hooke","title":"Ley de Hooke\u00b6","text":""},{"location":"Contenido/29_Regresion%20lineal.html#cinetica-quimica","title":"Cin\u00e9tica qu\u00edmica\u00b6","text":""},{"location":"Contenido/29_Regresion%20lineal.html#regresion-lineal-inadecuada-en-medicina","title":"Regresi\u00f3n lineal inadecuada en Medicina\u00b6","text":""},{"location":"Contenido/29_Regresion%20lineal.html#regresion-lineal-multiple","title":"REGRESI\u00d3N LINEAL M\u00daLTIPLE\u00b6","text":""},{"location":"Contenido/29_Regresion%20lineal.html#rendimiento-de-un-motor","title":"Rendimiento de un motor\u00b6","text":""},{"location":"Contenido/30_M%C3%A9todo%20de%20Montecarlo.html","title":"30_M\u00c9TODO DE MONTECARLO","text":"In\u00a0[\u00a0]: Copied! <pre>import matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# Definir el radio L\nL = 1\n\n# Crear la figura y el eje\nplt.figure(figsize=(6, 6))\nfig, ax = plt.subplots()\n\n# Dibujar el cuadrado de fondo rojo pastel\ncuadrado = patches.Rectangle(\n    (-L, -L), 2 * L, 2 * L, linewidth=2, edgecolor=\"lightcoral\", facecolor=\"mistyrose\"\n)\nax.add_patch(cuadrado)\n\n# Dibujar la circunferencia de fondo azul pastel\ncircunferencia = patches.Circle(\n    (0, 0), L, linewidth=2, edgecolor=\"lightblue\", facecolor=\"lightcyan\"\n)\nax.add_patch(circunferencia)\n\n# Dibujar y marcar el radio de la circunferencia\nax.plot([0, L], [0, 0], color=\"black\", linestyle=\"--\", linewidth=1.5)  # L\u00ednea del radio\nax.annotate(\n    \"L\", xy=(L / 2, 0), xytext=(L / 2, 0.1), fontsize=12, color=\"black\", ha=\"center\"\n)  # Etiqueta del radio\n\n# Dibujar y marcar el lado del cuadrado\nax.plot(\n    [-L, L], [-L, -L], color=\"black\", linestyle=\"--\", linewidth=1.5\n)  # L\u00ednea del lado\nax.annotate(\n    \"2L\", xy=(0, -L), xytext=(0, -L - 0.2), fontsize=12, color=\"black\", ha=\"center\"\n)  # Etiqueta del lado\n\n# Configurar los l\u00edmites del gr\u00e1fico\nax.set_xlim(-L - 0.5, L + 0.5)\nax.set_ylim(-L - 0.5, L + 0.5)\n\n# Eliminar los ejes\nax.axis(\"off\")\n\n# Mostrar el gr\u00e1fico\nax.set_aspect(\"equal\")\nplt.show()\n</pre> import matplotlib.pyplot as plt import matplotlib.patches as patches  # Definir el radio L L = 1  # Crear la figura y el eje plt.figure(figsize=(6, 6)) fig, ax = plt.subplots()  # Dibujar el cuadrado de fondo rojo pastel cuadrado = patches.Rectangle(     (-L, -L), 2 * L, 2 * L, linewidth=2, edgecolor=\"lightcoral\", facecolor=\"mistyrose\" ) ax.add_patch(cuadrado)  # Dibujar la circunferencia de fondo azul pastel circunferencia = patches.Circle(     (0, 0), L, linewidth=2, edgecolor=\"lightblue\", facecolor=\"lightcyan\" ) ax.add_patch(circunferencia)  # Dibujar y marcar el radio de la circunferencia ax.plot([0, L], [0, 0], color=\"black\", linestyle=\"--\", linewidth=1.5)  # L\u00ednea del radio ax.annotate(     \"L\", xy=(L / 2, 0), xytext=(L / 2, 0.1), fontsize=12, color=\"black\", ha=\"center\" )  # Etiqueta del radio  # Dibujar y marcar el lado del cuadrado ax.plot(     [-L, L], [-L, -L], color=\"black\", linestyle=\"--\", linewidth=1.5 )  # L\u00ednea del lado ax.annotate(     \"2L\", xy=(0, -L), xytext=(0, -L - 0.2), fontsize=12, color=\"black\", ha=\"center\" )  # Etiqueta del lado  # Configurar los l\u00edmites del gr\u00e1fico ax.set_xlim(-L - 0.5, L + 0.5) ax.set_ylim(-L - 0.5, L + 0.5)  # Eliminar los ejes ax.axis(\"off\")  # Mostrar el gr\u00e1fico ax.set_aspect(\"equal\") plt.show() In\u00a0[\u00a0]: Copied! <pre>import random\nimport matplotlib.pyplot as plt\n\n# Par\u00e1metros\nn_simulaciones = 10000\npuntos_dentro = 0\n\n# Lista para almacenar puntos\npuntos_x_dentro = []\npuntos_y_dentro = []\npuntos_x_fuera = []\npuntos_y_fuera = []\n\n# Simulaci\u00f3n y clasficaci\u00f3n de puntos\nfor _ in range(n_simulaciones):\n    x = random.uniform(-1, 1)  # Coordenada x aleatoria\n    y = random.uniform(-1, 1)  # Coordenada y aleatoria\n    if x**2 + y**2 &lt;= 1:  # Comprueba si el puntos es interior\n        puntos_dentro += 1\n        puntos_x_dentro.append(x)\n        puntos_y_dentro.append(y)\n    else:\n        puntos_x_fuera.append(x)\n        puntos_y_fuera.append(y)\n\n# Estimaci\u00f3n de pi\npi_estimado = 4 * (puntos_dentro / n_simulaciones)\nprint(f\"Estimaci\u00f3n del n\u00famero pi: {pi_estimado:.4f}\")\nprint()\n\n# Visualizaci\u00f3n\nplt.figure(figsize=(6, 6))\nplt.scatter(\n    puntos_x_dentro, puntos_y_dentro, color=\"blue\", s=1, label=\"Dentro del c\u00edrculo\"\n)\nplt.scatter(puntos_x_fuera, puntos_y_fuera, color=\"red\", s=1, label=\"Fuera del c\u00edrculo\")\nplt.title(f\"Estimaci\u00f3n de $\\pi$: {pi_estimado:.4f}\")\nplt.legend()\nplt.axis(\"off\")\nplt.show()\n</pre> import random import matplotlib.pyplot as plt  # Par\u00e1metros n_simulaciones = 10000 puntos_dentro = 0  # Lista para almacenar puntos puntos_x_dentro = [] puntos_y_dentro = [] puntos_x_fuera = [] puntos_y_fuera = []  # Simulaci\u00f3n y clasficaci\u00f3n de puntos for _ in range(n_simulaciones):     x = random.uniform(-1, 1)  # Coordenada x aleatoria     y = random.uniform(-1, 1)  # Coordenada y aleatoria     if x**2 + y**2 &lt;= 1:  # Comprueba si el puntos es interior         puntos_dentro += 1         puntos_x_dentro.append(x)         puntos_y_dentro.append(y)     else:         puntos_x_fuera.append(x)         puntos_y_fuera.append(y)  # Estimaci\u00f3n de pi pi_estimado = 4 * (puntos_dentro / n_simulaciones) print(f\"Estimaci\u00f3n del n\u00famero pi: {pi_estimado:.4f}\") print()  # Visualizaci\u00f3n plt.figure(figsize=(6, 6)) plt.scatter(     puntos_x_dentro, puntos_y_dentro, color=\"blue\", s=1, label=\"Dentro del c\u00edrculo\" ) plt.scatter(puntos_x_fuera, puntos_y_fuera, color=\"red\", s=1, label=\"Fuera del c\u00edrculo\") plt.title(f\"Estimaci\u00f3n de $\\pi$: {pi_estimado:.4f}\") plt.legend() plt.axis(\"off\") plt.show() In\u00a0[\u00a0]: Copied! <pre>import random\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Par\u00e1metros\ninversion_inicial = 1000  # Inversi\u00f3n inicial en d\u00f3lares\nrendimiento_medio = 0.08  # Rendimiento medio anual (8%)\nvolatilidad = 0.15  # Volatilidad anual (15%)\nn_anios = 10  # N\u00famero de a\u00f1os\nn_simulaciones = 10000  # N\u00famero de simulaciones\n\n# Simulaci\u00f3n\nvalores_futuros = []\nfor _ in range(n_simulaciones):\n    valor = inversion_inicial\n    for _ in range(n_anios):\n        rendimiento = random.normalvariate(rendimiento_medio, volatilidad)\n        valor *= 1 + rendimiento\n    valores_futuros.append(valor)\n\n# Resultados\nmedia_valor_futuro = np.mean(valores_futuros)\nprint(\n    f\"Valor futuro medio estimado despu\u00e9s de {n_anios} a\u00f1os: {media_valor_futuro:.2f} \u20ac\"\n)\nprint()\n# Gr\u00e1fica\nplt.hist(valores_futuros, bins=50, edgecolor=\"black\")\nplt.title(\n    f\"Distribuci\u00f3n del valor futuro despu\u00e9s de {n_anios} a\u00f1os\\nValor promedio: {media_valor_futuro:.2f} \u20ac\"\n)\nplt.xlabel(\"Valor futuro (USD)\")\nplt.ylabel(\"Frecuencia\")\nplt.show()\n</pre> import random import numpy as np import matplotlib.pyplot as plt  # Par\u00e1metros inversion_inicial = 1000  # Inversi\u00f3n inicial en d\u00f3lares rendimiento_medio = 0.08  # Rendimiento medio anual (8%) volatilidad = 0.15  # Volatilidad anual (15%) n_anios = 10  # N\u00famero de a\u00f1os n_simulaciones = 10000  # N\u00famero de simulaciones  # Simulaci\u00f3n valores_futuros = [] for _ in range(n_simulaciones):     valor = inversion_inicial     for _ in range(n_anios):         rendimiento = random.normalvariate(rendimiento_medio, volatilidad)         valor *= 1 + rendimiento     valores_futuros.append(valor)  # Resultados media_valor_futuro = np.mean(valores_futuros) print(     f\"Valor futuro medio estimado despu\u00e9s de {n_anios} a\u00f1os: {media_valor_futuro:.2f} \u20ac\" ) print() # Gr\u00e1fica plt.hist(valores_futuros, bins=50, edgecolor=\"black\") plt.title(     f\"Distribuci\u00f3n del valor futuro despu\u00e9s de {n_anios} a\u00f1os\\nValor promedio: {media_valor_futuro:.2f} \u20ac\" ) plt.xlabel(\"Valor futuro (USD)\") plt.ylabel(\"Frecuencia\") plt.show() In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Par\u00e1metros del ecosistema\ntrue_population = 1500  # Poblaci\u00f3n real de mariposas (desconocida en la pr\u00e1ctica)\nM = 120  # Mariposas marcadas en la primera captura\nnum_simulations = 10000  # Simulaciones de Montecarlo\nestimated_populations = []\n\n# Simulaci\u00f3n de Montecarlo\nfor _ in range(num_simulations):\n    sample_size = np.random.randint(60, 250)  # Tama\u00f1o de la muestra en la recaptura\n    recaptured = np.random.hypergeometric(M, true_population - M, sample_size)\n\n    if recaptured &gt; 0:\n        estimated_N = (M * sample_size) / recaptured\n        estimated_populations.append(estimated_N)\n\n# Promedio de las estimaciones\nmean_population = np.mean(estimated_populations)\n\n# Visualizaci\u00f3n de los resultados\nplt.hist(estimated_populations, bins=30, alpha=0.7, color=\"purple\", edgecolor=\"black\")\nplt.axvline(\n    x=true_population,\n    color=\"red\",\n    linestyle=\"dashed\",\n    label=f\"Poblaci\u00f3n Real = {true_population}\",\n)\nplt.axvline(\n    x=mean_population,\n    color=\"green\",\n    linestyle=\"dashed\",\n    label=f\"Estimado Montecarlo = {int(mean_population)}\",\n)\nplt.xlabel(\"Tama\u00f1o estimado de la poblaci\u00f3n\")\nplt.ylabel(\"Frecuencia\")\nplt.title(\"Estimaci\u00f3n de poblaci\u00f3n de mariposas con Montecarlo\")\nplt.legend()\nplt.show()\n\n# Resultado final\nprint(\n    f\"Estimaci\u00f3n promedio de la poblaci\u00f3n de mariposas: {int(mean_population)} individuos\"\n)\n</pre> import numpy as np import matplotlib.pyplot as plt  # Par\u00e1metros del ecosistema true_population = 1500  # Poblaci\u00f3n real de mariposas (desconocida en la pr\u00e1ctica) M = 120  # Mariposas marcadas en la primera captura num_simulations = 10000  # Simulaciones de Montecarlo estimated_populations = []  # Simulaci\u00f3n de Montecarlo for _ in range(num_simulations):     sample_size = np.random.randint(60, 250)  # Tama\u00f1o de la muestra en la recaptura     recaptured = np.random.hypergeometric(M, true_population - M, sample_size)      if recaptured &gt; 0:         estimated_N = (M * sample_size) / recaptured         estimated_populations.append(estimated_N)  # Promedio de las estimaciones mean_population = np.mean(estimated_populations)  # Visualizaci\u00f3n de los resultados plt.hist(estimated_populations, bins=30, alpha=0.7, color=\"purple\", edgecolor=\"black\") plt.axvline(     x=true_population,     color=\"red\",     linestyle=\"dashed\",     label=f\"Poblaci\u00f3n Real = {true_population}\", ) plt.axvline(     x=mean_population,     color=\"green\",     linestyle=\"dashed\",     label=f\"Estimado Montecarlo = {int(mean_population)}\", ) plt.xlabel(\"Tama\u00f1o estimado de la poblaci\u00f3n\") plt.ylabel(\"Frecuencia\") plt.title(\"Estimaci\u00f3n de poblaci\u00f3n de mariposas con Montecarlo\") plt.legend() plt.show()  # Resultado final print(     f\"Estimaci\u00f3n promedio de la poblaci\u00f3n de mariposas: {int(mean_population)} individuos\" )"},{"location":"Contenido/30_M%C3%A9todo%20de%20Montecarlo.html#30_metodo-de-montecarlo","title":"30_M\u00c9TODO DE MONTECARLO\u00b6","text":""},{"location":"Contenido/30_M%C3%A9todo%20de%20Montecarlo.html#estimacion-del-numero-pi","title":"Estimaci\u00f3n del n\u00famero $\\pi$\u00b6","text":""},{"location":"Contenido/30_M%C3%A9todo%20de%20Montecarlo.html#simulacion-de-una-inversion-financiera","title":"Simulaci\u00f3n de una inversi\u00f3n financiera\u00b6","text":""},{"location":"Contenido/30_M%C3%A9todo%20de%20Montecarlo.html#estimacion-de-la-poblacion-de-mariposas","title":"Estimaci\u00f3n de la poblaci\u00f3n de mariposas\u00b6","text":""}]}